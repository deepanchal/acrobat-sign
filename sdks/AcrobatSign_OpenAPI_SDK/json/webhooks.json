{
  "openapi": "3.0.0",
  "info": {
    "title": "secure.na3.adobesign.com",
    "version": "6.0.0"
  },
  "servers": [
    {
      "url": "https://secure.na3.adobesign.com/api/rest/v6"
    }
  ],
  "paths": {
    "/webhooks": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-webhook_read\">webhook_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query parameter to fetch all the inactive webhooks along with the active webhooks.",
            "in": "query",
            "name": "showInActiveWebhooks",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Scope of webhook. The possible values are ACCOUNT, GROUP, USER or RESOURCE",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "ACCOUNT",
                "GROUP",
                "USER",
                "RESOURCE"
              ],
              "type": "string"
            }
          },
          {
            "description": "The type of resource on which webhook was created. The possible values are AGREEMENT, WIDGET, MEGASIGN and LIBRARY_DOCUMENT.",
            "in": "query",
            "name": "resourceType",
            "required": false,
            "schema": {
              "enum": [
                "AGREEMENT",
                "WIDGET",
                "MEGASIGN",
                "LIBRARY_DOCUMENT"
              ],
              "type": "string"
            }
          },
          {
            "description": "Used to navigate through the pages. If not provided, returns the first page.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWebhooks"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_read"
            ]
          }
        ],
        "operationId": "getWebhooks",
        "summary": "Retrieves webhooks for a user."
      },
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-webhook_write\">webhook_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookCreationResponse"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_write"
            ]
          }
        ],
        "description": "This is a primary endpoint which is used to create a new webhook. A webhook can only be created in ACTIVE state. Currently, webhooks are supported at four scopes - Account, Group, User and Resource. <br/> <br/> Before creating a webhook successfully at any of these scopes, Acrobat Sign <a href='https://www.adobe.io/apis/documentcloud/sign/docs.html#!adobedocs/adobe-sign/master/webhooks.md#verificationofintentofthewebhookurl'>verifies</a> that the webhook URL that is provided in the registration request really intends to receive notifications and is a valid URL. <br/>There is a defined mechanism for this validation where Acrobat Sign makes an HTTPS GET request to the webhook URL. This request has a custom HTTP header X-AdobeSign-ClientId. The value of this header is the client ID of the application that is requesting to create the webhook. To register a webhook successfully, the webhook URL must respond to this verification request with an HTTPS 2XX response code, and also it must send back the same client ID value in one of the following two ways:<ol><li>In a custom response header, X-AdobeSign-ClientId. This is the same header which was passed in the request, and can be echoed back in the response.</li><li> In the JSON response body of the response with the key of xAdobeSignClientId and its value being the same client ID that was sent in the request. </li></ol><p>On successful registration,  Acrobat Sign sends a success response (any HTTPS 2XX code) to your client app with the unique webhook identifier and a Location header, which contains the URL of the webhook resource created in Acrobat Sign.<br/> To learn more, please refer <a href='https://www.adobe.io/apis/documentcloud/sign/docs.html#!adobedocs/adobe-sign/master/webhooks.md'>Webhooks in Acrobat Sign Guide</a>.</p>",
        "operationId": "createWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookInfo"
              }
            }
          },
          "description": "Information about the webhook that you want to create",
          "required": true
        },
        "summary": "Creates a webhook."
      }
    },
    "/webhooks/{webhookId}": {
      "delete": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-webhook_retention\">webhook_retention</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The webhook identifier, as returned by the webhook creation API or retrieved from the API to fetch webhooks.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_retention"
            ]
          }
        ],
        "operationId": "deleteWebhook",
        "summary": "Deletes a webhook."
      },
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-webhook_read\">webhook_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The webhook identifier, as returned by the webhook creation API or retrieved from the API to fetch webhooks.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_read"
            ]
          }
        ],
        "operationId": "getWebhookInfo",
        "summary": "Retrieves the details of a webhook."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-webhook_write\">webhook_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The webhook identifier, as returned by the webhook creation API or retrieved from the API to fetch webhooks.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_write"
            ]
          }
        ],
        "operationId": "updateWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookInfo"
              }
            }
          },
          "description": "Information necessary to update a webhook",
          "required": true
        },
        "summary": "Updates a webhook."
      }
    },
    "/webhooks/{webhookId}/state": {
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-webhook_write\">webhook_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The webhook identifier, as returned by the webhook creation API or retrieved from the API to fetch webhooks.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "webhook_write"
            ]
          }
        ],
        "operationId": "updateWebhookState",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookStateInfo"
              }
            }
          },
          "required": true
        },
        "summary": "Updates the state of a webhook identified by webhookId in the path."
      }
    }
  },
  "components": {
    "schemas": {
      "PageInfo": {
        "properties": {
          "nextCursor": {
            "description": "Used to navigate to the next page. If not returned, there are no further pages.",
            "type": "string"
          }
        },
        "required": [
          "nextCursor"
        ],
        "type": "object"
      },
      "UserWebhook": {
        "properties": {
          "applicationDisplayName": {
            "description": "The display name of the application through which webhook is created",
            "type": "string"
          },
          "applicationName": {
            "description": "The name of the application through which webhook is created",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the webhook. Will only be returned in GET request. Can't be modified in PUT request",
            "type": "string"
          },
          "lastModified": {
            "description": "Timestamp when the webhook was last updated. Will only be returned in GET request. Can't be modified in PUT request",
            "format": "date",
            "type": "string"
          },
          "name": {
            "description": "The name of the webhook",
            "type": "string"
          },
          "problemNotificationEmails": {
            "description": "Emails of existing Acrobat Sign users to receive warnings and disablement notifications, only Admins can set this.",
            "items": {
              "$ref": "#/components/schemas/WebhookProblemNotificationEmails"
            },
            "type": "array"
          },
          "resourceId": {
            "description": "Id of the resource type for which you want to create webhook. Provide agreementId if webhook needs to be created for an agreement. Similarly, widgetId if webhook needs to be created for a web form, megaSignId if webhook needs to be created for a bulk send and libraryDocumentId if webhook needs to be created for a library document. Need to specify only if scope is 'RESOURCE'. Can't be modified in PUT request",
            "type": "string"
          },
          "resourceType": {
            "description": "The resource for which you want to create webhook. Need to specify only if scope is 'RESOURCE'. Can't be modified in PUT request. The possible values are AGREEMENT, WIDGET,  MEGASIGN AND LIBRARY_DOCUMENT",
            "enum": [
              "AGREEMENT",
              "WIDGET",
              "MEGASIGN",
              "LIBRARY_DOCUMENT"
            ],
            "type": "string"
          },
          "scope": {
            "description": "Scope of webhook. Can't be modified in PUT request. The possible values are ACCOUNT, GROUP, USER or RESOURCE",
            "enum": [
              "ACCOUNT",
              "GROUP",
              "USER",
              "RESOURCE"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status of the webhook. Determines whether the webhook will be actually triggered. Default: ACTIVE, if ACTIVE, this webhook will receive event requests. If INACTIVE, this webhook will not receive event requests. Can't provide status in POST/PUT requests.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          },
          "webhookSubscriptionEvents": {
            "description": "Determines events for which the webhook is triggered. The possible values are <br> AGREEMENT_CREATED : When an agreement is created <br>,\nAGREEMENT_ACTION_DELEGATED : When an agreement is delegated <br>,\nAGREEMENT_RECALLED : When an agreement is recalled <br>,\nAGREEMENT_REJECTED : When an agreement is rejected <br>,\nAGREEMENT_RESTARTED : When an agreement is restarted <br>,\nAGREEMENT_EXPIRED : When an agreement expires <br>,\nAGREEMENT_ACTION_COMPLETED : When an agreement action is completed <br>,\nAGREEMENT_WORKFLOW_COMPLETED : When an agreement workflow is completed <br>,\nAGREEMENT_EMAIL_VIEWED : When an agreement's email is viewed <br>,\nAGREEMENT_MODIFIED : When an agreement is modified <br>,\nAGREEMENT_SHARED : When an agreement is shared <br>,\nAGREEMENT_READY_TO_VAULT : When an agreement is ready to vault <br>,\nAGREEMENT_VAULTED : When an agreement is vaulted <br>,\nAGREEMENT_ACTION_REQUESTED : When an agreement action is requested <br>,\nAGREEMENT_ACTION_REPLACED_SIGNER : When signer is replaced for an agreement <br>,\nAGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM : When an agreement is auto-cancelled due to conversion problem <br>,\nAGREEMENT_DOCUMENTS_DELETED : When an agreement documents are deleted <br>,\nAGREEMENT_EMAIL_BOUNCED : When an agreement email gets bounced <br>,\nAGREEMENT_KBA_AUTHENTICATED : When an agreement KBA is authenticated <br>,\nAGREEMENT_OFFLINE_SYNC : When an agreement is synced offline <br>,\nAGREEMENT_USER_ACK_AGREEMENT_MODIFIED : User Acknowledgement when an agreement is modified <br>,\nAGREEMENT_WEB_IDENTITY_AUTHENTICATED : When an agreement web identity is authenticated <br>,\nAGREEMENT_READY_TO_NOTARIZE: When an agreement is ready for notarization <br>,\nAGREEMENT_EXPIRATION_UPDATED: When agreement expiration time is updated <br>,\nAGREEMENT_REMINDER_SENT: When an agreement reminder is sent <br>,\nAGREEMENT_SIGNER_NAME_CHANGED_BY_SIGNER : When a signer changes his name at signing <br>,\nAGREEMENT_REMINDER_INITIATED: When an agreement reminder is initiated <br>,\nAGREEMENT_ALL : All the supported agreement events for Webhooks <br>,\nMEGASIGN_CREATED : When a bulk send is created <br>,\nMEGASIGN_RECALLED : When a bulk send is recalled <br>,\nMEGASIGN_SHARED : When a bulk send is shared <br>,\nMEGASIGN_REMINDER_SENT: When a bulk send reminder is sent <br>,\nMEGASIGN_REMINDER_INITIATED: When a bulk send reminder is initiated <br>,\nMEGASIGN_ALL : All the supported Send in Bulk events for Webhooks <br>,\nWIDGET_CREATED : When a web form is created <br>,\nWIDGET_MODIFIED : When a web form is modified <br>,\nWIDGET_SHARED : When a web form is shared <br>,\nWIDGET_ENABLED : When a web form is enabled <br>,\nWIDGET_DISABLED : When a web form is disabled <br>,\nWIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM : When a web form is auto-cancelled due to conversion problem <br>,\nWIDGET_ALL : All the supported web form events for Webhooks <br>,\nLIBRARY_DOCUMENT_CREATED : When a library document  is created <br>,\nLIBRARY_DOCUMENT_AUTO_CANCELLED_CONVERSION_PROBLEM : When a library document is auto-cancelled due to conversion problem <br>,\nLIBRARY_DOCUMENT_MODIFIED : When a library document is modified <br>,\nLIBRARY_DOCUMENT_ALL : All the supported library document  events for Webhooks",
            "items": {
              "enum": [
                "AGREEMENT_CREATED",
                "AGREEMENT_ACTION_DELEGATED",
                "AGREEMENT_RECALLED",
                "AGREEMENT_REJECTED",
                "AGREEMENT_EXPIRED",
                "AGREEMENT_ACTION_COMPLETED",
                "AGREEMENT_WORKFLOW_COMPLETED",
                "AGREEMENT_RESTARTED",
                "AGREEMENT_EMAIL_VIEWED",
                "AGREEMENT_MODIFIED",
                "AGREEMENT_SHARED",
                "AGREEMENT_READY_TO_VAULT",
                "AGREEMENT_VAULTED",
                "AGREEMENT_ACTION_REQUESTED",
                "AGREEMENT_ACTION_REPLACED_SIGNER",
                "AGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM",
                "AGREEMENT_DOCUMENTS_DELETED",
                "AGREEMENT_EMAIL_BOUNCED",
                "AGREEMENT_KBA_AUTHENTICATED",
                "AGREEMENT_OFFLINE_SYNC",
                "AGREEMENT_USER_ACK_AGREEMENT_MODIFIED",
                "AGREEMENT_WEB_IDENTITY_AUTHENTICATED",
                "AGREEMENT_READY_TO_NOTARIZE",
                "AGREEMENT_EXPIRATION_UPDATED",
                "AGREEMENT_REMINDER_SENT",
                "AGREEMENT_SIGNER_NAME_CHANGED_BY_SIGNER",
                "AGREEMENT_REMINDER_INITIATED",
                "AGREEMENT_ALL",
                "MEGASIGN_CREATED",
                "MEGASIGN_RECALLED",
                "MEGASIGN_SHARED",
                "MEGASIGN_REMINDER_SENT",
                "MEGASIGN_REMINDER_INITIATED",
                "MEGASIGN_ALL",
                "WIDGET_CREATED",
                "WIDGET_MODIFIED",
                "WIDGET_SHARED",
                "WIDGET_ENABLED",
                "WIDGET_DISABLED",
                "WIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM",
                "WIDGET_ALL",
                "LIBRARY_DOCUMENT_CREATED",
                "LIBRARY_DOCUMENT_AUTO_CANCELLED_CONVERSION_PROBLEM",
                "LIBRARY_DOCUMENT_MODIFIED",
                "LIBRARY_DOCUMENT_ALL"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "webhookUrlInfo": {
            "$ref": "#/components/schemas/WebhookUrlInfo",
            "description": "Info of webhook url",
            "items": {
              "$ref": "#/components/schemas/WebhookUrlInfo"
            }
          }
        },
        "required": [
          "id",
          "name",
          "scope",
          "webhookSubscriptionEvents",
          "webhookUrlInfo"
        ],
        "type": "object"
      },
      "UserWebhooks": {
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo",
            "description": "Pagination information for navigating through the response",
            "items": {
              "$ref": "#/components/schemas/PageInfo"
            }
          },
          "userWebhookList": {
            "description": "An array of web form items",
            "items": {
              "$ref": "#/components/schemas/UserWebhook"
            },
            "type": "array"
          }
        },
        "required": [
          "page",
          "userWebhookList"
        ],
        "type": "object"
      },
      "WebhookAgreementEvents": {
        "properties": {
          "includeDetailedInfo": {
            "description": "Determines whether agreement detailed info will be returned in the response payload",
            "type": "boolean"
          },
          "includeDocumentsInfo": {
            "description": "Determines whether document info will be returned in the response payload",
            "type": "boolean"
          },
          "includeParticipantsInfo": {
            "description": "Determines whether participants info will be returned in the response payload",
            "type": "boolean"
          },
          "includeSignedDocuments": {
            "description": "Determines whether documents will be returned in webhook response payload. If set to true, signed document will be returned in base 64 encoded format in JSON when signing is complete",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "WebhookConditionalParams": {
        "properties": {
          "webhookAgreementEvents": {
            "$ref": "#/components/schemas/WebhookAgreementEvents",
            "description": "Conditional parameters for webhook agreement events",
            "items": {
              "$ref": "#/components/schemas/WebhookAgreementEvents"
            }
          },
          "webhookLibraryDocumentEvents": {
            "$ref": "#/components/schemas/WebhookLibraryDocumentEvents",
            "description": "Conditional parameters for webhook library document events",
            "items": {
              "$ref": "#/components/schemas/WebhookLibraryDocumentEvents"
            }
          },
          "webhookMegaSignEvents": {
            "$ref": "#/components/schemas/WebhookMegaSignEvents",
            "description": "Conditional parameters for webhook Send in Bulk events",
            "items": {
              "$ref": "#/components/schemas/WebhookMegaSignEvents"
            }
          },
          "webhookWidgetEvents": {
            "$ref": "#/components/schemas/WebhookWidgetEvents",
            "description": "Conditional parameters for webhook web form events",
            "items": {
              "$ref": "#/components/schemas/WebhookWidgetEvents"
            }
          }
        },
        "type": "object"
      },
      "WebhookCreationResponse": {
        "description": "A JSON  that contains the id of the newly created webhook",
        "properties": {
          "id": {
            "description": "An identifier of the webhook resource created",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WebhookInfo": {
        "properties": {
          "applicationDisplayName": {
            "description": "The display name of the application through which webhook is created",
            "type": "string"
          },
          "applicationName": {
            "description": "The name of the application through which webhook is created",
            "type": "string"
          },
          "created": {
            "description": "Timestamp when the webhook was created. Will only be returned in GET request. Can't be modified in PUT request",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the webhook. Will only be returned in GET request. Can't be modified in PUT request",
            "type": "string"
          },
          "lastModified": {
            "description": "Timestamp when the webhook was last updated. Will only be returned in GET request. Can't be modified in PUT request",
            "format": "date",
            "type": "string"
          },
          "name": {
            "description": "The name of the webhook",
            "type": "string"
          },
          "problemNotificationEmails": {
            "description": "Emails of existing Acrobat Sign users to receive warnings and disablement notifications, only Admins can set this.",
            "items": {
              "$ref": "#/components/schemas/WebhookProblemNotificationEmails"
            },
            "type": "array"
          },
          "resourceId": {
            "description": "Id of the resource type for which you want to create webhook. Provide agreementId if webhook needs to be created for an agreement. Similarly, widgetId if webhook needs to be created for a web form, megaSignId if webhook needs to be created for a bulk send and libraryDocumentId if webhook needs to be created for a library document. Need to specify only if scope is 'RESOURCE'. Can't be modified in PUT request",
            "type": "string"
          },
          "resourceType": {
            "description": "The resource for which you want to create webhook. Need to specify only if scope is 'RESOURCE'. Can't be modified in PUT request. The possible values are AGREEMENT, WIDGET,  MEGASIGN AND LIBRARY_DOCUMENT",
            "enum": [
              "AGREEMENT",
              "WIDGET",
              "MEGASIGN",
              "LIBRARY_DOCUMENT"
            ],
            "type": "string"
          },
          "scope": {
            "description": "Scope of webhook. Can't be modified in PUT request. The possible values are ACCOUNT, GROUP, USER or RESOURCE",
            "enum": [
              "ACCOUNT",
              "GROUP",
              "USER",
              "RESOURCE"
            ],
            "type": "string"
          },
          "state": {
            "description": "The state in which the webhook should be created",
            "enum": [
              "ACTIVE"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status of the webhook. Determines whether the webhook will be actually triggered. Default: ACTIVE, if ACTIVE, this webhook will receive event requests. If INACTIVE, this webhook will not receive event requests. Can't provide status in POST/PUT requests.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          },
          "webhookConditionalParams": {
            "$ref": "#/components/schemas/WebhookConditionalParams",
            "description": "Conditions which webhook creator can specify for the payload while creating or updating a webhook",
            "items": {
              "$ref": "#/components/schemas/WebhookConditionalParams"
            }
          },
          "webhookSubscriptionEvents": {
            "description": "Determines events for which the webhook is triggered. The possible values are <br> AGREEMENT_CREATED : When an agreement is created <br>,\nAGREEMENT_ACTION_DELEGATED : When an agreement is delegated <br>,\nAGREEMENT_RECALLED : When an agreement is recalled <br>,\nAGREEMENT_REJECTED : When an agreement is rejected <br>,\nAGREEMENT_RESTARTED : When an agreement is restarted <br>,\nAGREEMENT_EXPIRED : When an agreement expires <br>,\nAGREEMENT_ACTION_COMPLETED : When an agreement action is completed <br>,\nAGREEMENT_WORKFLOW_COMPLETED : When an agreement workflow is completed <br>,\nAGREEMENT_EMAIL_VIEWED : When an agreement's email is viewed <br>,\nAGREEMENT_MODIFIED : When an agreement is modified <br>,\nAGREEMENT_SHARED : When an agreement is shared <br>,\nAGREEMENT_READY_TO_VAULT : When an agreement is ready to vault <br>,\nAGREEMENT_VAULTED : When an agreement is vaulted <br>,\nAGREEMENT_ACTION_REQUESTED : When an agreement action is requested <br>,\nAGREEMENT_ACTION_REPLACED_SIGNER : When signer is replaced for an agreement <br>,\nAGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM : When an agreement is auto-cancelled due to conversion problem <br>,\nAGREEMENT_DOCUMENTS_DELETED : When an agreement documents are deleted <br>,\nAGREEMENT_EMAIL_BOUNCED : When an agreement email gets bounced <br>,\nAGREEMENT_KBA_AUTHENTICATED : When an agreement KBA is authenticated <br>,\nAGREEMENT_OFFLINE_SYNC : When an agreement is synced offline <br>,\nAGREEMENT_USER_ACK_AGREEMENT_MODIFIED : User Acknowledgement when an agreement is modified <br>,\nAGREEMENT_WEB_IDENTITY_AUTHENTICATED : When an agreement web identity is authenticated <br>,\nAGREEMENT_READY_TO_NOTARIZE: When an agreement is ready for notarization <br>,\nAGREEMENT_EXPIRATION_UPDATED: When agreement expiration time is updated <br>,\nAGREEMENT_REMINDER_SENT: When an agreement reminder is sent <br>,\nAGREEMENT_SIGNER_NAME_CHANGED_BY_SIGNER : When a signer changes his name at signing <br>,\nAGREEMENT_REMINDER_INITIATED: When an agreement reminder is initiated <br>,\nAGREEMENT_ALL : All the supported agreement events for Webhooks <br>,\nMEGASIGN_CREATED : When a bulk send is created <br>,\nMEGASIGN_RECALLED : When a bulk send is recalled <br>,\nMEGASIGN_SHARED : When a bulk send is shared <br>,\nMEGASIGN_REMINDER_SENT: When a bulk send reminder is sent <br>,\nMEGASIGN_REMINDER_INITIATED: When a bulk send reminder is initiated <br>,\nMEGASIGN_ALL : All the supported Send in Bulk events for Webhooks <br>,\nWIDGET_CREATED : When a web form is created <br>,\nWIDGET_MODIFIED : When a web form is modified <br>,\nWIDGET_SHARED : When a web form is shared <br>,\nWIDGET_ENABLED : When a web form is enabled <br>,\nWIDGET_DISABLED : When a web form is disabled <br>,\nWIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM : When a web form is auto-cancelled due to conversion problem <br>,\nWIDGET_ALL : All the supported web form events for Webhooks <br>,\nLIBRARY_DOCUMENT_CREATED : When a library document  is created <br>,\nLIBRARY_DOCUMENT_AUTO_CANCELLED_CONVERSION_PROBLEM : When a library document is auto-cancelled due to conversion problem <br>,\nLIBRARY_DOCUMENT_MODIFIED : When a library document is modified <br>,\nLIBRARY_DOCUMENT_ALL : All the supported library document  events for Webhooks",
            "items": {
              "enum": [
                "AGREEMENT_CREATED",
                "AGREEMENT_ACTION_DELEGATED",
                "AGREEMENT_RECALLED",
                "AGREEMENT_REJECTED",
                "AGREEMENT_EXPIRED",
                "AGREEMENT_ACTION_COMPLETED",
                "AGREEMENT_WORKFLOW_COMPLETED",
                "AGREEMENT_RESTARTED",
                "AGREEMENT_EMAIL_VIEWED",
                "AGREEMENT_MODIFIED",
                "AGREEMENT_SHARED",
                "AGREEMENT_READY_TO_VAULT",
                "AGREEMENT_VAULTED",
                "AGREEMENT_ACTION_REQUESTED",
                "AGREEMENT_ACTION_REPLACED_SIGNER",
                "AGREEMENT_AUTO_CANCELLED_CONVERSION_PROBLEM",
                "AGREEMENT_DOCUMENTS_DELETED",
                "AGREEMENT_EMAIL_BOUNCED",
                "AGREEMENT_KBA_AUTHENTICATED",
                "AGREEMENT_OFFLINE_SYNC",
                "AGREEMENT_USER_ACK_AGREEMENT_MODIFIED",
                "AGREEMENT_WEB_IDENTITY_AUTHENTICATED",
                "AGREEMENT_READY_TO_NOTARIZE",
                "AGREEMENT_EXPIRATION_UPDATED",
                "AGREEMENT_REMINDER_SENT",
                "AGREEMENT_SIGNER_NAME_CHANGED_BY_SIGNER",
                "AGREEMENT_REMINDER_INITIATED",
                "AGREEMENT_ALL",
                "MEGASIGN_CREATED",
                "MEGASIGN_RECALLED",
                "MEGASIGN_SHARED",
                "MEGASIGN_REMINDER_SENT",
                "MEGASIGN_REMINDER_INITIATED",
                "MEGASIGN_ALL",
                "WIDGET_CREATED",
                "WIDGET_MODIFIED",
                "WIDGET_SHARED",
                "WIDGET_ENABLED",
                "WIDGET_DISABLED",
                "WIDGET_AUTO_CANCELLED_CONVERSION_PROBLEM",
                "WIDGET_ALL",
                "LIBRARY_DOCUMENT_CREATED",
                "LIBRARY_DOCUMENT_AUTO_CANCELLED_CONVERSION_PROBLEM",
                "LIBRARY_DOCUMENT_MODIFIED",
                "LIBRARY_DOCUMENT_ALL"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "webhookUrlInfo": {
            "$ref": "#/components/schemas/WebhookUrlInfo",
            "description": "Info of webhook url",
            "items": {
              "$ref": "#/components/schemas/WebhookUrlInfo"
            }
          }
        },
        "required": [
          "name",
          "scope",
          "state",
          "webhookSubscriptionEvents",
          "webhookUrlInfo"
        ],
        "type": "object"
      },
      "WebhookLibraryDocumentEvents": {
        "properties": {
          "includeDetailedInfo": {
            "description": "Determines whether agreement detailed info will be returned in the response payload",
            "type": "boolean"
          },
          "includeDocumentsInfo": {
            "description": "Determines whether document info will be returned in the response payload",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "WebhookMegaSignEvents": {
        "properties": {
          "includeDetailedInfo": {
            "description": "Determines whether megaign detailed info will be returned in the response payload",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "WebhookProblemNotificationEmails": {
        "properties": {
          "email": {
            "description": "Email of existing Acrobat Sign user in the same account or group as the API caller",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WebhookStateInfo": {
        "properties": {
          "state": {
            "description": "The state to which the webhook should be changed to",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "WebhookUrlInfo": {
        "properties": {
          "url": {
            "description": "Info of webhook url",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "WebhookWidgetEvents": {
        "properties": {
          "includeDetailedInfo": {
            "description": "Determines whether agreement detailed info will be returned in the response payload",
            "type": "boolean"
          },
          "includeDocumentsInfo": {
            "description": "Determines whether document info will be returned in the response payload",
            "type": "boolean"
          },
          "includeParticipantsInfo": {
            "description": "Determines whether participants info will be returned in the response payload",
            "type": "boolean"
          }
        },
        "type": "object"
      }
    }
  }
}
