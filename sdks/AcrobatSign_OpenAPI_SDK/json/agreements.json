{
  "openapi": "3.0.0",
  "info": {
    "title": "secure.na3.adobesign.com",
    "version": "6.0.0"
  },
  "servers": [
    {
      "url": "https://secure.na3.adobesign.com/api/rest/v6"
    }
  ],
  "paths": {
    "/agreements": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Case-sensitive ExternalID for which you would like to retrieve agreement information. ExternalId is passed in the call to the agreement creation API. Note: the externalId value is visible to all participants through the API, so should not be used to contain a sensitive token.",
            "in": "query",
            "name": "externalId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The group identifier, as returned by the group creation API or retrieved from the API to fetch groups.",
            "in": "query",
            "name": "groupId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query parameter to fetch all the hidden agreements along with the visible agreements. Default value is false.",
            "in": "query",
            "name": "showHiddenAgreements",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Used to navigate through the pages. If not provided, returns the first page.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAgreements"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getAgreements",
        "summary": "Retrieves agreements for the user."
      },
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementCreationResponse"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "description": "This is a primary endpoint which is used to create a new agreement. An agreement can be created using transientDocument, libraryDocument or a URL. You can create an agreement in one of the 3 mentioned states: a) <b>DRAFT</b> - to incrementally build the agreement before sending out, b) <b>AUTHORING</b> - to add/edit form fields in the agreement, c) <b>IN_PROCESS</b> - to immediately send the agreement. You can use the PUT /agreements/{agreementId}/state endpoint to transition an agreement between the above mentioned states. An allowed transition would follow the following sequence: DRAFT -> AUTHORING -> IN_PROCESS -> CANCELLED.",
        "operationId": "createAgreement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgreementCreationInfo"
              }
            }
          },
          "description": "Information about the agreement that you want to create.",
          "required": true
        },
        "summary": "Creates an agreement. Sends it out for signatures, and returns the agreementID in the response to the client."
      }
    },
    "/agreements/{agreementId}": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchedAgreementInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getAgreementInfo",
        "summary": "Retrieves the current status of an agreement."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "updateAgreement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgreementInfo"
              }
            }
          },
          "description": "Information necessary to update a modifiable agreement that is presently out for signature.",
          "required": true
        },
        "summary": "Updates the agreement in draft state, or update the expirationTime on an existing agreement that is already out for signature."
      }
    },
    "/agreements/{agreementId}/auditTrail": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              },
              "application/pdf;encoding=base64": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "description": "PDF file stream containing audit trail information",
        "operationId": "getAuditTrail",
        "summary": "Retrieves the audit trail of an agreement identified by agreementId."
      }
    },
    "/agreements/{agreementId}/combinedDocument": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.",
            "in": "query",
            "name": "versionId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant identifier to be used to retrieve documents. If not mentioned, the participation of api caller is used.",
            "in": "query",
            "name": "participantId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to true, attach corresponding supporting documents to the signed agreement PDF. Default value of this parameter is true.",
            "in": "query",
            "name": "attachSupportingDocuments",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "When set to true, attach an audit report to the signed agreement PDF. The default value is false.",
            "in": "query",
            "name": "attachAuditReport",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              },
              "application/pdf;encoding=base64": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getCombinedDocument",
        "summary": "Retrieves a single combined PDF document for the documents associated with an agreement."
      }
    },
    "/agreements/{agreementId}/combinedDocument/pagesInfo": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to true, returns info of all pages of supporting documents as well. Else, return the info of pages of only the original document.",
            "in": "query",
            "name": "includeSupportingDocumentsPagesInfo",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CombinedDocumentPagesInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getCombinedDocumentPagesInfo",
        "summary": "Retrieves info of all pages of a combined PDF document for the documents associated with an agreement."
      }
    },
    "/agreements/{agreementId}/combinedDocument/url": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.",
            "in": "query",
            "name": "versionId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant identifier to be used to retrieve documents. If not mentioned, the participation of api caller is used.",
            "in": "query",
            "name": "participantId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to true, attach corresponding supporting documents to the signed agreement PDF. Default value of this parameter is true.",
            "in": "query",
            "name": "attachSupportingDocuments",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "When set to true, attach an audit report to the signed agreement PDF. The default value is false.",
            "in": "query",
            "name": "attachAuditReport",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentUrl"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getCombinedDocumentUrl",
        "summary": "Retrieves url of all visible pages of all the documents associated with an agreement."
      }
    },
    "/agreements/{agreementId}/documents": {
      "delete": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_retention\">agreement_retention</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_retention"
            ]
          }
        ],
        "operationId": "deleteDocuments",
        "summary": "Deletes all the documents of an agreement."
      },
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.",
            "in": "query",
            "name": "versionId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant identifier to be used to retrieve documents. If not mentioned, the participation of api caller is used.",
            "in": "query",
            "name": "participantId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Content format of the supported documents. It can have two possible values ORIGINAL or CONVERTED_PDF. Default value is CONVERTED_PDF.",
            "in": "query",
            "name": "supportingDocumentContentFormat",
            "required": false,
            "schema": {
              "enum": [
                "ORIGINAL",
                "CONVERTED_PDF"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementDocuments"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getAllDocuments",
        "summary": "Retrieves the IDs of the documents of an agreement identified by agreementId."
      }
    },
    "/agreements/{agreementId}/documents/imageUrls": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.",
            "in": "query",
            "name": "versionId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant identifier to be used to retrieve documents. If not mentioned, the participation of api caller is used.",
            "in": "query",
            "name": "participantId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of image sizes i.e. {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}. Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT}. ",
            "in": "query",
            "name": "imageSizes",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to true, returns image urls of supporting documents as well. Else, returns image urls of only the original documents.",
            "in": "query",
            "name": "includeSupportingDocumentsImageUrls",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "When set to true, returns only image availability. Else, returns both image urls and its availability.",
            "in": "query",
            "name": "showImageAvailabilityOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentsImageUrlsInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getAllDocumentsImageUrls",
        "summary": "Retrieves image urls of all visible pages of all the documents associated with an agreement."
      }
    },
    "/agreements/{agreementId}/documents/{documentId}": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The document identifier, as retrieved from the API which fetches the documents of a specified agreement",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              },
              "*/*;encoding=base64": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getDocument",
        "summary": "Retrieves the file stream of a document of an agreement."
      }
    },
    "/agreements/{agreementId}/documents/{documentId}/imageUrls": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The document identifier, as retrieved from the API which fetches the documents of a specified agreement",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of image sizes i.e. {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}. Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT}. ",
            "in": "query",
            "name": "imageSizes",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to true, returns only image availability. Else, returns both image urls and its availability.",
            "in": "query",
            "name": "showImageAvailabilityOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Start of page number range for which imageUrls are requested. Starting page number should be greater than 0.",
            "in": "query",
            "name": "startPage",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "End of page number range for which imageUrls are requested.",
            "in": "query",
            "name": "endPage",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementDocumentImageUrlsInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getDocumentImageUrls",
        "summary": "Retrieves image urls of all visible pages of a document associated with an agreement."
      }
    },
    "/agreements/{agreementId}/events": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementEventList"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getEvents",
        "summary": "Retrieves the events information for an agreement."
      }
    },
    "/agreements/{agreementId}/formData": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              },
              "text/csv": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "description": "This API can only be called by the creator of the agreement",
        "operationId": "getFormData",
        "summary": "Retrieves data entered into the interactive form fields of the agreement."
      }
    },
    "/agreements/{agreementId}/formFields": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The email address of the participant to be used to retrieve its associated form fields.",
            "in": "query",
            "name": "participantEmail",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementFormFields"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getFormFields",
        "summary": "Retrieves details of form fields of an agreement."
      },
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementFormFields"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "addTemplateFieldsToAgreement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormFieldPostInfo"
              }
            }
          },
          "description": "List of form fields to add or replace",
          "required": true
        },
        "summary": "Adds template fields to an agreement"
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementFormFields"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "updateFormFields",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormFieldPutInfo"
              }
            }
          },
          "description": "List of form fields to set for agreement",
          "required": true
        },
        "summary": "Updates form fields of an agreement.  This will replace all fields in AUTHORING mode agreements, and will replace all fields except for text tag generated fields in DRAFT mode agreements."
      }
    },
    "/agreements/{agreementId}/formFields/mergeInfo": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormFieldMergeInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getMergeInfo",
        "summary": "Retrieves the merge info stored with an agreement."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "updateAgreementMergeInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormFieldMergeInfo"
              }
            }
          },
          "description": "A mapping indicating the default values to set for form fields",
          "required": true
        },
        "summary": "Set the merge info for an agreement."
      }
    },
    "/agreements/{agreementId}/me": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyAgreementInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getAgreementInfoForUser",
        "summary": "Retrieves the agreement information related to the api caller"
      }
    },
    "/agreements/{agreementId}/me/note": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getAgreementNoteForApiUser",
        "summary": "Retrieves the latest note associated with an agreement."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "updateAgreementNoteForApiUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          },
          "description": "The note to be associated with the agreement.",
          "required": true
        },
        "summary": "Updates the latest note associated with an agreement."
      }
    },
    "/agreements/{agreementId}/me/visibility": {
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "updateAgreementVisibility",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisibilityInfo"
              }
            }
          },
          "description": "Information to update visibility of agreement",
          "required": true
        },
        "summary": "Updates the visibility of an agreement."
      }
    },
    "/agreements/{agreementId}/members": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query parameter to fetch next active participation members. Default value is false.",
            "in": "query",
            "name": "includeNextParticipantSet",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembersInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getAllMembers",
        "summary": "Retrieves information of members of the agreement."
      }
    },
    "/agreements/{agreementId}/members/participantSets/{participantSetId}": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant set identifier",
            "in": "path",
            "name": "participantSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedParticipantSetInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getParticipantSet",
        "summary": "Retrieves the participant set of an agreement identified by agreementId in the path."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant set identifier",
            "in": "path",
            "name": "participantSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "updateParticipantSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetailedParticipantSetInfo"
              }
            }
          },
          "description": "The new participant set info.",
          "required": true
        },
        "summary": "Updates the participant set of an agreement identified by agreementId in the path."
      }
    },
    "/agreements/{agreementId}/members/participantSets/{participantSetId}/delegatedParticipantSets": {
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant set identifier",
            "in": "path",
            "name": "participantSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegationResponse"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "description": "Participants marked as delegator can call this API endpoint.",
        "operationId": "createDelegatedParticipantSets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegatedParticipantSetInfo"
              }
            }
          },
          "description": "Information about the delegate participant Set",
          "required": true
        },
        "summary": "Creates a participantSet to which the agreement is forwarded for taking appropriate action."
      }
    },
    "/agreements/{agreementId}/members/participantSets/{participantSetId}/participants/{participantId}/reject": {
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant set identifier",
            "in": "path",
            "name": "participantSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant identifier",
            "in": "path",
            "name": "participantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "rejectAgreementForParticipation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgreementRejectionInfo"
              }
            }
          },
          "description": "Participant rejection information required for rejecting the agreement",
          "required": true
        },
        "summary": "Rejects the agreement for a participant."
      }
    },
    "/agreements/{agreementId}/members/participantSets/{participantSetId}/participants/{participantId}/securityOptions": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant set identifier",
            "in": "path",
            "name": "participantSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant identifier",
            "in": "path",
            "name": "participantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipantSecurityOption"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getAgreementSecurityOptionsForParticipation",
        "summary": "Retrieves the security options for a particular participant."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant set identifier",
            "in": "path",
            "name": "participantSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant identifier",
            "in": "path",
            "name": "participantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "updateAgreementSecurityOptionsForParticipation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantSecurityOption"
              }
            }
          },
          "description": "Security options that apply to the participant",
          "required": true
        },
        "summary": "Updates the security options for a particular participant."
      }
    },
    "/agreements/{agreementId}/members/share": {
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareCreationResponseList"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "createShareOnAgreement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareCreationInfoList"
              }
            }
          },
          "description": "List of agreement share creation information objects.",
          "required": true
        },
        "summary": "Share an agreement with someone."
      }
    },
    "/agreements/{agreementId}/reminders": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A comma-separated list of reminder statuses of the reminders which should be returned in the response. Currently supported values are ACTIVE, CANCELED, COMPLETE",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemindersResponse"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getAgreementReminders",
        "summary": "Retrieves the reminders of an agreement, identified by agreementId in the path."
      },
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReminderCreationResult"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "createReminderOnParticipant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderInfo"
              }
            }
          },
          "description": "The information about a reminder associated with a recipient of an agreement.",
          "required": true
        },
        "summary": "Creates a reminder on the specified participants of an agreement identified by agreementId in the path."
      }
    },
    "/agreements/{agreementId}/reminders/{reminderId}": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The reminder identifier",
            "in": "path",
            "name": "reminderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReminderInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getAgreementReminder",
        "summary": "Retrieves a specific reminder associated with an agreement"
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The reminder identifier",
            "in": "path",
            "name": "reminderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "description": "You can only update an ACTIVE reminder, and can only update the status to 'CANCELED', update reminderParticipantIds, or update note.",
        "operationId": "updateAgreementReminder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderInfo"
              }
            }
          },
          "description": "The information about a reminder associated with a recipient of an agreement.",
          "required": true
        },
        "summary": "Updates an existing reminder for an agreement"
      }
    },
    "/agreements/{agreementId}/sender": {
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "changeAgreementOwner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewSenderInfo"
              }
            }
          },
          "description": "Information of the new sender of the agreement",
          "required": true
        },
        "summary": "This API can change sender for an agreement that has status of draft"
      }
    },
    "/agreements/{agreementId}/settings": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementSettingsInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getAgreementSettings",
        "summary": "Get the settings for the agreement"
      }
    },
    "/agreements/{agreementId}/signerIdentityReport": {
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              },
              "application/pdf;encoding=base64": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "description": "PDF file stream containing signer identify information",
        "operationId": "createSignerIdentityReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignerIdentityReportInfo"
              }
            }
          },
          "description": "Information about the agreement for which you want to create signer identity report."
        },
        "summary": "Retrieves the signer identity report of an agreement identified by agreementId."
      }
    },
    "/agreements/{agreementId}/signingUrls": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Lifetime of the esignUrl, between 30 and 315360000 seconds. If not provided, it is decided by the application settings.",
            "in": "query",
            "name": "expiry",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "An optional field to provide the comma-separated list of parent domain urls where the returned URLs may be iframed. If provided with non-empty and valid list of parent domain urls, it will be used to allow framing for the same. By default the value is null and the Acrobat Sign pages will not be viewable in an iframe.",
            "in": "query",
            "name": "frameParent",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigningUrlResponse"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "getSigningUrl",
        "summary": "Retrieves the URL for the e-sign page for the current signer(s) of an agreement."
      }
    },
    "/agreements/{agreementId}/state": {
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "description": "This endpoint can be used by originator/sender of an agreement to transition between the states of agreement. An allowed transition would follow the following sequence: DRAFT -> AUTHORING -> IN_PROCESS -> CANCELLED.",
        "operationId": "updateAgreementState",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgreementStateInfo"
              }
            }
          },
          "required": true
        },
        "summary": "Updates the state of an agreement identified by agreementId in the path."
      }
    },
    "/agreements/{agreementId}/vaulted": {
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_vault\">agreement_vault</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_vault"
            ]
          }
        ],
        "operationId": "updateAgreementVaulted",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VaultEventInfo"
              }
            }
          },
          "description": "Information to vault an agreement",
          "required": true
        },
        "summary": "Complete the vaulting process and update the agreement as vaulted."
      }
    },
    "/agreements/{agreementId}/views": {
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a> - agreement read is always required</li><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_login\">user_login</a> - Required additionally if the autoLoginUser parameter is set to true</li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
            "in": "path",
            "name": "agreementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementViews"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read",
              "user_login"
            ]
          }
        ],
        "operationId": "createAgreementView",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgreementViewInfo"
              }
            }
          },
          "description": "Name of the required view and its desired configuration.",
          "required": true
        },
        "summary": "Retrieves the latest state view url of agreement."
      }
    }
  },
  "components": {
    "requestBodies": {
      "ReminderInfo": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReminderInfo"
            }
          }
        },
        "description": "The information about a reminder associated with a recipient of an agreement.",
        "required": true
      }
    },
    "schemas": {
      "AccountSharerInfo": {
        "properties": {
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "fullName": {
            "description": "Full name of this account sharer.",
            "type": "string"
          },
          "permissions": {
            "description": "A list of permissions given for this account sharing.",
            "items": {
              "enum": [
                "VIEW",
                "SEND",
                "MODIFY"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "userId": {
            "description": "A unique identifier of the user resource for REST APIs as issued by Acrobat Sign.",
            "type": "string"
          }
        },
        "required": [
          "email",
          "fullName",
          "permissions",
          "userId"
        ],
        "type": "object"
      },
      "AgreementCancellationInfo": {
        "properties": {
          "comment": {
            "description": "An optional comment describing to the recipients why you want to cancel the transaction",
            "type": "string"
          },
          "notifyOthers": {
            "description": "Whether or not you would like the recipients to be notified that the transaction has been cancelled. The default value is false",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AgreementCcInfo": {
        "properties": {
          "email": {
            "description": "Email of the CC participant of the agreement",
            "type": "string"
          },
          "label": {
            "description": "Label of the CC list as returned in workflow description",
            "type": "string"
          },
          "visiblePages": {
            "description": "When you enable limited document visibility (documentVisibilityEnabled), you can specify which file (fileInfo) should be made visible to which specific participant set.<br>Specify one or more label values of a fileInfos element.<br>Each signer participant sets must contain at least one required signature field in at least one visible file included in this API call; if not a page with a signature field is automatically appended for any missing participant sets. If there is a possibility that one or more participant sets do not have a required signature field in the files included in the API call, all signer participant sets should include a special index value of '0' to make this automatically appended signature page visible to the signer. Not doing so may result in an error. For all other roles, you may omit this value to exclude this page.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "AgreementCreationInfo": {
        "properties": {
          "agreementSettingsInfo": {
            "$ref": "#/components/schemas/AgreementSettingsInfo",
            "description": "Agreement Settings Info",
            "items": {
              "$ref": "#/components/schemas/AgreementSettingsInfo"
            }
          },
          "ccs": {
            "description": "A list of one or more CCs that will be copied in the agreement transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file. Should not be provided in offline agreement creation.",
            "items": {
              "$ref": "#/components/schemas/AgreementCcInfo"
            },
            "type": "array"
          },
          "createdDate": {
            "description": "Date when agreement was created. This is a server generated attributed and can not be provided in POST/PUT calls. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "deviceInfo": {
            "$ref": "#/components/schemas/OfflineDeviceInfo",
            "description": "Device info of the offline device. It should only be provided in case of offline agreement creation.",
            "items": {
              "$ref": "#/components/schemas/OfflineDeviceInfo"
            }
          },
          "documentRetentionAppliedDate": {
            "description": "Document retention applied date for this resource.  If provided in POST or PUT, it will simply be ignored.",
            "format": "date",
            "type": "string"
          },
          "documentVisibilityEnabled": {
            "description": "If set to true, enable limited document visibility. Should not be provided in offline agreement creation.",
            "type": "boolean"
          },
          "emailOption": {
            "$ref": "#/components/schemas/EmailOption",
            "description": "Email configurations for the agreement. Should not be provided in offline agreement creation or when updating a non draft agreement.",
            "items": {
              "$ref": "#/components/schemas/EmailOption"
            }
          },
          "expirationTime": {
            "description": "Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.",
            "format": "date",
            "type": "string"
          },
          "externalId": {
            "$ref": "#/components/schemas/ExternalId",
            "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Should not be provided in offline agreement creation. Note: the externalId value is visible to all participants through the API, so should not be used to contain a sensitive token.",
            "items": {
              "$ref": "#/components/schemas/ExternalId"
            }
          },
          "fileInfos": {
            "description": "A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "type": "array"
          },
          "firstReminderDelay": {
            "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Should not be provided in offline agreement creation.",
            "type": "integer"
          },
          "formFieldGenerators": {
            "description": "List of form field generators to produce form fields on the resulting agreement",
            "items": {
              "$ref": "#/components/schemas/FormFieldGenerator"
            },
            "type": "array"
          },
          "formFieldLayerTemplates": {
            "description": "Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "type": "array"
          },
          "groupId": {
            "description": "The unique identifier of the group to which the agreement belongs to. If not provided during agreement creation, primary group of the creator will be used",
            "type": "string"
          },
          "hasFormFieldData": {
            "description": "True if form field data is present.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "hasSignerIdentityReport": {
            "description": "True if agreement has signer identity report available.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the agreement.If provided in POST, it will simply be ignored",
            "type": "string"
          },
          "isDocumentRetentionApplied": {
            "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "lastEventDate": {
            "description": "The date of the last event that occurred for this agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "locale": {
            "description": "The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender",
            "type": "string"
          },
          "mergeFieldInfo": {
            "description": "Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process.",
            "items": {
              "$ref": "#/components/schemas/MergefieldInfo"
            },
            "type": "array"
          },
          "message": {
            "description": "An optional message to the participants, describing what is being sent or why their signature is required",
            "type": "string"
          },
          "name": {
            "description": "The name of the agreement that will be used to identify it, in emails, website and other places",
            "type": "string"
          },
          "notaryInfo": {
            "$ref": "#/components/schemas/NotaryInfo",
            "description": "Notary information",
            "items": {
              "$ref": "#/components/schemas/NotaryInfo"
            }
          },
          "parentId": {
            "description": "The parent id of a bulk send child *OR* the originating id of a web form agreement instance",
            "type": "string"
          },
          "participantSetsInfo": {
            "description": "A list of one or more participant set. A participant set may have one or more participant. If any member of the participant set takes the action that has been assigned to the set(Sign/Approve/Acknowledge etc), the action is considered as the action taken by whole participation set. For regular (non-Send in Bulk) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document",
            "items": {
              "$ref": "#/components/schemas/ParticipantSetInfo"
            },
            "type": "array"
          },
          "postSignOption": {
            "$ref": "#/components/schemas/PostSignOption",
            "description": "URL and associated properties for the success page the user will be taken to after completing the signing process. Should not be provided in offline agreement creation.",
            "items": {
              "$ref": "#/components/schemas/PostSignOption"
            }
          },
          "reminderFrequency": {
            "description": "Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation. If provided in PUT as a different value than the current one, an error will be thrown.",
            "enum": [
              "DAILY_UNTIL_SIGNED",
              "WEEKDAILY_UNTIL_SIGNED",
              "EVERY_OTHER_DAY_UNTIL_SIGNED",
              "EVERY_THIRD_DAY_UNTIL_SIGNED",
              "EVERY_FIFTH_DAY_UNTIL_SIGNED",
              "WEEKLY_UNTIL_SIGNED",
              "ONCE"
            ],
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/SecurityOption",
            "description": "Optional secondary security parameters for the agreement. Should not be provided in offline agreement creation.",
            "items": {
              "$ref": "#/components/schemas/SecurityOption"
            }
          },
          "sendType": {
            "description": "Indicates the experience being used by the originator to send an agreement. <br>FILL_SIGN: originator is using Fill and Sign experience <br>SELF_SIGN: originator is using Self Signing experience <br>REGULAR_SEND: originator is using regular Send experience",
            "enum": [
              "FILL_SIGN",
              "SELF_SIGN",
              "REGULAR_SEND"
            ],
            "type": "string"
          },
          "senderEmail": {
            "description": "Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored",
            "type": "string"
          },
          "signatureType": {
            "description": "Specifies the type of signature you would like to request - written or e-signature. The possible values are <br> ESIGN : Agreement needs to be signed electronically <br>,\nWRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system",
            "enum": [
              "ESIGN",
              "WRITTEN"
            ],
            "type": "string"
          },
          "state": {
            "description": "The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID",
            "enum": [
              "AUTHORING",
              "DRAFT",
              "IN_PROCESS",
              "RESTART"
            ],
            "type": "string"
          },
          "status": {
            "description": "This is a server generated attribute which provides the detailed status of an agreement.",
            "enum": [
              "OUT_FOR_SIGNATURE",
              "OUT_FOR_DELIVERY",
              "OUT_FOR_ACCEPTANCE",
              "OUT_FOR_FORM_FILLING",
              "OUT_FOR_APPROVAL",
              "AUTHORING",
              "CANCELLED",
              "SIGNED",
              "APPROVED",
              "DELIVERED",
              "ACCEPTED",
              "FORM_FILLED",
              "EXPIRED",
              "ARCHIVED",
              "PREFILL",
              "WIDGET_WAITING_FOR_VERIFICATION",
              "DRAFT",
              "DOCUMENTS_NOT_YET_PROCESSED",
              "WAITING_FOR_FAXIN",
              "WAITING_FOR_VERIFICATION",
              "WAITING_FOR_NOTARIZATION"
            ],
            "type": "string"
          },
          "type": {
            "description": "The kind of agreement",
            "enum": [
              "AGREEMENT",
              "MEGASIGN_CHILD",
              "WIDGET_INSTANCE"
            ],
            "type": "string"
          },
          "vaultingInfo": {
            "$ref": "#/components/schemas/VaultingInfo",
            "description": "Vaulting properties that allows Acrobat Sign to securely store documents with a vault provider",
            "items": {
              "$ref": "#/components/schemas/VaultingInfo"
            }
          },
          "workflowId": {
            "description": "The identifier of custom workflow which defines the routing path of an agreement. Should not be provided in offline agreement creation.",
            "type": "string"
          }
        },
        "required": [
          "fileInfos",
          "name",
          "participantSetsInfo",
          "signatureType",
          "state"
        ],
        "type": "object"
      },
      "AgreementCreationResponse": {
        "description": "A JSON  that contains both the id of the newly created agreement and URL / embedded code to direct the user to tne next step in the creation process.",
        "properties": {
          "id": {
            "description": "The unique identifier of the agreement",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "AgreementDocumentImageUrlsInfo": {
        "properties": {
          "documentId": {
            "description": "Id of the document",
            "type": "string"
          },
          "documentImageUrlsList": {
            "description": "A list of documents image URLs.",
            "items": {
              "$ref": "#/components/schemas/DocumentImageUrls"
            },
            "type": "array"
          }
        },
        "required": [
          "documentId",
          "documentImageUrlsList"
        ],
        "type": "object"
      },
      "AgreementDocuments": {
        "properties": {
          "documents": {
            "description": "A list of documents",
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "type": "array"
          },
          "supportingDocuments": {
            "description": "A list of supporting documents",
            "items": {
              "$ref": "#/components/schemas/SupportingDocument"
            },
            "type": "array"
          }
        },
        "required": [
          "documents"
        ],
        "type": "object"
      },
      "AgreementEvent": {
        "properties": {
          "actingUserEmail": {
            "description": "Email address of the user that created the event",
            "type": "string"
          },
          "actingUserIpAddress": {
            "description": "The IP address of the user that created the event",
            "type": "string"
          },
          "actingUserName": {
            "description": "The name of the acting user",
            "type": "string"
          },
          "comment": {
            "description": "The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant",
            "type": "string"
          },
          "date": {
            "description": "The date of the audit event. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "description": {
            "description": "A description of the audit event",
            "type": "string"
          },
          "device": {
            "description": "The device used for the event.",
            "type": "string"
          },
          "deviceLocation": {
            "$ref": "#/components/schemas/DeviceLocation",
            "description": "Location of the device that generated the event (This value may be null due to limited privileges)",
            "items": {
              "$ref": "#/components/schemas/DeviceLocation"
            }
          },
          "devicePhoneNumber": {
            "description": "Phone number from the device used when the participation is completed on a mobile phone",
            "type": "string"
          },
          "digitalSignatureInfo": {
            "$ref": "#/components/schemas/DigitalSignatureInfo",
            "description": "This is present for ESIGNED events when the participation is signed digitally",
            "items": {
              "$ref": "#/components/schemas/DigitalSignatureInfo"
            }
          },
          "electronicSealInfo": {
            "$ref": "#/components/schemas/ElectronicSealInfo",
            "description": "This is present for ELECTRONICLY_SIGNED events when the participation places an electronic seal on the agreement.",
            "items": {
              "$ref": "#/components/schemas/ElectronicSealInfo"
            }
          },
          "id": {
            "description": "The identifier for the event.",
            "type": "string"
          },
          "initiatingUserEmail": {
            "description": "Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
            "type": "string"
          },
          "initiatingUserName": {
            "description": "Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
            "type": "string"
          },
          "participantEmail": {
            "description": "Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
            "type": "string"
          },
          "participantId": {
            "description": "The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
            "type": "string"
          },
          "participantRole": {
            "description": "Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).",
            "enum": [
              "SIGNER",
              "DELEGATE_TO_SIGNER",
              "APPROVER",
              "DELEGATE_TO_APPROVER",
              "ACCEPTOR",
              "DELEGATE_TO_ACCEPTOR",
              "FORM_FILLER",
              "DELEGATE_TO_FORM_FILLER",
              "CERTIFIED_RECIPIENT",
              "DELEGATE_TO_CERTIFIED_RECIPIENT",
              "SHARE",
              "RESOURCE_SHARE",
              "SENDER",
              "NOTARY_SIGNER",
              "ELECTRONIC_SEALER"
            ],
            "type": "string"
          },
          "reminderParticipants": {
            "description": "A list of one or more participants who received the reminders",
            "items": {
              "$ref": "#/components/schemas/ReminderParticipant"
            },
            "type": "array"
          },
          "replacedParticipantEmail": {
            "description": "Email of the user that was replaced by the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
            "type": "string"
          },
          "replacedParticipantName": {
            "description": "Full name of the user that was replaced by the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
            "type": "string"
          },
          "signerNewName": {
            "description": "Signer changed name at signing : new name used to sign.",
            "type": "string"
          },
          "signerOldName": {
            "description": "Signer changed name at signing : name used previous to signing.",
            "type": "string"
          },
          "signingReason": {
            "description": "Signing reason captured during ESIGN or DIGSIGN",
            "type": "string"
          },
          "synchronizationId": {
            "description": "A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)",
            "type": "string"
          },
          "type": {
            "description": "Type of agreement event",
            "enum": [
              "ACCESS_CODE_GENERATED",
              "ACCESS_CODE_CONSUMED",
              "AUTO_CANCELLED_CONVERSION_PROBLEM",
              "ACTION_AUTO_DELEGATED",
              "ACTION_COMPLETED",
              "ACTION_COMPLETED_HOSTED",
              "ACTION_COMPLETED_OFFLINE",
              "ACTION_COMPLETED_OFFLINE_HOSTED",
              "ACTION_COMPLETED_WIDGET_VERIFIED",
              "ACTION_COMPLETED_WIDGET_VERIFIED_API_TOKEN",
              "ACTION_COMPLETED_WIDGET_VERIFICATION_WAIVED",
              "ACTION_DELEGATED",
              "ACTION_REPLACED_SIGNER",
              "ACTION_REQUESTED",
              "CREATED",
              "CREATED_FROM_WIDGET",
              "CREATED_OFFLINE",
              "CREATED_VIA_UPLOAD",
              "CREATED_VIA_ACROBAT",
              "CREATED_VIA_READER",
              "ACTIVATED",
              "DIGITAL_SIGN_UIDAI_SIGNER_CONSENT",
              "DIGSIGNED",
              "DEACTIVATED",
              "DOCUMENTS_DELETED",
              "DOWNLOADED",
              "DELETED",
              "EMAIL_BOUNCED",
              "EMAIL_VIEWED",
              "EXPIRED",
              "EXPIRED_AUTOMATICALLY",
              "FAXED_BY_SENDER",
              "FAXIN_RECEIVED",
              "KBA_AUTHENTICATED",
              "MODIFIED",
              "OFFLINE_SYNC",
              "OTHER",
              "PAID",
              "PRESIGNED",
              "RECALLED",
              "RECALLED_MAX_SIGNING_KBA_ATTEMPTS",
              "RECALLED_MAX_SIGNING_PASSWORD_ATTEMPTS",
              "RECALLED_MAX_SIGNING_PHONE_ATTEMPTS",
              "REJECTED",
              "RESTARTED",
              "RECOVERED",
              "SENDER_CREATED_NEW_REVISION",
              "SHARED",
              "SIGNED",
              "SIGNING_URL_REQUESTED",
              "UPLOADED_BY_SENDER",
              "USER_ACK_AGREEMENT_MODIFIED",
              "READY_TO_VAULT",
              "VAULTED",
              "WEB_IDENTITY_AUTHENTICATED",
              "WEB_IDENTITY_SPECIFIED",
              "WRITTEN_DOWNLOAD",
              "WRITTEN_SIGNED",
              "READY_TO_NOTARIZE",
              "NOTARIZED",
              "NOTARY_TRANSACTION",
              "SIGNER_NAME_CHANGED_BY_SIGNER",
              "ELECTRONICALLY_SEALED",
              "URL_REAUTHENTICATION_REQUESTED",
              "REMINDER_SENT",
              "DOCUMENTS_VIEWED",
              "DOCUMENTS_VIEWED_HOSTED",
              "DOCUMENTS_VIEWED_PASSWORD_PROTECTED",
              "REMINDER_INITIATED"
            ],
            "type": "string"
          },
          "vaultEventId": {
            "description": "The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)",
            "type": "string"
          },
          "vaultProviderName": {
            "description": "Name of the vault provider for the vault event (if vaulted, otherwise null)",
            "type": "string"
          },
          "versionId": {
            "description": "An ID which uniquely identifies the version of the document associated with this audit event",
            "type": "string"
          }
        },
        "required": [
          "actingUserEmail",
          "actingUserIpAddress",
          "actingUserName",
          "date",
          "description",
          "device",
          "deviceLocation",
          "devicePhoneNumber",
          "digitalSignatureInfo",
          "electronicSealInfo",
          "initiatingUserEmail",
          "initiatingUserName",
          "participantEmail",
          "participantId",
          "participantRole",
          "synchronizationId",
          "type",
          "vaultEventId",
          "vaultProviderName",
          "versionId"
        ],
        "type": "object"
      },
      "AgreementEventList": {
        "properties": {
          "events": {
            "description": "An array of event objects.",
            "items": {
              "$ref": "#/components/schemas/AgreementEvent"
            },
            "type": "array"
          }
        },
        "required": [
          "events"
        ],
        "type": "object"
      },
      "AgreementFormFields": {
        "description": "A JSON list of all of the fields for a form",
        "properties": {
          "fields": {
            "description": "List of the form fields in an agreement",
            "items": {
              "$ref": "#/components/schemas/FormField"
            },
            "type": "array"
          }
        },
        "required": [
          "fields"
        ],
        "type": "object"
      },
      "AgreementInfo": {
        "properties": {
          "agreementSettingsInfo": {
            "$ref": "#/components/schemas/AgreementSettingsInfo",
            "description": "Agreement Settings Info",
            "items": {
              "$ref": "#/components/schemas/AgreementSettingsInfo"
            }
          },
          "ccs": {
            "description": "A list of one or more CCs that will be copied in the agreement transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file. Should not be provided in offline agreement creation.",
            "items": {
              "$ref": "#/components/schemas/AgreementCcInfo"
            },
            "type": "array"
          },
          "createdDate": {
            "description": "Date when agreement was created. This is a server generated attributed and can not be provided in POST/PUT calls. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "deviceInfo": {
            "$ref": "#/components/schemas/OfflineDeviceInfo",
            "description": "Device info of the offline device. It should only be provided in case of offline agreement creation.",
            "items": {
              "$ref": "#/components/schemas/OfflineDeviceInfo"
            }
          },
          "documentRetentionAppliedDate": {
            "description": "Document retention applied date for this resource.  If provided in POST or PUT, it will simply be ignored.",
            "format": "date",
            "type": "string"
          },
          "documentVisibilityEnabled": {
            "description": "If set to true, enable limited document visibility. Should not be provided in offline agreement creation.",
            "type": "boolean"
          },
          "emailOption": {
            "$ref": "#/components/schemas/EmailOption",
            "description": "Email configurations for the agreement. Should not be provided in offline agreement creation or when updating a non draft agreement.",
            "items": {
              "$ref": "#/components/schemas/EmailOption"
            }
          },
          "expirationTime": {
            "description": "Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.",
            "format": "date",
            "type": "string"
          },
          "externalId": {
            "$ref": "#/components/schemas/ExternalId",
            "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Should not be provided in offline agreement creation. Note: the externalId value is visible to all participants through the API, so should not be used to contain a sensitive token.",
            "items": {
              "$ref": "#/components/schemas/ExternalId"
            }
          },
          "fileInfos": {
            "description": "A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "type": "array"
          },
          "firstReminderDelay": {
            "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Should not be provided in offline agreement creation.",
            "type": "integer"
          },
          "formFieldGenerators": {
            "description": "List of form field generators to produce form fields on the resulting agreement",
            "items": {
              "$ref": "#/components/schemas/FormFieldGenerator"
            },
            "type": "array"
          },
          "formFieldLayerTemplates": {
            "description": "Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "type": "array"
          },
          "groupId": {
            "description": "The unique identifier of the group to which the agreement belongs to. If not provided during agreement creation, primary group of the creator will be used",
            "type": "string"
          },
          "hasFormFieldData": {
            "description": "True if form field data is present.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "hasSignerIdentityReport": {
            "description": "True if agreement has signer identity report available.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the agreement.If provided in POST, it will simply be ignored",
            "type": "string"
          },
          "isDocumentRetentionApplied": {
            "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "lastEventDate": {
            "description": "The date of the last event that occurred for this agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "locale": {
            "description": "The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender",
            "type": "string"
          },
          "mergeFieldInfo": {
            "description": "Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process.",
            "items": {
              "$ref": "#/components/schemas/MergefieldInfo"
            },
            "type": "array"
          },
          "message": {
            "description": "An optional message to the participants, describing what is being sent or why their signature is required",
            "type": "string"
          },
          "name": {
            "description": "The name of the agreement that will be used to identify it, in emails, website and other places",
            "type": "string"
          },
          "notaryInfo": {
            "$ref": "#/components/schemas/NotaryInfo",
            "description": "Notary information",
            "items": {
              "$ref": "#/components/schemas/NotaryInfo"
            }
          },
          "parentId": {
            "description": "The parent id of a bulk send child *OR* the originating id of a web form agreement instance",
            "type": "string"
          },
          "participantSetsInfo": {
            "description": "A list of one or more participant set. A participant set may have one or more participant. If any member of the participant set takes the action that has been assigned to the set(Sign/Approve/Acknowledge etc), the action is considered as the action taken by whole participation set. For regular (non-Send in Bulk) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document",
            "items": {
              "$ref": "#/components/schemas/ParticipantSetInfo"
            },
            "type": "array"
          },
          "postSignOption": {
            "$ref": "#/components/schemas/PostSignOption",
            "description": "URL and associated properties for the success page the user will be taken to after completing the signing process. Should not be provided in offline agreement creation.",
            "items": {
              "$ref": "#/components/schemas/PostSignOption"
            }
          },
          "reminderFrequency": {
            "description": "Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation. If provided in PUT as a different value than the current one, an error will be thrown.",
            "enum": [
              "DAILY_UNTIL_SIGNED",
              "WEEKDAILY_UNTIL_SIGNED",
              "EVERY_OTHER_DAY_UNTIL_SIGNED",
              "EVERY_THIRD_DAY_UNTIL_SIGNED",
              "EVERY_FIFTH_DAY_UNTIL_SIGNED",
              "WEEKLY_UNTIL_SIGNED",
              "ONCE"
            ],
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/SecurityOption",
            "description": "Optional secondary security parameters for the agreement. Should not be provided in offline agreement creation.",
            "items": {
              "$ref": "#/components/schemas/SecurityOption"
            }
          },
          "sendType": {
            "description": "Indicates the experience being used by the originator to send an agreement. <br>FILL_SIGN: originator is using Fill and Sign experience <br>SELF_SIGN: originator is using Self Signing experience <br>REGULAR_SEND: originator is using regular Send experience",
            "enum": [
              "FILL_SIGN",
              "SELF_SIGN",
              "REGULAR_SEND"
            ],
            "type": "string"
          },
          "senderEmail": {
            "description": "Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored",
            "type": "string"
          },
          "signatureType": {
            "description": "Specifies the type of signature you would like to request - written or e-signature. The possible values are <br> ESIGN : Agreement needs to be signed electronically <br>,\nWRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system",
            "enum": [
              "ESIGN",
              "WRITTEN"
            ],
            "type": "string"
          },
          "state": {
            "description": "The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID",
            "enum": [
              "AUTHORING",
              "DRAFT",
              "IN_PROCESS",
              "RESTART"
            ],
            "type": "string"
          },
          "status": {
            "description": "This is a server generated attribute which provides the detailed status of an agreement.",
            "enum": [
              "OUT_FOR_SIGNATURE",
              "OUT_FOR_DELIVERY",
              "OUT_FOR_ACCEPTANCE",
              "OUT_FOR_FORM_FILLING",
              "OUT_FOR_APPROVAL",
              "AUTHORING",
              "CANCELLED",
              "SIGNED",
              "APPROVED",
              "DELIVERED",
              "ACCEPTED",
              "FORM_FILLED",
              "EXPIRED",
              "ARCHIVED",
              "PREFILL",
              "WIDGET_WAITING_FOR_VERIFICATION",
              "DRAFT",
              "DOCUMENTS_NOT_YET_PROCESSED",
              "WAITING_FOR_FAXIN",
              "WAITING_FOR_VERIFICATION",
              "WAITING_FOR_NOTARIZATION"
            ],
            "type": "string"
          },
          "type": {
            "description": "The kind of agreement",
            "enum": [
              "AGREEMENT",
              "MEGASIGN_CHILD",
              "WIDGET_INSTANCE"
            ],
            "type": "string"
          },
          "vaultingInfo": {
            "$ref": "#/components/schemas/VaultingInfo",
            "description": "Vaulting properties that allows Acrobat Sign to securely store documents with a vault provider",
            "items": {
              "$ref": "#/components/schemas/VaultingInfo"
            }
          },
          "workflowId": {
            "description": "The identifier of custom workflow which defines the routing path of an agreement. Should not be provided in offline agreement creation.",
            "type": "string"
          }
        },
        "required": [
          "fileInfos",
          "name",
          "participantSetsInfo",
          "signatureType",
          "status"
        ],
        "type": "object"
      },
      "AgreementRejectionInfo": {
        "properties": {
          "comment": {
            "description": "Comment describing the reason to reject this agreement.",
            "type": "string"
          }
        },
        "required": [
          "comment"
        ],
        "type": "object"
      },
      "AgreementRestartInfo": {
        "properties": {
          "message": {
            "description": "Message explaining the reason for the agreement restart",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "AgreementSettingsInfo": {
        "properties": {
          "canEditAgreementSettings": {
            "description": " if false, the user will not be allowed to modify any agreement settings. defaults to true.",
            "type": "boolean"
          },
          "canEditElectronicSeals": {
            "description": "if false, the user will not be allowed to modify electronic seal, defaults to true.",
            "type": "boolean"
          },
          "canEditFiles": {
            "description": "if false, the user will not be permitted to modify the set of files being sent out for signature, defaults to true.",
            "type": "boolean"
          },
          "hipaaEnabled": {
            "description": "True if the Agreement sender had HIPAA protections enabled for their agreements at the time the agreement was created.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AgreementStateInfo": {
        "properties": {
          "agreementCancellationInfo": {
            "$ref": "#/components/schemas/AgreementCancellationInfo",
            "description": "Cancellation information for the agreement",
            "items": {
              "$ref": "#/components/schemas/AgreementCancellationInfo"
            }
          },
          "agreementRestartInfo": {
            "$ref": "#/components/schemas/AgreementRestartInfo",
            "description": "Information regarding agreement restart",
            "items": {
              "$ref": "#/components/schemas/AgreementRestartInfo"
            }
          },
          "state": {
            "description": "The state in which the agreement should land",
            "enum": [
              "AUTHORING",
              "CANCELLED",
              "IN_PROCESS",
              "RESTART"
            ],
            "type": "string"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "AgreementView": {
        "properties": {
          "embeddedCode": {
            "description": "Embedded code of url of resource ",
            "type": "string"
          },
          "expiration": {
            "description": "Expiration of user url ",
            "format": "date",
            "type": "string"
          },
          "isCurrent": {
            "description": "True if this view is the current view",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the requested agreement view",
            "enum": [
              "COMPOSE",
              "MODIFY",
              "PREFILL",
              "AUTHORING",
              "SEND_PROGRESS",
              "POST_CREATE",
              "DOCUMENT",
              "MANAGE",
              "SIGNING",
              "ALL"
            ],
            "type": "string"
          },
          "url": {
            "description": "Url of resource location",
            "type": "string"
          }
        },
        "required": [
          "isCurrent",
          "name"
        ],
        "type": "object"
      },
      "AgreementViewConfiguration": {
        "properties": {
          "autoLoginUser": {
            "description": "Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false",
            "type": "boolean"
          },
          "frameParent": {
            "description": "An optional field to provide the comma-separated list of parent domain urls where the returned URLs may be iframed. If provided with non-empty and valid list of parent domain urls, it will be used to allow framing for the same. By default the value is null and the Acrobat Sign pages will not be viewable in an iframe.",
            "type": "string"
          },
          "locale": {
            "description": "Message template locale",
            "type": "string"
          },
          "noChrome": {
            "description": "No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false",
            "type": "boolean"
          },
          "postSendOption": {
            "$ref": "#/components/schemas/PostSendOption",
            "description": "Optional field available only in COMPOSE, AUTHORING and PREFILL views or as part of ALL view. Allows API client to configure a URL to redirect the sender to after the SEND flow is complete. User must be logged in or autoLoginUser=true must be specified to configure the redirect. The view URL returned in the API response must be visited within 60 seconds of the response to configure the redirect. If not the user will be redirected to the default POST_SEND view",
            "items": {
              "$ref": "#/components/schemas/PostSendOption"
            }
          }
        },
        "type": "object"
      },
      "AgreementViewInfo": {
        "properties": {
          "commonViewConfiguration": {
            "$ref": "#/components/schemas/AgreementViewConfiguration",
            "description": "Common view configuration for all the available views",
            "items": {
              "$ref": "#/components/schemas/AgreementViewConfiguration"
            }
          },
          "composeViewConfiguration": {
            "$ref": "#/components/schemas/ComposeViewConfiguration",
            "description": "Compose page view configuration",
            "items": {
              "$ref": "#/components/schemas/ComposeViewConfiguration"
            }
          },
          "name": {
            "description": "Name of the requested agreement view",
            "enum": [
              "COMPOSE",
              "MODIFY",
              "PREFILL",
              "AUTHORING",
              "SEND_PROGRESS",
              "POST_CREATE",
              "DOCUMENT",
              "MANAGE",
              "SIGNING",
              "ALL"
            ],
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "AgreementViews": {
        "properties": {
          "agreementViewList": {
            "description": "List of agreement views",
            "items": {
              "$ref": "#/components/schemas/AgreementView"
            },
            "type": "array"
          }
        },
        "required": [
          "agreementViewList"
        ],
        "type": "object"
      },
      "AnchorTextInfo": {
        "description": "Information required for generating form fields relative to text content within the agreement documents",
        "properties": {
          "anchorText": {
            "description": "Text to search for to generate form fields relative to",
            "type": "string"
          },
          "anchoredFormFieldLocation": {
            "$ref": "#/components/schemas/AnchoredFormFieldLocation",
            "description": "Information on the relative location to generate form fields",
            "items": {
              "$ref": "#/components/schemas/AnchoredFormFieldLocation"
            }
          },
          "pages": {
            "description": "An array of page numbers to search for anchored text to generate form fields on. By default all pages will be searched",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "required": [
          "anchorText",
          "anchoredFormFieldLocation"
        ],
        "type": "object"
      },
      "AnchoredFormFieldLocation": {
        "description": "Location information for placing generated form fields relative to the location of text content found within the agreement documents",
        "properties": {
          "height": {
            "description": "The generated form field height in default user space units",
            "format": "double",
            "type": "number"
          },
          "offsetX": {
            "description": "The x offset from the anchor text to the form field in default user space units",
            "format": "double",
            "type": "number"
          },
          "offsetY": {
            "description": "The y offset from the anchor text to the form field in default user space units",
            "format": "double",
            "type": "number"
          },
          "width": {
            "description": "The generated form field width in default user space units",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "height",
          "width"
        ],
        "type": "object"
      },
      "CCParticipantInfo": {
        "properties": {
          "company": {
            "description": "Company of the CC participant, if available.",
            "type": "string"
          },
          "email": {
            "description": "Email of the CC participant of the agreement",
            "type": "string"
          },
          "hidden": {
            "description": "True if the agreement is hidden for the user that is calling the API. Only returned if self is true.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the CC participant, if available.",
            "type": "string"
          },
          "participantId": {
            "description": " The unique identifier of the CC participant of the agreement.",
            "type": "string"
          },
          "self": {
            "description": "True if the CC participant is the same user that is calling the API.",
            "type": "boolean"
          }
        },
        "required": [
          "company",
          "email",
          "hidden",
          "name",
          "participantId",
          "self"
        ],
        "type": "object"
      },
      "CombinedDocumentPagesInfo": {
        "properties": {
          "documentPagesInfo": {
            "description": "List of basic information of all pages of the combined document of an Agreement.",
            "items": {
              "$ref": "#/components/schemas/DocumentPageInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "documentPagesInfo"
        ],
        "type": "object"
      },
      "ComposeViewConfiguration": {
        "properties": {
          "fileUploadOptions": {
            "$ref": "#/components/schemas/FileUploadOptions",
            "description": "Controls various file upload options available on the compose page",
            "items": {
              "$ref": "#/components/schemas/FileUploadOptions"
            }
          },
          "isPreviewSelected": {
            "description": "Should the compose page be provided with authoring mode selected?",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DelegatedParticipantInfo": {
        "properties": {
          "email": {
            "description": "Email of the participant. In case of modifying a participant set (PUT) this is a required field. In case of GET, this is the required field and will always be returned unless it is a fax workflow (legacy agreements) that were created using fax as input",
            "type": "string"
          },
          "fullName": {
            "description": "The full name of the delegatee, if available.",
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/DelegatedParticipantSecurityOption",
            "description": "Security options that apply to the participant.",
            "items": {
              "$ref": "#/components/schemas/DelegatedParticipantSecurityOption"
            }
          }
        },
        "required": [
          "email",
          "securityOption"
        ],
        "type": "object"
      },
      "DelegatedParticipantSecurityOption": {
        "properties": {
          "phoneInfo": {
            "$ref": "#/components/schemas/PhoneInfo",
            "description": "The phoneInfo required for the participant to view and sign the document",
            "items": {
              "$ref": "#/components/schemas/PhoneInfo"
            }
          }
        },
        "type": "object"
      },
      "DelegatedParticipantSetInfo": {
        "properties": {
          "memberInfos": {
            "description": "Array of ParticipantInfo objects, containing participant-specific data (e.g. email). All participants in the array belong to the same set. Required, unless ParticipantSet has the ELECTRONIC_SEALER role",
            "items": {
              "$ref": "#/components/schemas/DelegatedParticipantInfo"
            },
            "type": "array"
          },
          "privateMessage": {
            "description": "Participant set's private message - all participants in the set will receive the same message. This cannot be changed as part of the PUT call.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DelegationResponse": {
        "description": "A JSON that contains the id of newly created delegated participant set",
        "properties": {
          "id": {
            "description": "The unique identifier of the participant set to which the agreement was forwarded.",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "DetailedParticipantInfo": {
        "properties": {
          "company": {
            "description": "The company of the participant, if available. This cannot be changed as part of the PUT call.",
            "type": "string"
          },
          "createdDate": {
            "description": "The date when the participant was added. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
            "format": "date",
            "type": "string"
          },
          "email": {
            "description": "Email of the participant. In case of modifying a participant set (PUT) this is a required field. In case of GET, this is the required field and will always be returned unless it is a fax workflow (legacy agreements) that were created using fax as input",
            "type": "string"
          },
          "hidden": {
            "description": "True if the agreement is hidden for the user that is calling the API. Only returned if self is true. Ignored (not required) if modifying a participant (PUT).",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the participant. This will be returned as part of Get call but is not mandatory to be passed as part of PUT call for agreements/{id}/members/participantSets/{id}.",
            "type": "string"
          },
          "name": {
            "description": "The name of the participant, if available. This cannot be changed as part of the PUT call.",
            "type": "string"
          },
          "privateMessage": {
            "description": "The private message of the participant, if available. This cannot be changed as part of the PUT call.",
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/ParticipantSecurityOption",
            "description": "Security options that apply to the participant.",
            "items": {
              "$ref": "#/components/schemas/ParticipantSecurityOption"
            }
          },
          "self": {
            "description": "True if this participant is the same user that is calling the API. Returned as part of Get. Ignored (not required) if modifying a participant set (PUT).",
            "type": "boolean"
          },
          "status": {
            "description": "The status of the participant. This cannot be changed as part of the PUT call. New participants will be ignored if added with a REPLACED status.",
            "enum": [
              "REPLACED",
              "ACTIVE"
            ],
            "type": "string"
          },
          "userId": {
            "description": "The user ID of the participant. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
            "type": "string"
          }
        },
        "required": [
          "email",
          "securityOption"
        ],
        "type": "object"
      },
      "DetailedParticipantSetInfo": {
        "properties": {
          "electronicSealId": {
            "description": "ID of the sealing credential, which can be obtained through <b>GET /autoseals</b> call.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the participant set. This cannot be changed as part of the PUT call.",
            "type": "string"
          },
          "memberInfos": {
            "description": "Array of ParticipantInfo objects, containing participant-specific data (e.g. email). All participants in the array belong to the same set. Required, unless ParticipantSet has the ELECTRONIC_SEALER role",
            "items": {
              "$ref": "#/components/schemas/DetailedParticipantInfo"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of ParticipantSet (it can be empty, but needs not to be unique in a single agreement). Maximum no of characters in participant set name is restricted to 255. This cannot be changed as part of the PUT call.",
            "type": "string"
          },
          "order": {
            "description": "Index indicating sequential signing group (specified for hybrid routing). This cannot be changed as part of the PUT call.",
            "type": "integer"
          },
          "privateMessage": {
            "description": "Participant set's private message - all participants in the set will receive the same message. This cannot be changed as part of the PUT call.",
            "type": "string"
          },
          "role": {
            "description": "Role assumed by all participants in the set (signer, approver etc.). This cannot be changed as part of the PUT call.",
            "enum": [
              "SIGNER",
              "SENDER",
              "APPROVER",
              "ACCEPTOR",
              "CERTIFIED_RECIPIENT",
              "FORM_FILLER",
              "DELEGATE_TO_SIGNER",
              "DELEGATE_TO_APPROVER",
              "DELEGATE_TO_ACCEPTOR",
              "DELEGATE_TO_CERTIFIED_RECIPIENT",
              "DELEGATE_TO_FORM_FILLER",
              "SHARE",
              "NOTARY_SIGNER",
              "ELECTRONIC_SEALER"
            ],
            "type": "string"
          },
          "status": {
            "description": "The agreement status with respect to the participant set. This cannot be changed as part of the PUT call.",
            "enum": [
              "CANCELLED",
              "COMPLETED",
              "EXPIRED",
              "NOT_YET_VISIBLE",
              "WAITING_FOR_NOTARIZATION",
              "WAITING_FOR_OTHERS",
              "WAITING_FOR_MY_APPROVAL",
              "WAITING_FOR_AUTHORING",
              "WAITING_FOR_MY_ACKNOWLEDGEMENT",
              "WAITING_FOR_MY_ACCEPTANCE",
              "WAITING_FOR_MY_FORM_FILLING",
              "WAITING_FOR_MY_DELEGATION",
              "WAITING_FOR_MY_SIGNATURE",
              "WAITING_FOR_MY_VERIFICATION",
              "WAITING_FOR_PREFILL"
            ],
            "type": "string"
          }
        },
        "required": [
          "order",
          "role"
        ],
        "type": "object"
      },
      "DeviceLocation": {
        "properties": {
          "latitude": {
            "description": "Latitude coordinate",
            "format": "float",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude coordinate",
            "format": "float",
            "type": "number"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object"
      },
      "DigAuthInfo": {
        "properties": {
          "providerDesc": {
            "description": "Digital Identity Gateway Provider Description. This will be ignored as part of POST or PUT calls.",
            "type": "string"
          },
          "providerId": {
            "description": "Digital Identity Gateway Provider Id. When replacing a participant that has DIG_ID authentication specified, you must supply a provider id for the new participant.",
            "type": "string"
          },
          "providerName": {
            "description": "Digital Identity Gateway Provider Name. This will be ignored as part of POST or PUT calls.",
            "type": "string"
          }
        },
        "required": [
          "providerId"
        ],
        "type": "object"
      },
      "DigitalSignatureInfo": {
        "properties": {
          "certificateIssuer": {
            "description": "Certificate Issuer for digital signing",
            "type": "string"
          },
          "cloudProviderIp": {
            "description": "Cloud Provider IP for digital signing",
            "type": "string"
          },
          "cloudProviderUrl": {
            "description": "Cloud Provider URL for digital signing",
            "type": "string"
          },
          "company": {
            "description": "Company name captured during digital signing",
            "type": "string"
          },
          "email": {
            "description": "Email captured during digital signing",
            "type": "string"
          },
          "name": {
            "description": "Name captured during digital signing",
            "type": "string"
          }
        },
        "required": [
          "company",
          "email",
          "name"
        ],
        "type": "object"
      },
      "DisplayParticipantInfo": {
        "properties": {
          "company": {
            "description": "Displays the name of the company of the user, if available",
            "type": "string"
          },
          "email": {
            "description": "Displays the email of the user",
            "type": "string"
          },
          "fullName": {
            "description": "Displays the full name of the user, if available. ",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "DisplayParticipantSetInfo": {
        "properties": {
          "displayUserSetMemberInfos": {
            "description": "Displays the info about user set",
            "items": {
              "$ref": "#/components/schemas/DisplayParticipantInfo"
            },
            "type": "array"
          },
          "displayUserSetName": {
            "description": "The name of the display user set. Returned only, if the API caller is the sender of agreement. ",
            "type": "string"
          }
        },
        "required": [
          "displayUserSetMemberInfos"
        ],
        "type": "object"
      },
      "Document": {
        "properties": {
          "createdDate": {
            "description": "The date the document was created",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "ID of the document. In case of PUT call, this is the only field that is accepted in Document structure. Name and mimeType are ignored in case of PUT call",
            "type": "string"
          },
          "label": {
            "description": "Label of the document",
            "type": "string"
          },
          "mimeType": {
            "description": "mimeType of the original file. This is returned in GET but not accepted back in PUT",
            "type": "string"
          },
          "name": {
            "description": "Name of the original document uploaded. This is returned in GET but not accepted back in PUT",
            "type": "string"
          },
          "numPages": {
            "description": "Number of pages in the document",
            "type": "integer"
          }
        },
        "required": [
          "createdDate",
          "id",
          "label",
          "numPages"
        ],
        "type": "object"
      },
      "DocumentImageUrls": {
        "properties": {
          "imageSize": {
            "description": "ImageSize corresponding to the imageUrl returned ",
            "enum": [
              "FIXED_WIDTH_50px",
              "FIXED_WIDTH_250px",
              "FIXED_WIDTH_675px",
              "ZOOM_50_PERCENT",
              "ZOOM_75_PERCENT",
              "ZOOM_100_PERCENT",
              "ZOOM_125_PERCENT",
              "ZOOM_150_PERCENT",
              "ZOOM_200_PERCENT"
            ],
            "type": "string"
          },
          "imageURLs": {
            "description": "A list of image url (one per page).",
            "items": {
              "$ref": "#/components/schemas/PageImageUrl"
            },
            "type": "array"
          },
          "imagesAvailable": {
            "description": "true if images for the associated image size is available, else false.",
            "type": "boolean"
          }
        },
        "required": [
          "imageURLs"
        ],
        "type": "object"
      },
      "DocumentImageUrlsInfo": {
        "properties": {
          "documentId": {
            "description": "Id of the document",
            "type": "string"
          },
          "documentImageUrlsList": {
            "description": "A list of documents image URLs.",
            "items": {
              "$ref": "#/components/schemas/DocumentImageUrls"
            },
            "type": "array"
          }
        },
        "required": [
          "documentId",
          "documentImageUrlsList"
        ],
        "type": "object"
      },
      "DocumentPageInfo": {
        "properties": {
          "height": {
            "description": "Height of the page",
            "format": "double",
            "type": "number"
          },
          "index": {
            "description": "Index of the page in combined document starting from 1",
            "type": "integer"
          },
          "rotation": {
            "description": "Rotation angle of the page in clockwise direction in degree",
            "format": "double",
            "type": "number"
          },
          "width": {
            "description": "Width of the page",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "height",
          "index",
          "rotation",
          "width"
        ],
        "type": "object"
      },
      "DocumentUrl": {
        "properties": {
          "url": {
            "description": "Secure URL of the document",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "DocumentsImageUrlsInfo": {
        "properties": {
          "originalDocumentsImageUrlsInfo": {
            "description": "A list of original document image URLs info.",
            "items": {
              "$ref": "#/components/schemas/DocumentImageUrlsInfo"
            },
            "type": "array"
          },
          "supportingDocumentsImageUrlsInfo": {
            "description": "A list of supporting document image URLs info.",
            "items": {
              "$ref": "#/components/schemas/DocumentImageUrlsInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "originalDocumentsImageUrlsInfo"
        ],
        "type": "object"
      },
      "ElectronicSealInfo": {
        "properties": {
          "company": {
            "description": "Company name that placed the electronic seal",
            "type": "string"
          },
          "id": {
            "description": "unique identifier for the electronic seal",
            "type": "string"
          },
          "name": {
            "description": "the display name of the electronic seal",
            "type": "string"
          }
        },
        "required": [
          "company",
          "id",
          "name"
        ],
        "type": "object"
      },
      "EmailOption": {
        "properties": {
          "sendOptions": {
            "$ref": "#/components/schemas/SendOptions",
            "description": "Specify emails to be sent to different participants at different steps of the agreement process. Note: ALL means  emails for the events will be sent to all participants. NONE means emails for the events will not be sent to any participant",
            "items": {
              "$ref": "#/components/schemas/SendOptions"
            }
          }
        },
        "type": "object"
      },
      "ExternalId": {
        "properties": {
          "id": {
            "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Note: the externalId value is visible to all participants through the API, so should not be used to contain a sensitive token.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FetchedAgreementInfo": {
        "properties": {
          "agreementSettingsInfo": {
            "$ref": "#/components/schemas/AgreementSettingsInfo",
            "description": "Agreement Settings Info",
            "items": {
              "$ref": "#/components/schemas/AgreementSettingsInfo"
            }
          },
          "ccs": {
            "description": "A list of one or more CCs that will be copied in the agreement transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file. Should not be provided in offline agreement creation.",
            "items": {
              "$ref": "#/components/schemas/AgreementCcInfo"
            },
            "type": "array"
          },
          "createdDate": {
            "description": "Date when agreement was created. This is a server generated attributed and can not be provided in POST/PUT calls. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "deviceInfo": {
            "$ref": "#/components/schemas/OfflineDeviceInfo",
            "description": "Device info of the offline device. It should only be provided in case of offline agreement creation.",
            "items": {
              "$ref": "#/components/schemas/OfflineDeviceInfo"
            }
          },
          "documentRetentionAppliedDate": {
            "description": "Document retention applied date for this resource.  If provided in POST or PUT, it will simply be ignored.",
            "format": "date",
            "type": "string"
          },
          "documentVisibilityEnabled": {
            "description": "If set to true, enable limited document visibility. Should not be provided in offline agreement creation.",
            "type": "boolean"
          },
          "emailOption": {
            "$ref": "#/components/schemas/EmailOption",
            "description": "Email configurations for the agreement. Should not be provided in offline agreement creation or when updating a non draft agreement.",
            "items": {
              "$ref": "#/components/schemas/EmailOption"
            }
          },
          "expirationTime": {
            "description": "Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.",
            "format": "date",
            "type": "string"
          },
          "externalId": {
            "$ref": "#/components/schemas/ExternalId",
            "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Should not be provided in offline agreement creation. Note: the externalId value is visible to all participants through the API, so should not be used to contain a sensitive token.",
            "items": {
              "$ref": "#/components/schemas/ExternalId"
            }
          },
          "fileInfos": {
            "description": "A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "type": "array"
          },
          "firstReminderDelay": {
            "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Should not be provided in offline agreement creation.",
            "type": "integer"
          },
          "formFieldGenerators": {
            "description": "List of form field generators to produce form fields on the resulting agreement",
            "items": {
              "$ref": "#/components/schemas/FormFieldGenerator"
            },
            "type": "array"
          },
          "formFieldLayerTemplates": {
            "description": "Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "type": "array"
          },
          "groupId": {
            "description": "The unique identifier of the group to which the agreement belongs to. If not provided during agreement creation, primary group of the creator will be used",
            "type": "string"
          },
          "hasFormFieldData": {
            "description": "True if form field data is present.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "hasSignerIdentityReport": {
            "description": "True if agreement has signer identity report available.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the agreement.If provided in POST, it will simply be ignored",
            "type": "string"
          },
          "isDocumentRetentionApplied": {
            "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "lastEventDate": {
            "description": "The date of the last event that occurred for this agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "locale": {
            "description": "The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender",
            "type": "string"
          },
          "mergeFieldInfo": {
            "description": "Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process.",
            "items": {
              "$ref": "#/components/schemas/MergefieldInfo"
            },
            "type": "array"
          },
          "message": {
            "description": "An optional message to the participants, describing what is being sent or why their signature is required",
            "type": "string"
          },
          "name": {
            "description": "The name of the agreement that will be used to identify it, in emails, website and other places",
            "type": "string"
          },
          "notaryInfo": {
            "$ref": "#/components/schemas/NotaryInfo",
            "description": "Notary information",
            "items": {
              "$ref": "#/components/schemas/NotaryInfo"
            }
          },
          "parentId": {
            "description": "The parent id of a bulk send child *OR* the originating id of a web form agreement instance",
            "type": "string"
          },
          "participantSetsInfo": {
            "description": "A list of one or more participant set. A participant set may have one or more participant. If any member of the participant set takes the action that has been assigned to the set(Sign/Approve/Acknowledge etc), the action is considered as the action taken by whole participation set. For regular (non-Send in Bulk) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document",
            "items": {
              "$ref": "#/components/schemas/ParticipantSetInfo"
            },
            "type": "array"
          },
          "postSignOption": {
            "$ref": "#/components/schemas/PostSignOption",
            "description": "URL and associated properties for the success page the user will be taken to after completing the signing process. Should not be provided in offline agreement creation.",
            "items": {
              "$ref": "#/components/schemas/PostSignOption"
            }
          },
          "reminderFrequency": {
            "description": "Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation. If provided in PUT as a different value than the current one, an error will be thrown.",
            "enum": [
              "DAILY_UNTIL_SIGNED",
              "WEEKDAILY_UNTIL_SIGNED",
              "EVERY_OTHER_DAY_UNTIL_SIGNED",
              "EVERY_THIRD_DAY_UNTIL_SIGNED",
              "EVERY_FIFTH_DAY_UNTIL_SIGNED",
              "WEEKLY_UNTIL_SIGNED",
              "ONCE"
            ],
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/SecurityOption",
            "description": "Optional secondary security parameters for the agreement. Should not be provided in offline agreement creation.",
            "items": {
              "$ref": "#/components/schemas/SecurityOption"
            }
          },
          "sendType": {
            "description": "Indicates the experience being used by the originator to send an agreement. <br>FILL_SIGN: originator is using Fill and Sign experience <br>SELF_SIGN: originator is using Self Signing experience <br>REGULAR_SEND: originator is using regular Send experience",
            "enum": [
              "FILL_SIGN",
              "SELF_SIGN",
              "REGULAR_SEND"
            ],
            "type": "string"
          },
          "senderEmail": {
            "description": "Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored",
            "type": "string"
          },
          "signatureType": {
            "description": "Specifies the type of signature you would like to request - written or e-signature. The possible values are <br> ESIGN : Agreement needs to be signed electronically <br>,\nWRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system",
            "enum": [
              "ESIGN",
              "WRITTEN"
            ],
            "type": "string"
          },
          "state": {
            "description": "The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID",
            "enum": [
              "AUTHORING",
              "DRAFT",
              "IN_PROCESS",
              "RESTART"
            ],
            "type": "string"
          },
          "status": {
            "description": "This is a server generated attribute which provides the detailed status of an agreement.",
            "enum": [
              "OUT_FOR_SIGNATURE",
              "OUT_FOR_DELIVERY",
              "OUT_FOR_ACCEPTANCE",
              "OUT_FOR_FORM_FILLING",
              "OUT_FOR_APPROVAL",
              "AUTHORING",
              "CANCELLED",
              "SIGNED",
              "APPROVED",
              "DELIVERED",
              "ACCEPTED",
              "FORM_FILLED",
              "EXPIRED",
              "ARCHIVED",
              "PREFILL",
              "WIDGET_WAITING_FOR_VERIFICATION",
              "DRAFT",
              "DOCUMENTS_NOT_YET_PROCESSED",
              "WAITING_FOR_FAXIN",
              "WAITING_FOR_VERIFICATION",
              "WAITING_FOR_NOTARIZATION"
            ],
            "type": "string"
          },
          "type": {
            "description": "The kind of agreement",
            "enum": [
              "AGREEMENT",
              "MEGASIGN_CHILD",
              "WIDGET_INSTANCE"
            ],
            "type": "string"
          },
          "vaultingInfo": {
            "$ref": "#/components/schemas/VaultingInfo",
            "description": "Vaulting properties that allows Acrobat Sign to securely store documents with a vault provider",
            "items": {
              "$ref": "#/components/schemas/VaultingInfo"
            }
          },
          "workflowId": {
            "description": "The identifier of custom workflow which defines the routing path of an agreement. Should not be provided in offline agreement creation.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "participantSetsInfo",
          "signatureType",
          "status"
        ],
        "type": "object"
      },
      "FileInfo": {
        "properties": {
          "document": {
            "$ref": "#/components/schemas/Document",
            "description": "A document that is associated with the agreement. This field cannot be provided in POST call. In case of GET call, this is the only field returned in the response",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "label": {
            "description": "The unique label value of a file info element. In case of custom workflow this will map a file to corresponding file element in workflow definition. This must be specified in case of custom workflow agreement creation request ",
            "type": "string"
          },
          "libraryDocumentId": {
            "description": "ID for an existing Library document that will be added to the agreement",
            "type": "string"
          },
          "notarize": {
            "description": "Indicates that this document needs to be notarized",
            "type": "boolean"
          },
          "transientDocumentId": {
            "description": "ID for a transient document that will be added to the agreement",
            "type": "string"
          },
          "urlFileInfo": {
            "$ref": "#/components/schemas/URLFileInfo",
            "description": "URL for an external document to add to the agreement",
            "items": {
              "$ref": "#/components/schemas/URLFileInfo"
            }
          }
        },
        "type": "object"
      },
      "FileUploadOptions": {
        "properties": {
          "canEditFiles": {
            "description": "Whether the file upload section can be edited by adding or removing files. Default value is taken as true. Changing the default value will alter the compose page view configuration for this agreement, but is not an access control mechanism",
            "type": "boolean"
          },
          "libraryDocument": {
            "description": "Whether library documents link should appear or not. Default value is taken as true",
            "type": "boolean"
          },
          "localFile": {
            "description": "Whether local file upload button should appear or not. Default value is taken as true",
            "type": "boolean"
          },
          "webConnectors": {
            "description": "Whether link to attach documents from web sources like Dropbox should appear or not. Default value is taken as true",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "FormField": {
        "description": "A form field for an agreement.",
        "properties": {
          "alignment": {
            "description": "Alignment of the text.",
            "enum": [
              "LEFT",
              "RIGHT",
              "CENTER"
            ],
            "type": "string"
          },
          "assignee": {
            "description": "Who the field is assigned to. Valid values are a participant set id, null, \"NOBODY\", \"PREFILL\" or \"EVERYONE\". If set to a participant set id, then any member of that participant set may fill out the field. \"NOBODY\" indicates that the field may not be filled by anybody (e.g. autopopulated fields like transaction number). \"PREFILL\" indicates that the field will be filled by the sender before the agreement is sent out for signing. \"EVERYONE\" exists only in hyperlink fields currently and indicates that it is assigned to all participants. null indicates that anybody may fill out the field. If the propeerty isn't specified, it is treated as null.",
            "type": "string"
          },
          "backgroundColor": {
            "description": "Background color of the form field in RGB or HEX format",
            "type": "string"
          },
          "borderColor": {
            "description": "Color of the border of the field in RGB or HEX format",
            "type": "string"
          },
          "borderStyle": {
            "description": "Style of the border of the field.",
            "enum": [
              "SOLID",
              "DASHED",
              "BEVELED",
              "INSET",
              "UNDERLINE"
            ],
            "type": "string"
          },
          "borderWidth": {
            "description": "Width of the border of the field in default user space units",
            "format": "double",
            "type": "number"
          },
          "calculated": {
            "description": "true if this field's value is calculated from an expression, else false",
            "type": "boolean"
          },
          "conditionalAction": {
            "$ref": "#/components/schemas/FormFieldConditionalAction",
            "description": "A predicate (or set of predicates) that determines whether this field is visible and enabled.",
            "items": {
              "$ref": "#/components/schemas/FormFieldConditionalAction"
            }
          },
          "contentType": {
            "description": "Content Type of the form field.",
            "enum": [
              "DATA",
              "SIGNATURE_BLOCK",
              "SIGNATURE",
              "SIGNER_NAME",
              "SIGNER_FIRST_NAME",
              "SIGNER_LAST_NAME",
              "SIGNER_INITIALS",
              "SIGNER_EMAIL",
              "SIGNER_TITLE",
              "SIGNER_COMPANY",
              "SIGNATURE_DATE",
              "AGREEMENT_NAME",
              "AGREEMENT_MESSAGE",
              "TRANSACTION_ID",
              "SIGNATURE_STAMP",
              "PAYMENT",
              "DIGITAL_SIGNATURE",
              "CALC"
            ],
            "type": "string"
          },
          "currency": {
            "description": "A currency ISO code. Only applicable for payment form fields. Should be one of the currencies supported in the payment integration merchant accounts.",
            "type": "string"
          },
          "defaultValue": {
            "description": "Default value of the form field",
            "type": "string"
          },
          "displayFormat": {
            "description": "Format of the value of the field to be displayed based on the displayFormatType property.",
            "type": "string"
          },
          "displayFormatType": {
            "description": "Format type of the text field.",
            "enum": [
              "DEFAULT",
              "DATE",
              "NUMBER"
            ],
            "type": "string"
          },
          "displayLabel": {
            "description": "Display label attached to the field",
            "type": "string"
          },
          "fontColor": {
            "description": "Font color of the form field in RGB or HEX format",
            "type": "string"
          },
          "fontName": {
            "description": "Font name of the form field",
            "type": "string"
          },
          "fontSize": {
            "description": "Font size of the form field in points",
            "format": "double",
            "type": "number"
          },
          "hiddenOptions": {
            "description": "Text values which are hidden in a drop down form field",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hyperlink": {
            "$ref": "#/components/schemas/FormFieldHyperlink",
            "description": "Hyperlink-specific data (e.g. as url, link type)",
            "items": {
              "$ref": "#/components/schemas/FormFieldHyperlink"
            }
          },
          "inputType": {
            "description": "Input type of the form field",
            "enum": [
              "TEXT_FIELD",
              "MULTILINE",
              "PASSWORD",
              "RADIO",
              "CHECKBOX",
              "DROP_DOWN",
              "LISTBOX",
              "SIGNATURE",
              "PDF_SIGNATURE",
              "BUTTON",
              "BLOCK",
              "FILE_CHOOSER",
              "COMB",
              "INLINE_IMAGE",
              "UNSUPPORTED"
            ],
            "type": "string"
          },
          "locations": {
            "description": "All locations in a document where the form field is placed",
            "items": {
              "$ref": "#/components/schemas/FormFieldLocation"
            },
            "type": "array"
          },
          "masked": {
            "description": "true if the input entered by the signer has to be masked (like password), false if it shouldn't be",
            "type": "boolean"
          },
          "maskingText": {
            "description": "Text to mask the masked form field",
            "type": "string"
          },
          "maxLength": {
            "description": "Maximum length of the input text field in terms of no. of characters",
            "type": "integer"
          },
          "maxValue": {
            "description": "Upper bound of the number that can be entered by the signer",
            "format": "double",
            "type": "number"
          },
          "minLength": {
            "description": "Minimum length of the input text field in terms of no. of characters",
            "type": "integer"
          },
          "minValue": {
            "description": "Lower bound of the number that can be entered by the signer",
            "format": "double",
            "type": "number"
          },
          "name": {
            "description": "The name of the form field",
            "type": "string"
          },
          "origin": {
            "description": "Origin of Form Field",
            "enum": [
              "AUTHORED",
              "GENERATED",
              "IMPORTED"
            ],
            "type": "string"
          },
          "radioCheckType": {
            "description": "The type of radio button (if field is radio button, identified by inputType).",
            "enum": [
              "CIRCLE",
              "CHECK",
              "CROSS",
              "DIAMOND",
              "SQUARE",
              "STAR"
            ],
            "type": "string"
          },
          "readOnly": {
            "description": "true if it is a read-only field, else false",
            "type": "boolean"
          },
          "required": {
            "description": "true if it is a mandatory field to be filled by the signer, else false",
            "type": "boolean"
          },
          "tooltip": {
            "description": "Tooltip text for the form field",
            "type": "string"
          },
          "urlOverridable": {
            "description": "For web form text fields only - true if the default value may come from the URL, else false",
            "type": "boolean"
          },
          "validation": {
            "description": "Rule for validating the field value.",
            "enum": [
              "NONE",
              "STRING",
              "NUMBER",
              "DATE",
              "DATE_CUSTOM",
              "TIME",
              "ZIP",
              "PHONE",
              "SOCIAL_SEC",
              "EMAIL",
              "CURRENCY",
              "PERCENT",
              "FORMULA",
              "CUSTOM",
              "XFA_PICTURE"
            ],
            "type": "string"
          },
          "validationData": {
            "description": "Further data for validating input with regards to the field's specified format. The contents and interpretation of formatData depends on the value of validation.",
            "type": "string"
          },
          "validationErrMsg": {
            "description": "Error message to be shown to the signer if filled value doesn't match the validations of the form field",
            "type": "string"
          },
          "valueExpression": {
            "description": "Expression to calculate value of the form field",
            "type": "string"
          },
          "visible": {
            "description": "If set to false, then the form field is hidden.  Otherwise, it is visible.",
            "type": "boolean"
          },
          "visibleOptions": {
            "description": "Text values which are visible in a drop down form field",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "locations",
          "name"
        ],
        "type": "object"
      },
      "FormFieldConditionPredicate": {
        "description": "A predicate used to determine whether the condtion succeeds",
        "properties": {
          "fieldLocationIndex": {
            "description": "Index of the location of the form field used in the predicate",
            "type": "integer"
          },
          "fieldName": {
            "description": "Name of the field whose value is the basis of predicate",
            "type": "string"
          },
          "operator": {
            "description": "Operator to be applied on the value of the predicate field.",
            "enum": [
              "EQUALS",
              "NOT_EQUALS",
              "LESS_THAN",
              "LESS_THAN_EQUALS",
              "GREATER_THAN",
              "GREATER_THAN_EQUALS",
              "IN",
              "NOT_IN",
              "CONTAINS",
              "NOT_CONTAINS"
            ],
            "type": "string"
          },
          "value": {
            "description": "Value to compare against the value of the predicate's form field, using the specified operator",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormFieldConditionalAction": {
        "description": "Conditional actions to perfom on this form field.",
        "properties": {
          "action": {
            "description": "Action to show/hide the form field is to be taken on the basis of evaluation of conditions.",
            "enum": [
              "SHOW",
              "HIDE",
              "DISABLE",
              "ENABLE"
            ],
            "type": "string"
          },
          "anyOrAll": {
            "description": "It indicates if any one of the conditions or all of them have to be true.",
            "enum": [
              "ALL",
              "ANY"
            ],
            "type": "string"
          },
          "predicates": {
            "description": "The predicates to be evaluated in order to determine whether this condition is true",
            "items": {
              "$ref": "#/components/schemas/FormFieldConditionPredicate"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FormFieldDescription": {
        "description": "The descriptive attributes of a form field.",
        "properties": {
          "alignment": {
            "description": "Alignment of the text.",
            "enum": [
              "LEFT",
              "RIGHT",
              "CENTER"
            ],
            "type": "string"
          },
          "backgroundColor": {
            "description": "Background color of the form field in RGB or HEX format",
            "type": "string"
          },
          "borderColor": {
            "description": "Color of the border of the field in RGB or HEX format",
            "type": "string"
          },
          "borderStyle": {
            "description": "Style of the border of the field.",
            "enum": [
              "SOLID",
              "DASHED",
              "BEVELED",
              "INSET",
              "UNDERLINE"
            ],
            "type": "string"
          },
          "borderWidth": {
            "description": "Width of the border of the field in default user space units",
            "format": "double",
            "type": "number"
          },
          "calculated": {
            "description": "true if this field's value is calculated from an expression, else false",
            "type": "boolean"
          },
          "conditionalAction": {
            "$ref": "#/components/schemas/FormFieldConditionalAction",
            "description": "A predicate (or set of predicates) that determines whether this field is visible and enabled.",
            "items": {
              "$ref": "#/components/schemas/FormFieldConditionalAction"
            }
          },
          "contentType": {
            "description": "Content Type of the form field.",
            "enum": [
              "DATA",
              "SIGNATURE_BLOCK",
              "SIGNATURE",
              "SIGNER_NAME",
              "SIGNER_FIRST_NAME",
              "SIGNER_LAST_NAME",
              "SIGNER_INITIALS",
              "SIGNER_EMAIL",
              "SIGNER_TITLE",
              "SIGNER_COMPANY",
              "SIGNATURE_DATE",
              "AGREEMENT_NAME",
              "AGREEMENT_MESSAGE",
              "TRANSACTION_ID",
              "SIGNATURE_STAMP",
              "PAYMENT",
              "DIGITAL_SIGNATURE",
              "CALC"
            ],
            "type": "string"
          },
          "currency": {
            "description": "A currency ISO code. Only applicable for payment form fields. Should be one of the currencies supported in the payment integration merchant accounts.",
            "type": "string"
          },
          "defaultValue": {
            "description": "Default value of the form field",
            "type": "string"
          },
          "displayFormat": {
            "description": "Format of the value of the field to be displayed based on the displayFormatType property.",
            "type": "string"
          },
          "displayFormatType": {
            "description": "Format type of the text field.",
            "enum": [
              "DEFAULT",
              "DATE",
              "NUMBER"
            ],
            "type": "string"
          },
          "displayLabel": {
            "description": "Display label attached to the field",
            "type": "string"
          },
          "fontColor": {
            "description": "Font color of the form field in RGB or HEX format",
            "type": "string"
          },
          "fontName": {
            "description": "Font name of the form field",
            "type": "string"
          },
          "fontSize": {
            "description": "Font size of the form field in points",
            "format": "double",
            "type": "number"
          },
          "hiddenOptions": {
            "description": "Text values which are hidden in a drop down form field",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hyperlink": {
            "$ref": "#/components/schemas/FormFieldHyperlink",
            "description": "Hyperlink-specific data (e.g. as url, link type)",
            "items": {
              "$ref": "#/components/schemas/FormFieldHyperlink"
            }
          },
          "inputType": {
            "description": "Input type of the form field",
            "enum": [
              "TEXT_FIELD",
              "MULTILINE",
              "PASSWORD",
              "RADIO",
              "CHECKBOX",
              "DROP_DOWN",
              "LISTBOX",
              "SIGNATURE",
              "PDF_SIGNATURE",
              "BUTTON",
              "BLOCK",
              "FILE_CHOOSER",
              "COMB",
              "INLINE_IMAGE",
              "UNSUPPORTED"
            ],
            "type": "string"
          },
          "masked": {
            "description": "true if the input entered by the signer has to be masked (like password), false if it shouldn't be",
            "type": "boolean"
          },
          "maskingText": {
            "description": "Text to mask the masked form field",
            "type": "string"
          },
          "maxLength": {
            "description": "Maximum length of the input text field in terms of no. of characters",
            "type": "integer"
          },
          "maxValue": {
            "description": "Upper bound of the number that can be entered by the signer",
            "format": "double",
            "type": "number"
          },
          "minLength": {
            "description": "Minimum length of the input text field in terms of no. of characters",
            "type": "integer"
          },
          "minValue": {
            "description": "Lower bound of the number that can be entered by the signer",
            "format": "double",
            "type": "number"
          },
          "origin": {
            "description": "Origin of Form Field",
            "enum": [
              "AUTHORED",
              "GENERATED",
              "IMPORTED"
            ],
            "type": "string"
          },
          "radioCheckType": {
            "description": "The type of radio button (if field is radio button, identified by inputType).",
            "enum": [
              "CIRCLE",
              "CHECK",
              "CROSS",
              "DIAMOND",
              "SQUARE",
              "STAR"
            ],
            "type": "string"
          },
          "readOnly": {
            "description": "true if it is a read-only field, else false",
            "type": "boolean"
          },
          "required": {
            "description": "true if it is a mandatory field to be filled by the signer, else false",
            "type": "boolean"
          },
          "tooltip": {
            "description": "Tooltip text for the form field",
            "type": "string"
          },
          "urlOverridable": {
            "description": "For web form text fields only - true if the default value may come from the URL, else false",
            "type": "boolean"
          },
          "validation": {
            "description": "Rule for validating the field value.",
            "enum": [
              "NONE",
              "STRING",
              "NUMBER",
              "DATE",
              "DATE_CUSTOM",
              "TIME",
              "ZIP",
              "PHONE",
              "SOCIAL_SEC",
              "EMAIL",
              "CURRENCY",
              "PERCENT",
              "FORMULA",
              "CUSTOM",
              "XFA_PICTURE"
            ],
            "type": "string"
          },
          "validationData": {
            "description": "Further data for validating input with regards to the field's specified format. The contents and interpretation of formatData depends on the value of validation.",
            "type": "string"
          },
          "validationErrMsg": {
            "description": "Error message to be shown to the signer if filled value doesn't match the validations of the form field",
            "type": "string"
          },
          "valueExpression": {
            "description": "Expression to calculate value of the form field",
            "type": "string"
          },
          "visible": {
            "description": "If set to false, then the form field is hidden.  Otherwise, it is visible.",
            "type": "boolean"
          },
          "visibleOptions": {
            "description": "Text values which are visible in a drop down form field",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FormFieldGenerator": {
        "description": "Form Field Generator providing information for generating form fields relative to text in the content of the agreement documents",
        "properties": {
          "anchorTextInfo": {
            "$ref": "#/components/schemas/AnchorTextInfo",
            "description": "Anchored text and associated information used to generate form fields relative to",
            "items": {
              "$ref": "#/components/schemas/AnchorTextInfo"
            }
          },
          "formFieldDescription": {
            "$ref": "#/components/schemas/FormFieldDescription",
            "description": "The description of the form field to generate",
            "items": {
              "$ref": "#/components/schemas/FormFieldDescription"
            }
          },
          "formFieldNamePrefix": {
            "description": "The prefix name of each generated form field",
            "type": "string"
          },
          "generatorType": {
            "description": "The type of form field generator, default ANCHOR_TEXT",
            "enum": [
              "ANCHOR_TEXT"
            ],
            "type": "string"
          },
          "linked": {
            "description": "By default duplicate generated form fields will be linked as references unless linked is false in which case unique form fields will be created",
            "type": "boolean"
          },
          "participantSetName": {
            "description": "The name of the participant set to assign the generated form field with",
            "type": "string"
          }
        },
        "required": [
          "formFieldDescription",
          "formFieldNamePrefix",
          "generatorType",
          "participantSetName"
        ],
        "type": "object"
      },
      "FormFieldHyperlink": {
        "description": "Hyperlink-specific data for hyperlink form fields",
        "properties": {
          "documentLocation": {
            "$ref": "#/components/schemas/FormFieldLocation",
            "description": "Location on the document pointed by the link in case of INTERNAL type link",
            "items": {
              "$ref": "#/components/schemas/FormFieldLocation"
            }
          },
          "linkType": {
            "description": "Type of link in an agreement.",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "FROM_TEXT"
            ],
            "type": "string"
          },
          "url": {
            "description": "URL, in case of EXTERNAL type link",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormFieldLocation": {
        "description": "Location information for form fields",
        "properties": {
          "height": {
            "description": "Height of the form field in default user space units",
            "format": "double",
            "type": "number"
          },
          "left": {
            "description": "No. of default user space units from left of the page for form field placement",
            "format": "double",
            "type": "number"
          },
          "pageNumber": {
            "description": "Number of the page where form field has to be placed, starting from 1.",
            "type": "integer"
          },
          "top": {
            "description": "No. of default user space units from bottom of the page for form field placement",
            "format": "double",
            "type": "number"
          },
          "width": {
            "description": "Width of the form field in default user space units",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "height",
          "left",
          "pageNumber",
          "top",
          "width"
        ],
        "type": "object"
      },
      "FormFieldMergeInfo": {
        "description": "Data for updating the default values of existing form fields",
        "properties": {
          "fieldMergeInfos": {
            "description": "A mapping of field names to default values",
            "items": {
              "$ref": "#/components/schemas/MergefieldInfo"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FormFieldPostInfo": {
        "description": "Information required to add or update agreement form fields",
        "properties": {
          "templateId": {
            "description": "The ID of the template from which to add new fields",
            "type": "string"
          }
        },
        "required": [
          "templateId"
        ],
        "type": "object"
      },
      "FormFieldPutInfo": {
        "description": "Information required to add or replace agreement form fields",
        "properties": {
          "fields": {
            "description": "The list of fields to update or replace.",
            "items": {
              "$ref": "#/components/schemas/FormField"
            },
            "type": "array"
          }
        },
        "required": [
          "fields"
        ],
        "type": "object"
      },
      "MembersInfo": {
        "properties": {
          "ccsInfo": {
            "description": "Information of CC participants of the agreement.",
            "items": {
              "$ref": "#/components/schemas/CCParticipantInfo"
            },
            "type": "array"
          },
          "nextParticipantSets": {
            "description": "Information of next participant sets.",
            "items": {
              "$ref": "#/components/schemas/DetailedParticipantSetInfo"
            },
            "type": "array"
          },
          "participantSets": {
            "description": "Information about the participant Sets.",
            "items": {
              "$ref": "#/components/schemas/DetailedParticipantSetInfo"
            },
            "type": "array"
          },
          "senderInfo": {
            "$ref": "#/components/schemas/SenderInfo",
            "description": "Information of the sender of the agreement.",
            "items": {
              "$ref": "#/components/schemas/SenderInfo"
            }
          },
          "sharesInfo": {
            "description": "Information of the participants with whom the agreement has been shared.",
            "items": {
              "$ref": "#/components/schemas/ShareParticipantInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "ccsInfo",
          "nextParticipantSets",
          "participantSets",
          "senderInfo",
          "sharesInfo"
        ],
        "type": "object"
      },
      "MergefieldInfo": {
        "properties": {
          "defaultValue": {
            "description": "The default value of the field",
            "type": "string"
          },
          "fieldName": {
            "description": "The name of the field",
            "type": "string"
          }
        },
        "required": [
          "defaultValue",
          "fieldName"
        ],
        "type": "object"
      },
      "MyAgreementInfo": {
        "properties": {
          "accountSharers": {
            "description": "A list of account sharer in relation to the api caller and this resource.",
            "items": {
              "$ref": "#/components/schemas/AccountSharerInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "accountSharers"
        ],
        "type": "object"
      },
      "NameInfo": {
        "properties": {
          "firstName": {
            "description": "Recipient's first name",
            "type": "string"
          },
          "lastName": {
            "description": "Recipient's last name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NewSenderInfo": {
        "description": "Information of the new sender of the agreement.",
        "properties": {
          "senderId": {
            "description": "The unique identifier of the new sender.",
            "type": "string"
          }
        },
        "required": [
          "senderId"
        ],
        "type": "object"
      },
      "NotaryInfo": {
        "description": "Additional information for agreements that require notarization",
        "properties": {
          "appointment": {
            "description": "A proposed appointment time specified using the yyyy-MM-dd'T'HH:mm:ssZ format.",
            "type": "string"
          },
          "notaryEmail": {
            "description": "Email address of provided notary when the notaryType is BYON_NOTARY",
            "type": "string"
          },
          "notaryType": {
            "description": "PROVIDER_NOTARY: Notary is provided by the notary provider\nBYON_NOTARY: In house Notary is provided by the customer",
            "enum": [
              "PROVIDER_NOTARY",
              "BYON_NOTARY"
            ],
            "type": "string"
          },
          "note": {
            "description": "Notes for the notary session.",
            "type": "string"
          },
          "payment": {
            "description": "BY_SENDER: When the notarization provider provides the notary and the notary fee will be paid by the sender\nBY_SIGNER: When the notarization provider provides the notary and the notary fee will be paid by the signer",
            "enum": [
              "BY_SENDER",
              "BY_SIGNER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Note": {
        "properties": {
          "note": {
            "description": "Content of Note field",
            "type": "string"
          }
        },
        "required": [
          "note"
        ],
        "type": "object"
      },
      "OfflineDeviceInfo": {
        "properties": {
          "applicationDescription": {
            "description": "Application Description",
            "type": "string"
          },
          "deviceDescription": {
            "description": "Device Description",
            "type": "string"
          },
          "deviceTime": {
            "description": "The device local time. The device time provided should not be before 30 days of current date.Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time, while 2016-02-25T13:46:19-05:00 represents the same time in EST",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "applicationDescription",
          "deviceDescription"
        ],
        "type": "object"
      },
      "PageImageUrl": {
        "properties": {
          "pageNumber": {
            "description": "Page number within the document.",
            "type": "integer"
          },
          "url": {
            "description": "An image url.",
            "type": "string"
          }
        },
        "required": [
          "pageNumber",
          "url"
        ],
        "type": "object"
      },
      "PageInfo": {
        "properties": {
          "nextCursor": {
            "description": "Used to navigate to the next page. If not returned, there are no further pages.",
            "type": "string"
          }
        },
        "required": [
          "nextCursor"
        ],
        "type": "object"
      },
      "ParticipantSecurityOption": {
        "properties": {
          "authenticationMethod": {
            "description": "The authentication method for the participants to have access to view and sign the document. When replacing a participant that has PASSWORD or PHONE authentication specified, you must supply a password or phone number for the new participant, and you cannot change the authentication method",
            "enum": [
              "NONE",
              "PASSWORD",
              "PHONE",
              "KBA",
              "WEB_IDENTITY",
              "ADOBE_SIGN",
              "GOV_ID",
              "DIG_ID"
            ],
            "type": "string"
          },
          "digAuthInfo": {
            "$ref": "#/components/schemas/DigAuthInfo",
            "description": "Digital Identity Gateway Provider information.",
            "items": {
              "$ref": "#/components/schemas/DigAuthInfo"
            }
          },
          "nameInfo": {
            "$ref": "#/components/schemas/NameInfo",
            "description": "Recipient's full name",
            "items": {
              "$ref": "#/components/schemas/NameInfo"
            }
          },
          "notaryAuthentication": {
            "description": "The authentication method of the notary participant to the notary",
            "enum": [
              "MULTI_FACTOR_AUTHENTICATION",
              "NONE"
            ],
            "type": "string"
          },
          "password": {
            "description": "The password required for the participant to view and sign the document. Note that Acrobat Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. The password will not be returned in GET call. When replacing a participant that has PASSWORD authentication specified, you must supply a password for the new participant.",
            "type": "string"
          },
          "phoneInfo": {
            "$ref": "#/components/schemas/PhoneInfo",
            "description": "The phoneInfo required for the participant to view and sign the document",
            "items": {
              "$ref": "#/components/schemas/PhoneInfo"
            }
          }
        },
        "required": [
          "authenticationMethod"
        ],
        "type": "object"
      },
      "ParticipantSetInfo": {
        "properties": {
          "electronicSealId": {
            "description": "ID of the sealing credential, which can be obtained through <b>GET /autoseals</b> call.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the participant. This will be ignored as part of POST or PUT calls. The Id might be null in draft state",
            "type": "string"
          },
          "label": {
            "description": "The unique label of a participant set.<br>For custom workflows, label specified in the participation set should map it to the participation step in the custom workflow.",
            "type": "string"
          },
          "memberInfos": {
            "description": "Array of ParticipantInfo objects, containing participant-specific data (e.g. email). All participants in the array belong to the same set. Required, unless ParticipantSet has the ELECTRONIC_SEALER role",
            "items": {
              "$ref": "#/components/schemas/ParticipantSetMemberInfo"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the participant set (it can be empty, but if present it must be unique within a single agreement). Maximum no of characters in participant set name is restricted to 255",
            "type": "string"
          },
          "order": {
            "description": "Index indicating position at which signing group needs to sign. Signing group to sign at first place is assigned a 1 index. Different signingOrder specified in input should form a valid consecutive increasing sequence of integers. Otherwise signingOrder will be considered invalid.",
            "type": "integer"
          },
          "privateMessage": {
            "description": "Participant set's private message - all participants in the set will receive the same message",
            "type": "string"
          },
          "role": {
            "description": "Role assumed by all participants in the set (signer, approver etc.)",
            "enum": [
              "SIGNER",
              "APPROVER",
              "ACCEPTOR",
              "CERTIFIED_RECIPIENT",
              "FORM_FILLER",
              "DELEGATE_TO_SIGNER",
              "DELEGATE_TO_APPROVER",
              "DELEGATE_TO_ACCEPTOR",
              "DELEGATE_TO_CERTIFIED_RECIPIENT",
              "DELEGATE_TO_FORM_FILLER",
              "NOTARY_SIGNER",
              "ELECTRONIC_SEALER"
            ],
            "type": "string"
          },
          "visiblePages": {
            "description": "When you enable limited document visibility (documentVisibilityEnabled), you can specify which file (fileInfo) should be made visible to which specific participant set.<br>Specify one or more label values of a fileInfos element.<br>Each signer participant sets must contain at least one required signature field in at least one visible file included in this API call; if not a page with a signature field is automatically appended for any missing participant sets. If there is a possibility that one or more participant sets do not have a required signature field in the files included in the API call, all signer participant sets should include a special index value of '0' to make this automatically appended signature page visible to the signer. Not doing so may result in an error. For all other roles, you may omit this value to exclude this page.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "order",
          "role"
        ],
        "type": "object"
      },
      "ParticipantSetMemberInfo": {
        "properties": {
          "email": {
            "description": "Email of the participant. In case of creating new Agreements(POST/PUT), this is a required field.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the participant. This will be ignored as part of POST or PUT calls. The Id might be null in draft state",
            "type": "string"
          },
          "name": {
            "description": "Recipient's full name",
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/ParticipantSecurityOption",
            "description": "Security options that apply to the participant",
            "items": {
              "$ref": "#/components/schemas/ParticipantSecurityOption"
            }
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "PhoneInfo": {
        "properties": {
          "countryCode": {
            "description": "The numeric country calling code (ISD code) required for the participant to view and sign the document if authentication type is PHONE",
            "type": "string"
          },
          "countryIsoCode": {
            "description": "The country ISO Alpha-2 code required for the participant to view and sign the document if authentication method is PHONE",
            "type": "string"
          },
          "phone": {
            "description": "The phone number required for the participant to view and sign the document if authentication method is PHONE. When replacing a participant that has PHONE authentication specified, you must supply a phone number for the new participant.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostSendOption": {
        "properties": {
          "redirectUrl": {
            "description": "URL to redirect to after completion of the SEND flow. Specified URL must be part of the allow list for application redirects, configured by a CSR Admin",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostSignOption": {
        "properties": {
          "redirectDelay": {
            "description": "The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Acrobat Sign success message, and then after a delay will be redirected to your success page",
            "type": "integer"
          },
          "redirectUrl": {
            "description": "A publicly accessible url to which the user will be sent after successfully completing the signing process",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReminderCreationResult": {
        "properties": {
          "id": {
            "description": "An identifier of the reminder resource created on the server. If provided in POST or PUT, it will be ignored",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReminderInfo": {
        "properties": {
          "firstReminderDelay": {
            "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Cannot be updated in a PUT",
            "type": "integer"
          },
          "frequency": {
            "description": "The frequency at which reminder will be sent until the agreement is completed.<br>If frequency is not provided, the reminder will be sent once (if the agreement is available at the specified time) with the delay based on the firstReminderDelay field and will never repeat again. If the agreement is not available at that time, reminder will not be sent. Cannot be updated in a PUT",
            "enum": [
              "DAILY_UNTIL_SIGNED",
              "WEEKDAILY_UNTIL_SIGNED",
              "EVERY_OTHER_DAY_UNTIL_SIGNED",
              "EVERY_THIRD_DAY_UNTIL_SIGNED",
              "EVERY_FIFTH_DAY_UNTIL_SIGNED",
              "WEEKLY_UNTIL_SIGNED",
              "ONCE"
            ],
            "type": "string"
          },
          "lastSentDate": {
            "description": "The date when the reminder was last sent. Only provided in GET. Cannot be provided in POST request. If provided in POST, it will be ignored. Cannot be updated in a PUT. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "nextSentDate": {
            "description": "The date when the reminder is scheduled to be sent next. When provided in POST request, frequency needs to be ONCE (or not specified), startReminderCounterFrom needs to be REMINDER_CREATION (or not specified) and firstReminderDelay needs to be 0 (or not specified). Cannot be updated in a PUT. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "note": {
            "description": "An optional message sent to the recipients, describing why their participation is required",
            "type": "string"
          },
          "recipientParticipantIds": {
            "description": "A list of one or more participant IDs that the reminder should be sent to. These must be recipients of the agreement and not sharees or cc's.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "reminderId": {
            "description": "An identifier of the reminder resource created on the server. If provided in POST or PUT, it will be ignored",
            "type": "string"
          },
          "startReminderCounterFrom": {
            "description": "Reminder can be sent based on when the agreement becomes available or when the reminder is created<br>AGREEMENT_AVAILABILITY: If the agreement is not available to the participant at the time of reminder creation, the reminder will be sent for the first time, only when the agreement becomes available to the participant taking the firstReminderDelay into account. Subsequent reminders will be sent based on the frequency specified.  If the agreement is already available to the participant at the time of reminder creation, the first reminder will be sent after the delay specified by firstReminderDelay from the reminder creation time.<br>REMINDER_CREATION: The first reminder will be sent after the delay specified by firstReminderDelay from the reminder creation time only if the agreement is available at that time. Subsequent reminders will be triggered based on the frequency specified and will be sent only if the agreement is available at that time.  For agreements in authoring state, creating reminder with startReminderCounterFrom as REMINDER_CREATION is not allowed.<br>Note : If firstReminderDelay, frequency and startReminderCounterFrom fields are not specified in POST, reminder will be sent right now if the agreement is available. If agreement is not available, an error will be thrown.  Cannot be updated in a PUT",
            "enum": [
              "AGREEMENT_AVAILABILITY",
              "REMINDER_CREATION"
            ],
            "type": "string"
          },
          "status": {
            "description": "Current status of the reminder.  The only valid update in a PUT is from ACTIVE to CANCELED.  Must be provided as ACTIVE in a POST.",
            "enum": [
              "ACTIVE",
              "CANCELED",
              "COMPLETE"
            ],
            "type": "string"
          }
        },
        "required": [
          "recipientParticipantIds",
          "status"
        ],
        "type": "object"
      },
      "ReminderParticipant": {
        "properties": {
          "email": {
            "description": "The email address of the participant",
            "type": "string"
          },
          "name": {
            "description": "The full name of the participant",
            "type": "string"
          },
          "participantId": {
            "description": "The unique identifier of the participant",
            "type": "string"
          }
        },
        "required": [
          "email",
          "participantId"
        ],
        "type": "object"
      },
      "RemindersResponse": {
        "properties": {
          "reminderInfoList": {
            "description": "A list of one or more reminders created on the agreement specified by the unique identifier agreementId by the user invoking the API.",
            "items": {
              "$ref": "#/components/schemas/ReminderInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "reminderInfoList"
        ],
        "type": "object"
      },
      "SecurityOption": {
        "properties": {
          "openPassword": {
            "description": "The secondary password that will be used to secure the PDF document. Note that Acrobat Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SendOptions": {
        "properties": {
          "completionEmails": {
            "description": "Control notification mails for agreement completion events - COMPLETED, CANCELLED, EXPIRED and REJECTED",
            "enum": [
              "ALL",
              "NONE"
            ],
            "type": "string"
          },
          "inFlightEmails": {
            "description": "Control notification mails for agreement-in-process events - DELEGATED, REPLACED",
            "enum": [
              "ALL",
              "NONE"
            ],
            "type": "string"
          },
          "initEmails": {
            "description": "Control notification mails for Agreement initiation events - ACTION_REQUESTED and CREATED",
            "enum": [
              "ALL",
              "NONE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SenderInfo": {
        "properties": {
          "company": {
            "description": "Company of the sender, if available.",
            "type": "string"
          },
          "createdDate": {
            "description": "The date when the sender was added. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
            "format": "date",
            "type": "string"
          },
          "email": {
            "description": "Email of the sender of the agreement.",
            "type": "string"
          },
          "hidden": {
            "description": "True if the agreement is hidden for the user that is calling the API. Only returned if self is true.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the sender, if available.",
            "type": "string"
          },
          "participantId": {
            "description": " The unique identifier of the sender of the agreement.",
            "type": "string"
          },
          "self": {
            "description": "True if the sender is the same user that is calling the API.",
            "type": "boolean"
          },
          "status": {
            "description": "The agreement status with respect to the participant set. This cannot be changed as part of the PUT call.",
            "enum": [
              "CANCELLED",
              "COMPLETED",
              "EXPIRED",
              "NOT_YET_VISIBLE",
              "WAITING_FOR_AUTHORING",
              "WAITING_FOR_MY_DELEGATION",
              "WAITING_FOR_MY_ACCEPTANCE",
              "WAITING_FOR_MY_ACKNOWLEDGEMENT",
              "WAITING_FOR_MY_APPROVAL",
              "WAITING_FOR_MY_FORM_FILLING",
              "WAITING_FOR_MY_SIGNATURE",
              "WAITING_FOR_NOTARIZATION",
              "WAITING_FOR_OTHERS"
            ],
            "type": "string"
          },
          "userId": {
            "description": "The user ID of the sender. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
            "type": "string"
          }
        },
        "required": [
          "company",
          "email",
          "hidden",
          "name",
          "participantId",
          "self",
          "status"
        ],
        "type": "object"
      },
      "ShareCreationInfo": {
        "properties": {
          "email": {
            "description": "The email address of the member with whom the agreement will be shared",
            "type": "string"
          },
          "message": {
            "description": "Optional message to the sharee",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "ShareCreationInfoList": {
        "properties": {
          "shareCreationInfo": {
            "description": "List of ShareCreationInfo",
            "items": {
              "$ref": "#/components/schemas/ShareCreationInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "shareCreationInfo"
        ],
        "type": "object"
      },
      "ShareCreationResponse": {
        "properties": {
          "email": {
            "description": "The email address that was requested",
            "type": "string"
          },
          "participantId": {
            "description": "The unique identifier of the participant",
            "type": "string"
          }
        },
        "required": [
          "email",
          "participantId"
        ],
        "type": "object"
      },
      "ShareCreationResponseList": {
        "properties": {
          "shareCreationResponseList": {
            "description": "List of ShareCreationResponse",
            "items": {
              "$ref": "#/components/schemas/ShareCreationResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "shareCreationResponseList"
        ],
        "type": "object"
      },
      "ShareParticipantInfo": {
        "properties": {
          "company": {
            "description": "Company of the sharee participant, if available.",
            "type": "string"
          },
          "email": {
            "description": "Email of the sharee participant of the agreement.",
            "type": "string"
          },
          "hidden": {
            "description": "True if the agreement is hidden for the user that is calling the API. Only returned if self is true.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the sharee participant, if available.",
            "type": "string"
          },
          "participantId": {
            "description": "The unique identifier of the sharee participant of the agreement.",
            "type": "string"
          },
          "self": {
            "description": "True if the Share participant is the same user that is calling the API.",
            "type": "boolean"
          },
          "sharerParticipantId": {
            "description": "The unique identifier of the participant who shared the agreement.",
            "type": "string"
          }
        },
        "required": [
          "company",
          "email",
          "hidden",
          "name",
          "participantId",
          "self",
          "sharerParticipantId"
        ],
        "type": "object"
      },
      "SignerIdentityReportInfo": {
        "properties": {
          "securityOption": {
            "$ref": "#/components/schemas/SecurityOption",
            "description": "Optional secondary security parameters for the signer identity report.",
            "items": {
              "$ref": "#/components/schemas/SecurityOption"
            }
          }
        },
        "type": "object"
      },
      "SigningUrl": {
        "properties": {
          "email": {
            "description": "The email address of the signer associated with this signing url",
            "type": "string"
          },
          "esignUrl": {
            "description": "The email address of the signer associated with this signing url",
            "type": "string"
          }
        },
        "required": [
          "email",
          "esignUrl"
        ],
        "type": "object"
      },
      "SigningUrlResponse": {
        "properties": {
          "signingUrlSetInfos": {
            "description": "An array of urls for signer sets involved in this agreement.",
            "items": {
              "$ref": "#/components/schemas/SigningUrlSetInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "signingUrlSetInfos"
        ],
        "type": "object"
      },
      "SigningUrlSetInfo": {
        "properties": {
          "signingUrlSetName": {
            "description": "The name of the current signer set. Returned only, if the API caller is the sender of agreement",
            "type": "string"
          },
          "signingUrls": {
            "description": "An array of urls for current signer set.",
            "items": {
              "$ref": "#/components/schemas/SigningUrl"
            },
            "type": "array"
          }
        },
        "required": [
          "signingUrls"
        ],
        "type": "object"
      },
      "SupportingDocument": {
        "properties": {
          "displayLabel": {
            "description": "Display name of the document",
            "type": "string"
          },
          "fieldName": {
            "description": "The name of the supporting document field",
            "type": "string"
          },
          "id": {
            "description": "Id representing the document",
            "type": "string"
          },
          "mimeType": {
            "description": "Mime-type of the document",
            "type": "string"
          },
          "numPages": {
            "description": "Number of pages in the document",
            "type": "integer"
          },
          "participantId": {
            "description": "The unique identifier of the participant that uploaded the supporting document",
            "type": "string"
          }
        },
        "required": [
          "displayLabel",
          "fieldName",
          "id",
          "mimeType",
          "numPages",
          "participantId"
        ],
        "type": "object"
      },
      "URLFileInfo": {
        "properties": {
          "mimeType": {
            "description": "The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed",
            "type": "string"
          },
          "name": {
            "description": "The original system file name of the document being sent",
            "type": "string"
          },
          "url": {
            "description": "A publicly accessible URL for retrieving the raw file content",
            "type": "string"
          }
        },
        "required": [
          "mimeType",
          "name",
          "url"
        ],
        "type": "object"
      },
      "UserAgreement": {
        "properties": {
          "displayDate": {
            "description": "The display date for the agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "displayParticipantSetInfos": {
            "description": "The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user",
            "items": {
              "$ref": "#/components/schemas/DisplayParticipantSetInfo"
            },
            "type": "array"
          },
          "esign": {
            "description": "True if this is an e-sign document",
            "type": "boolean"
          },
          "groupId": {
            "description": "Unique identifier of the group",
            "type": "string"
          },
          "hidden": {
            "description": "True if agreement is hidden for the user",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the agreement.If provided in POST, it will simply be ignored",
            "type": "string"
          },
          "latestVersionId": {
            "description": "A version ID which uniquely identifies the current version of the agreement",
            "type": "string"
          },
          "name": {
            "description": "Name of the Agreement",
            "type": "string"
          },
          "parentId": {
            "description": "The parent id of a bulk send child *OR* the originating id of a web form agreement instance",
            "type": "string"
          },
          "status": {
            "description": "This is a server generated attribute which provides the detailed status of an agreement with respect to the apiCaller",
            "enum": [
              "WAITING_FOR_MY_SIGNATURE",
              "WAITING_FOR_MY_APPROVAL",
              "WAITING_FOR_MY_DELEGATION",
              "WAITING_FOR_MY_ACKNOWLEDGEMENT",
              "WAITING_FOR_MY_ACCEPTANCE",
              "WAITING_FOR_MY_FORM_FILLING",
              "WAITING_FOR_NOTARIZATION",
              "OUT_FOR_SIGNATURE",
              "OUT_FOR_APPROVAL",
              "OUT_FOR_DELIVERY",
              "OUT_FOR_ACCEPTANCE",
              "OUT_FOR_FORM_FILLING",
              "SIGNED",
              "APPROVED",
              "FORM_FILLED",
              "DELIVERED",
              "ACCEPTED",
              "ARCHIVED",
              "CANCELLED",
              "EXPIRED",
              "WAITING_FOR_AUTHORING",
              "WAITING_FOR_PREFILL",
              "DRAFT",
              "DOCUMENTS_NOT_YET_PROCESSED",
              "WAITING_FOR_MY_VERIFICATION",
              "WAITING_FOR_VERIFICATION"
            ],
            "type": "string"
          },
          "type": {
            "description": "The kind of agreement",
            "enum": [
              "AGREEMENT",
              "MEGASIGN_CHILD",
              "WIDGET_INSTANCE"
            ],
            "type": "string"
          }
        },
        "required": [
          "displayDate",
          "displayParticipantSetInfos",
          "esign",
          "groupId",
          "hidden",
          "latestVersionId",
          "name"
        ],
        "type": "object"
      },
      "UserAgreements": {
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo",
            "description": "Pagination information for navigating through the response",
            "items": {
              "$ref": "#/components/schemas/PageInfo"
            }
          },
          "userAgreementList": {
            "description": "An array of UserAgreement items",
            "items": {
              "$ref": "#/components/schemas/UserAgreement"
            },
            "type": "array"
          }
        },
        "required": [
          "page",
          "userAgreementList"
        ],
        "type": "object"
      },
      "VaultEventInfo": {
        "properties": {
          "vaultEventComment": {
            "description": "The description provided by the vault provider for the vault event",
            "type": "string"
          },
          "vaultEventId": {
            "description": "The identifier assigned by the vault provider for the vault event",
            "type": "string"
          }
        },
        "required": [
          "vaultEventId"
        ],
        "type": "object"
      },
      "VaultingInfo": {
        "properties": {
          "enabled": {
            "description": "For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "VisibilityInfo": {
        "properties": {
          "visibility": {
            "description": "Specifies the visibility. The possible values are HIDE or SHOW",
            "enum": [
              "SHOW",
              "HIDE"
            ],
            "type": "string"
          }
        },
        "required": [
          "visibility"
        ],
        "type": "object"
      }
    }
  }
}
