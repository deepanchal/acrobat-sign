{
  "openapi": "3.0.0",
  "info": {
    "title": "secure.na3.adobesign.com",
    "version": "6.0.0"
  },
  "servers": [
    {
      "url": "https://secure.na3.adobesign.com/api/rest/v6"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_read\">user_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to navigate through the pages. If not provided, returns the first page.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "user_read"
            ]
          }
        ],
        "operationId": "getUsers",
        "summary": "Retrieves all the users in an account."
      },
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_write\">user_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreationResponse"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "user_write"
            ]
          }
        ],
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetailedUserInfo"
              }
            }
          },
          "description": "Information necessary to create a user.",
          "required": true
        },
        "summary": "Creates a new user in the Acrobat Sign system"
      }
    },
    "/users/{userId}": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_read\">user_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user identifier, as returned by the user creation API or retrieved from the API to fetch users. To get the details for the token owner, UserId can be replaced by \"me\" without quotes.",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedUserInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "user_read"
            ]
          }
        ],
        "operationId": "getUserDetail",
        "summary": "Retrieves detailed information about the user in the caller account."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_write\">user_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user identifier, as provided by GET /users or POST /users",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "user_write"
            ]
          }
        ],
        "operationId": "modifyUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetailedUserInfo"
              }
            }
          },
          "description": "This information is used to update the user attributes. Request model of PUT /users/{userId} should be same as response returned by GET /users/{userId}.",
          "required": true
        },
        "summary": "Update an user."
      }
    },
    "/users/{userId}/events": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_read\">user_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user identifier, as provided by GET /users or POST /users",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to navigate through the pages. If not provided, returns the first page.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEventsList"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "user_read"
            ]
          }
        ],
        "operationId": "getUserEvents",
        "summary": "Retrieves all events for user"
      }
    },
    "/users/{userId}/groups": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_read\">user_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user identifier, as returned by the user creation API or retrieved from the API to fetch users. To get the details for the token owner, UserId can be replaced by \"me\" without quotes.",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupsInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "user_read"
            ]
          }
        ],
        "operationId": "getGroupsOfUser",
        "summary": "Retrieves the groups of the user."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_write\">user_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user identifier, as returned by the user creation API or retrieved from the API to fetch users. To update the details for the token owner, UserId can be replaced by \"me\" without quotes.",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "user_write"
            ]
          }
        ],
        "operationId": "updateGroupsOfUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupsInfo"
              }
            }
          },
          "required": true
        },
        "summary": "Updates the groups of the user."
      }
    },
    "/users/{userId}/locale": {
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_write\">user_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user identifier, as provided by GET /users or POST /users",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "user_write"
            ]
          }
        ],
        "operationId": "modifyUserLocale",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLocaleInfo"
              }
            }
          },
          "required": true
        },
        "summary": "Updates the user locale."
      }
    },
    "/users/{userId}/state": {
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_write\">user_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user identifier, as returned by the user creation API or retrieved from the API to fetch users. To update the details for the token owner, UserId can be replaced by \"me\" without quotes.",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatusUpdateResponse"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "user_write"
            ]
          }
        ],
        "operationId": "modifyUserState",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserStateInfo"
              }
            }
          },
          "required": true
        },
        "summary": "Activate/Deactivate a given user."
      }
    },
    "/users/{userId}/views": {
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_read\">user_read</a> - user read is always required</li><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_login\">user_login</a> - Required additionally if the autoLoginUser parameter is set to true</li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user identifier, as returned by the user creation API or retrieved from the API to fetch users. To get the details for the token owner, UserId can be replaced by \"me\" without quotes.",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewResponse"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "user_read",
              "user_login"
            ]
          }
        ],
        "operationId": "getUserViews",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserViewInfo"
              }
            }
          },
          "description": "Name of the required view and its desired configuration.",
          "required": true
        },
        "summary": "Retrieves the URL of manage, account settings and user profile page."
      }
    }
  },
  "components": {
    "schemas": {
      "BooleanSettingInfo": {
        "properties": {
          "inherited": {
            "description": "True if setting is inherited from its group or account value.",
            "type": "boolean"
          },
          "value": {
            "description": "Value of the setting.",
            "type": "boolean"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "CommonViewConfiguration": {
        "properties": {
          "autoLoginUser": {
            "description": "Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false",
            "type": "boolean"
          },
          "frameParent": {
            "description": "An optional field to provide the comma-separated list of parent domain urls where the returned URLs may be iframed. If provided with non-empty and valid list of parent domain urls, it will be used to allow framing for the same. By default the value is null and the Acrobat Sign pages will not be viewable in an iframe.",
            "type": "string"
          },
          "noChrome": {
            "description": "No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DetailedUserInfo": {
        "properties": {
          "accountId": {
            "description": "The account id of the user. This will be ignored as part of PUT calls.",
            "type": "string"
          },
          "accountType": {
            "description": "Type of account to which the user belongs (null if no account). If provided in POST or PUT it will be ignored.",
            "enum": [
              "FREE",
              "PRO",
              "TEAM",
              "TEAM_TRIAL",
              "ENTERPRISE",
              "ENTERPRISE_TRIAL",
              "GLOBAL",
              "GLOBAL_TRIAL"
            ],
            "type": "string"
          },
          "company": {
            "description": "The name of company of the user",
            "type": "string"
          },
          "createdDate": {
            "description": "The date the user was created. If provided in POST or PUT it will be ignored",
            "format": "date",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "firstName": {
            "description": "The first name of the user",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier of the user resource for REST APIs as issued by Acrobat Sign.",
            "type": "string"
          },
          "initials": {
            "description": "The initials of the user",
            "type": "string"
          },
          "isAccountAdmin": {
            "description": "True if the user is account admin. This will be ignored as part of PUT calls.",
            "type": "boolean"
          },
          "lastName": {
            "description": "The last name of the user",
            "type": "string"
          },
          "locale": {
            "description": "The UI locale of the user",
            "type": "string"
          },
          "phone": {
            "description": "The phone number of the user",
            "type": "string"
          },
          "primaryGroupId": {
            "description": "Primary group in which the new user should be added. Default is the default group for the account the user is being added to. This will be ignored as part of PUT calls",
            "type": "string"
          },
          "status": {
            "description": "Status of the user. If provided in POST it will be ignored.",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "CREATED",
              "UNVERIFIED"
            ],
            "type": "string"
          },
          "title": {
            "description": "The job title of the user",
            "type": "string"
          }
        },
        "required": [
          "accountType",
          "email",
          "id",
          "isAccountAdmin",
          "status"
        ],
        "type": "object"
      },
      "PageInfo": {
        "properties": {
          "nextCursor": {
            "description": "Used to navigate to the next page. If not returned, there are no further pages.",
            "type": "string"
          }
        },
        "required": [
          "nextCursor"
        ],
        "type": "object"
      },
      "SettingsInfo": {
        "properties": {
          "libaryDocumentCreationVisible": {
            "$ref": "#/components/schemas/BooleanSettingInfo",
            "description": "Can user create library documents?",
            "items": {
              "$ref": "#/components/schemas/BooleanSettingInfo"
            }
          },
          "sendRestrictedToWorkflows": {
            "$ref": "#/components/schemas/BooleanSettingInfo",
            "description": "Can user only create agreeements using workflows?",
            "items": {
              "$ref": "#/components/schemas/BooleanSettingInfo"
            }
          },
          "userCanSend": {
            "$ref": "#/components/schemas/BooleanSettingInfo",
            "description": "Can user send agreements for signature to others?",
            "items": {
              "$ref": "#/components/schemas/BooleanSettingInfo"
            }
          },
          "widgetCreationVisible": {
            "$ref": "#/components/schemas/BooleanSettingInfo",
            "description": "Can user create web forms?",
            "items": {
              "$ref": "#/components/schemas/BooleanSettingInfo"
            }
          }
        },
        "type": "object"
      },
      "UserCreationResponse": {
        "properties": {
          "userId": {
            "description": "The unique identifier for user in REST APIs. This identifier will not be compatible with any existing SOAP APIs and is different from user key that SOAP APIs provide and consume. userid being provided here and userkey that SOAP uses are different and the two can not be interchanged with each other",
            "type": "string"
          },
          "userStatus": {
            "description": "Status of the user",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "CREATED",
              "PENDING",
              "UNVERIFIED"
            ],
            "type": "string"
          }
        },
        "required": [
          "userStatus"
        ],
        "type": "object"
      },
      "UserEvent": {
        "description": "A JSON of one user event, null",
        "properties": {
          "adminUserId": {
            "description": "Account admin user ID",
            "type": "string"
          },
          "date": {
            "description": "The date of the user event. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "event": {
            "description": "Type of user event",
            "enum": [
              "CREATED",
              "REGISTERED",
              "CHANGE_EMAIL",
              "CHANGE_PASSWORD",
              "VERIFICATION_EMAIL_SENT",
              "VERIFIED_EMAIL",
              "VERIFIED_BY_TRANSACTION",
              "SHARE_REQUESTED",
              "SHARE_ACCEPTED",
              "SHARE_DECLINED",
              "SHARE_CANCELLED",
              "SHARE_INVITED",
              "MANUALLY_VERIFIED",
              "ACCOUNT_TYPE_UPDATED",
              "MAX_LOGIN_FAILURES_EXCEEDED",
              "MAX_PASSWORD_CHANGE_FAILURES_EXCEEDED",
              "PASSWORD_RESET",
              "EMAIL_BOUNCED",
              "SHARE_CREATED_BY_MASTER",
              "DELEGATION_PERMISSIONS_UPDATED",
              "MARKED_AS_GROUP_EMAIL",
              "MARKED_AS_INDIVIDUAL_EMAIL",
              "VERIFICATION_EMAIL_REQUESTED_BY_ADMIN",
              "REMOVED_FROM_GROUP",
              "REMOVED_FROM_ACCOUNT",
              "LOGO_UPLOADED",
              "REACTIVATED",
              "API_ENABLED",
              "API_DISABLED",
              "USER_ACCOUNT_UPDATED",
              "USER_GROUP_UPDATED",
              "LOGIN",
              "FORGET_PASSWORD_REQUESTED",
              "ACCOUNT_CHANGED",
              "MODIFIED",
              "ACCOUNT_SETUP_EMAIL_REQUESTED_BY_ADMIN",
              "ACCOUNT_SETUP_EMAIL_SENT",
              "ARCHIVED",
              "USER_ADDED_TO_GROUP",
              "ACCOUNT_ADMIN_STATUS_CHANGED",
              "GROUP_ADMIN_STATUS_CHANGED",
              "PRIMARY_GROUP_CHANGED"
            ],
            "type": "string"
          },
          "fromGroupId": {
            "description": "The identifier for the group where user is moved from.",
            "type": "string"
          },
          "participationId": {
            "description": "The identifier for participation.",
            "type": "string"
          },
          "toGroupId": {
            "description": "The identifier for the group where user is moved to.",
            "type": "string"
          },
          "userEventId": {
            "description": "The identifier for the event.",
            "type": "string"
          },
          "userId": {
            "description": "The user ID of the signing participant.",
            "type": "string"
          }
        },
        "required": [
          "adminUserId",
          "date",
          "userId"
        ],
        "type": "object"
      },
      "UserEventsList": {
        "description": "A JSON list of all user events",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo",
            "description": "Pagination information for navigating through the response",
            "items": {
              "$ref": "#/components/schemas/PageInfo"
            }
          },
          "userEvents": {
            "description": "List of user events",
            "items": {
              "$ref": "#/components/schemas/UserEvent"
            },
            "type": "array"
          }
        },
        "required": [
          "page",
          "userEvents"
        ],
        "type": "object"
      },
      "UserGroupInfo": {
        "properties": {
          "createdDate": {
            "description": "Date group was created",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the group",
            "type": "string"
          },
          "isGroupAdmin": {
            "description": "True if user is group admin.",
            "type": "boolean"
          },
          "isPrimaryGroup": {
            "description": "True if the group is the user's primary group.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the group. This will be ignored as part of PUT call.",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/SettingsInfo",
            "description": "List of some group membership settings.",
            "items": {
              "$ref": "#/components/schemas/SettingsInfo"
            }
          },
          "status": {
            "description": "Status of the group membership",
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "isGroupAdmin",
          "isPrimaryGroup",
          "status"
        ],
        "type": "object"
      },
      "UserGroupsInfo": {
        "properties": {
          "groupInfoList": {
            "description": "The list of groups for given user.",
            "items": {
              "$ref": "#/components/schemas/UserGroupInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "groupInfoList"
        ],
        "type": "object"
      },
      "UserInfo": {
        "properties": {
          "accountId": {
            "description": "The account id of the user. This will be ignored as part of PUT calls.",
            "type": "string"
          },
          "company": {
            "description": "The name of company of the user",
            "type": "string"
          },
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "firstName": {
            "description": "The first name of the user",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier of the user resource for REST APIs as issued by Acrobat Sign.",
            "type": "string"
          },
          "isAccountAdmin": {
            "description": "True if user is account admin",
            "type": "boolean"
          },
          "lastName": {
            "description": "The last name of the user",
            "type": "string"
          }
        },
        "required": [
          "email",
          "id",
          "isAccountAdmin"
        ],
        "type": "object"
      },
      "UserLocaleInfo": {
        "properties": {
          "locale": {
            "description": "The UI locale of the user",
            "enum": [
              "[en_US, in_ID, ca_ES, cs_CZ, da_DK, de_DE, en_GB, en_US_Echosign, es_ES, eu_ES, fr_FR, hr_HR, is_IS, it_IT, hu_HU, ms_MY, nl_NL, no_NO, nb_NO, nn_NO, pl_PL, pt_BR, pt_PT, ro_RO, sk_SK, sl_SI, fi_FI, sv_SE, vi_VN, tr_TR, ru_RU, uk_UA, th_TH, ja_JP, zh_CN, zh_TW, ko_KR, zz_ZZ]"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserStateInfo": {
        "properties": {
          "comment": {
            "description": "An optional comment describing why you want to activate/deactivate a given user",
            "type": "string"
          },
          "state": {
            "description": "The state to which the user is to be updated. The valid states for this variable is currently, ACTIVE and INACTIVE",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "UserStatusUpdateResponse": {
        "properties": {
          "code": {
            "description": "The result of the attempt to activate or deactivate the user",
            "enum": [
              "ALREADY_ACTIVE",
              "ALREADY_INACTIVE",
              "OK",
              "RESET_PASSWORD_WORKFLOW_INITIATED",
              "SET_PASSWORD_WORKFLOW_INITIATED"
            ],
            "type": "string"
          },
          "message": {
            "description": "String result message if there was no error",
            "type": "string"
          },
          "state": {
            "description": "A status value showing the result of this operation",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "CREATED",
              "PENDING",
              "UNVERIFIED"
            ],
            "type": "string"
          }
        },
        "required": [
          "code",
          "state"
        ],
        "type": "object"
      },
      "UserView": {
        "properties": {
          "embeddedCode": {
            "description": "Embedded code of url of resource ",
            "type": "string"
          },
          "expiration": {
            "description": "Expiration of user url ",
            "format": "date",
            "type": "string"
          },
          "name": {
            "description": "Name of the requested user view",
            "enum": [
              "MANAGE",
              "ACCOUNT_SETTINGS",
              "USER_PROFILE",
              "ALL"
            ],
            "type": "string"
          },
          "url": {
            "description": "Url of resource location",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "UserViewInfo": {
        "properties": {
          "commonViewConfiguration": {
            "$ref": "#/components/schemas/CommonViewConfiguration",
            "description": "Common view configuration for all the available views",
            "items": {
              "$ref": "#/components/schemas/CommonViewConfiguration"
            }
          },
          "name": {
            "description": "Name of the requested user view",
            "enum": [
              "MANAGE",
              "ACCOUNT_SETTINGS",
              "USER_PROFILE",
              "ALL"
            ],
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "UserViewResponse": {
        "properties": {
          "userViewList": {
            "description": "List of user views",
            "items": {
              "$ref": "#/components/schemas/UserView"
            },
            "type": "array"
          }
        },
        "required": [
          "userViewList"
        ],
        "type": "object"
      },
      "UsersInfo": {
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo",
            "description": "Pagination information for navigating through the response",
            "items": {
              "$ref": "#/components/schemas/PageInfo"
            }
          },
          "userInfoList": {
            "description": "The list of users in the account.",
            "items": {
              "$ref": "#/components/schemas/UserInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "page",
          "userInfoList"
        ],
        "type": "object"
      }
    }
  }
}
