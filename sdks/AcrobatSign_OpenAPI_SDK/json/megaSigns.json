{
  "openapi": "3.0.0",
  "info": {
    "title": "secure.na3.adobesign.com",
    "version": "6.0.0"
  },
  "servers": [
    {
      "url": "https://secure.na3.adobesign.com/api/rest/v6"
    }
  ],
  "paths": {
    "/megaSigns": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query parameter to fetch all the hidden bulk send agreements along with the visible bulk send agreements. Default value is false.",
            "in": "query",
            "name": "showHiddenMegaSigns",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Used to navigate through the pages. If not provided, returns the first page.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The group identifier, as returned by the group creation API or retrieved from the API to fetch groups.",
            "in": "query",
            "name": "groupId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MegaSigns"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getMegaSigns",
        "summary": "Retrieves Send in Bulk parent agreements for a user."
      },
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MegaSignCreationResponse"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "description": "This is a primary endpoint which is used to create a new bulk send. A bulk send can be created using transientDocument, libraryDocument or a URL. You can create a bulk send in <b>AUTHORING</b> state to prepare the document before send or in <b>IN_PROCESS</b> to immediately send it. You can use the PUT/megaSigns/{megaSignId}/state endpoint to transition the state of bulk send. An allowed transition would follow the following sequence: AUTHORING->IN_PROCESS -> CANCELLED.",
        "operationId": "createMegaSign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MegaSignCreationInfo"
              }
            }
          },
          "description": "Information about the bulk send that you want to send.",
          "required": true
        },
        "summary": "Send an agreement out for signature to multiple recipients. Each recipient will receive and sign their own copy of the agreement."
      }
    },
    "/megaSigns/{megaSignId}": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchedMegaSignInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getMegaSignInfo",
        "summary": "Get detailed information of the specified Send in Bulk parent agreement."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "updateMegaSign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MegaSignInfo"
              }
            }
          },
          "description": "Information necessary to update a modifiable bulk send parent that is presently out for signature.",
          "required": true
        },
        "summary": "Update the expirationTime on an existing bulk send parent and all the child agreements that are already out for signature."
      }
    },
    "/megaSigns/{megaSignId}/agreements": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to navigate through the pages. If not provided, returns the first page.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MegaSignChildAgreements"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getMegaSignChildAgreements",
        "summary": "Get all the child agreements of the specified Send in Bulk parent agreement."
      }
    },
    "/megaSigns/{megaSignId}/childAgreementsInfo/{childAgreementsInfoFileId}": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the childAgreementsInfoFile that has been uploaded by sender while creating the bulk send or retrieved from the API to fetch megaSignInfo ",
            "in": "path",
            "name": "childAgreementsInfoFileId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/csv": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "description": "CSV file stream containing form data information",
        "operationId": "getChildAgreementsInfoFile",
        "summary": "Retrieves the file stream of the original childAgreementsInfoFile that was uploaded by sender while creating the Send in Bulk."
      }
    },
    "/megaSigns/{megaSignId}/combinedDocument": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to true attach an audit report to the bulk send document PDF. Default value will be false.",
            "in": "query",
            "name": "attachAuditReport",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              },
              "application/pdf;encoding=base64": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getMegaSignCombinedDocument",
        "summary": "Retrieves a single combined PDF document for the documents associated with the Send in Bulk parent agreement."
      }
    },
    "/megaSigns/{megaSignId}/combinedDocument/url": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to true, attach an audit report to the bulk send PDF. The default value is false.",
            "in": "query",
            "name": "attachAuditReport",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentUrl"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getMegaSignCombinedDocumentUrl",
        "summary": "Retrieves url of all visible pages of all the documents associated with the Send in Bulk parent agreement."
      }
    },
    "/megaSigns/{megaSignId}/documents": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementDocuments"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getMegaSignAllDocuments",
        "summary": "Retrieves the IDs of the documents associated with a Send in Bulk parent agreement."
      }
    },
    "/megaSigns/{megaSignId}/documents/imageUrls": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of image sizes i.e. {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}. Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT}. ",
            "in": "query",
            "name": "imageSizes",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to true, returns only image availability. Else, returns both image urls and its availability.",
            "in": "query",
            "name": "showImageAvailabilityOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicDocumentsImageUrlsInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getMegaSignAllDocumentsImageUrls",
        "summary": "Retrieves image urls of all visible pages of a document associated with a Send in Bulk parent agreement."
      }
    },
    "/megaSigns/{megaSignId}/documents/{documentId}": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The document identifier, as retrieved from the API which fetches the documents of a specified bulk send parent",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              },
              "application/pdf;encoding=base64": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "description": "Raw stream of the file",
        "operationId": "getMegaSignDocumentInfo",
        "summary": "Retrieves the file stream of a document of a Send in Bulk parent agreement."
      }
    },
    "/megaSigns/{megaSignId}/events": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MegasignEventList"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getEvents",
        "summary": "Retrieves the events information for the Send in Bulk parent agreement."
      }
    },
    "/megaSigns/{megaSignId}/formData": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to navigate through the pages. If not provided, returns the first page.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              },
              "text/csv": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "description": "CSV/JSON file stream containing form data information",
        "operationId": "getMegaSignFormData",
        "summary": "Retrieves data entered by recipients into interactive form fields at the time they signed the child agreements of the specified Send in Bulk agreement"
      }
    },
    "/megaSigns/{megaSignId}/formFields": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MegaSignFormFields"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getFormFields",
        "summary": "Retrieves details of form fields of a Send in Bulk parent agreement."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MegaSignFormFields"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "updateFormFields",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormFieldPutInfo"
              }
            }
          },
          "description": "List of form fields to be set for bulk send parent agreement",
          "required": true
        },
        "summary": "Updates the details of form fields of a Send in Bulk parent agreement."
      }
    },
    "/megaSigns/{megaSignId}/me": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyAgreementInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getMegaSignInfoForUser",
        "summary": "Retrieves the Send in Bulk parent agreement information related to the api caller"
      }
    },
    "/megaSigns/{megaSignId}/me/note": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getMegaSignNoteForUser",
        "summary": "Retrieves the latest note of a Send in Bulk parent agreement for the user."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "updateMegaSignNoteForUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          },
          "description": "The note to be associated with the bulk send parent agreement.",
          "required": true
        },
        "summary": "Updates the latest note of a Send in Bulk parent agreement for the user."
      }
    },
    "/megaSigns/{megaSignId}/me/visibility": {
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "updateMegaSignVisibility",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisibilityInfo"
              }
            }
          },
          "description": "Information to update visibility of agreement",
          "required": true
        },
        "summary": "Updates the visibility of a bulk send."
      }
    },
    "/megaSigns/{megaSignId}/members": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MegaSignMembersInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getAllMegaSignMembers",
        "summary": "Retrieves detailed member info along with IDs for different types of participants associated with the Send in Bulk parent agreement."
      }
    },
    "/megaSigns/{megaSignId}/members/share": {
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareCreationResponseList"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "createShareOnMegaSign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareCreationInfoList"
              }
            }
          },
          "description": "List of agreement share creation information objects.",
          "required": true
        },
        "summary": "Share a bulk send parent and all the child agreements with someone."
      }
    },
    "/megaSigns/{megaSignId}/reminders": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A comma-separated list of reminder statuses of the reminders which should be returned in the response. Currently supported values are ACTIVE, CANCELED, COMPLETE",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MegaSignRemindersResponse"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getMegaSignReminders",
        "summary": "Retrieves the reminders of the specified Send in Bulk parent agreement."
      },
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReminderCreationResult"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "operationId": "createReminderOnMegaSign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderInfo"
              }
            }
          },
          "description": "The information about a reminder associated with a recipient of an agreement.",
          "required": true
        },
        "summary": "Creates a reminder on the specified participants of the bulk send parent."
      }
    },
    "/megaSigns/{megaSignId}/reminders/{reminderId}": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The reminder identifier",
            "in": "path",
            "name": "reminderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReminderInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read"
            ]
          }
        ],
        "operationId": "getMegaSignReminder",
        "summary": "Retrieves a specific reminder given the reminder id for the specified Send in Bulk parent agreement."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The reminder identifier",
            "in": "path",
            "name": "reminderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "description": "You can only update an ACTIVE reminder, and can only update the status to 'CANCELED', update reminderParticipantIds, update allUnsigned or update note.",
        "operationId": "updateMegaSignReminder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderInfo"
              }
            }
          },
          "description": "The information about a reminder associated with a recipient of an agreement.",
          "required": true
        },
        "summary": "Updates an existing reminder for a Send in Bulk parent agreement."
      }
    },
    "/megaSigns/{megaSignId}/state": {
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_write\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_write"
            ]
          }
        ],
        "description": "This endpoint can be used by creator of the bulk send to transition between the states of a bulk send. An allowed transition would follow the following sequence :  AUTHORING->IN_PROCESS->CANCELLED.",
        "operationId": "updateMegaSignState",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MegaSignStateInfo"
              }
            }
          },
          "description": "Bulk send state update information object.",
          "required": true
        },
        "summary": "Updates the state of a bulk send identified by MegaSignId in the path."
      }
    },
    "/megaSigns/{megaSignId}/views": {
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-agreement_read\">agreement_read</a> - agreement read is always required</li><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_login\">user_login</a> - Required additionally if the autoLoginUser parameter is set to true</li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the bulk send parent agreement, as returned by the bulk send creation API or retrieved from the API to fetch the bulk send agreements",
            "in": "path",
            "name": "megaSignId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MegaSignViewResponse"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "agreement_read",
              "user_login"
            ]
          }
        ],
        "operationId": "getMegaSignView",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MegaSignViewInfo"
              }
            }
          },
          "description": "Name of the required view and its desired configuration.",
          "required": true
        },
        "summary": "Retrieves the requested views of a bulk send agreement."
      }
    }
  },
  "components": {
    "requestBodies": {
      "ReminderInfo": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReminderInfo"
            }
          }
        },
        "description": "The information about a reminder associated with a recipient of an agreement.",
        "required": true
      }
    },
    "schemas": {
      "AccountSharerInfo": {
        "properties": {
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "fullName": {
            "description": "Full name of this account sharer.",
            "type": "string"
          },
          "permissions": {
            "description": "A list of permissions given for this account sharing.",
            "items": {
              "enum": [
                "VIEW",
                "SEND",
                "MODIFY"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "userId": {
            "description": "A unique identifier of the user resource for REST APIs as issued by Acrobat Sign.",
            "type": "string"
          }
        },
        "required": [
          "email",
          "fullName",
          "permissions",
          "userId"
        ],
        "type": "object"
      },
      "AgreementCancellationInfo": {
        "properties": {
          "comment": {
            "description": "An optional comment describing to the recipients why you want to cancel the transaction",
            "type": "string"
          },
          "notifyOthers": {
            "description": "Whether or not you would like the recipients to be notified that the transaction has been cancelled. The default value is false",
            "type": "boolean"
          }
        },
        "required": [
          "notifyOthers"
        ],
        "type": "object"
      },
      "AgreementDocuments": {
        "properties": {
          "documents": {
            "description": "A list of documents",
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "type": "array"
          }
        },
        "required": [
          "documents"
        ],
        "type": "object"
      },
      "BasicDocumentsImageUrlsInfo": {
        "properties": {
          "documentsImageUrlsInfo": {
            "description": "A list of original document image URLs info.",
            "items": {
              "$ref": "#/components/schemas/DocumentImageUrlsInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "documentsImageUrlsInfo"
        ],
        "type": "object"
      },
      "BulkInfo": {
        "properties": {
          "source": {
            "description": "The source for the bulk participants.<br>- FILE: to reference file with participant defined in the ChildAgreementsInfo object.",
            "enum": [
              "FILE"
            ],
            "type": "string"
          }
        },
        "required": [
          "source"
        ],
        "type": "object"
      },
      "BulkParticipantInfo": {
        "properties": {
          "email": {
            "description": "Email of the participant. Currently only supports sender email.",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "BulkParticipantSetInfo": {
        "properties": {
          "bulkInfo": {
            "$ref": "#/components/schemas/BulkInfo",
            "description": "Info about the bulk participants corresponding to each child agreement of the bulk send",
            "items": {
              "$ref": "#/components/schemas/BulkInfo"
            }
          },
          "membersInfo": {
            "description": "Information about the send participants.",
            "items": {
              "$ref": "#/components/schemas/BulkParticipantInfo"
            },
            "type": "array"
          },
          "order": {
            "description": "Index indicating position at which signing group needs to sign.Signing group to sign at first place is assigned a 1 index. Different signingOrder specified in input should form a valid consecutive increasing sequence of integers. Otherwise signing order will be considered invalid.",
            "type": "integer"
          },
          "role": {
            "description": "Role assumed by all members in the set.",
            "enum": [
              "SIGNER"
            ],
            "type": "string"
          }
        },
        "required": [
          "order",
          "role"
        ],
        "type": "object"
      },
      "CCParticipantInfo": {
        "properties": {
          "company": {
            "description": "Company of the CC participant, if available.",
            "type": "string"
          },
          "email": {
            "description": "Email of the CC participant of the bulk send",
            "type": "string"
          },
          "hidden": {
            "description": "True if the bulk send parent is hidden for the user that is calling the API. Only returned if self is true.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the CC participant, if available.",
            "type": "string"
          },
          "participantId": {
            "description": " The unique identifier of the CC participant of the bulk send.",
            "type": "string"
          },
          "self": {
            "description": "True if the CC participant of the bulk send is the same user that is calling the API.",
            "type": "boolean"
          }
        },
        "required": [
          "company",
          "email",
          "hidden",
          "name",
          "participantId",
          "self"
        ],
        "type": "object"
      },
      "ChildAgreementsInfo": {
        "properties": {
          "fileInfo": {
            "$ref": "#/components/schemas/MegaSignChildAgreementsFileInfo",
            "description": "File info containing per child agreement information of bulk send.",
            "items": {
              "$ref": "#/components/schemas/MegaSignChildAgreementsFileInfo"
            }
          }
        },
        "required": [
          "fileInfo"
        ],
        "type": "object"
      },
      "CommonViewConfiguration": {
        "properties": {
          "autoLoginUser": {
            "description": "Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false",
            "type": "boolean"
          },
          "frameParent": {
            "description": "An optional field to provide the comma-separated list of parent domain urls where the returned URLs may be iframed. If provided with non-empty and valid list of parent domain urls, it will be used to allow framing for the same. By default the value is null and the Acrobat Sign pages will not be viewable in an iframe.",
            "type": "string"
          },
          "locale": {
            "description": "Message template locale",
            "type": "string"
          },
          "noChrome": {
            "description": "No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DetailedParticipantInfo": {
        "properties": {
          "company": {
            "description": "The company of the participant, if available.",
            "type": "string"
          },
          "createdDate": {
            "description": "The date when the participant was added. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
            "format": "date",
            "type": "string"
          },
          "email": {
            "description": "Email of the participant. This is the required field and will always be returned unless it is a fax workflow (legacy Send in Bulk) that were created using fax as input",
            "type": "string"
          },
          "hidden": {
            "description": "True if the bulk send is hidden for the user that is calling the API. Only returned if self is true.",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the participant.",
            "type": "string"
          },
          "name": {
            "description": "The name of the participant, if available.",
            "type": "string"
          },
          "privateMessage": {
            "description": "The private message of the participant, if available. This cannot be changed as part of the PUT call.",
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/ParticipantSecurityOption",
            "description": "Security options that apply to the participant.",
            "items": {
              "$ref": "#/components/schemas/ParticipantSecurityOption"
            }
          },
          "self": {
            "description": "True if this participant is the same user that is calling the API.",
            "type": "boolean"
          },
          "status": {
            "description": "The status of the participant.",
            "enum": [
              "REPLACED",
              "ACTIVE"
            ],
            "type": "string"
          },
          "userId": {
            "description": "The user ID of the participant. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
            "type": "string"
          }
        },
        "required": [
          "securityOption"
        ],
        "type": "object"
      },
      "DetailedParticipantSetInfo": {
        "properties": {
          "id": {
            "description": "The unique identifier of the participant set.",
            "type": "string"
          },
          "memberInfos": {
            "description": "Array of ParticipantInfo objects, containing participant-specific data (e.g. email). All participants in the array belong to the same set",
            "items": {
              "$ref": "#/components/schemas/DetailedParticipantInfo"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of ParticipantSet (it can be empty, but needs not to be unique in a single bulk send). Maximum no of characters in participant set name is restricted to 255.",
            "type": "string"
          },
          "order": {
            "description": "Index indicating sequential signing group (specified for hybrid routing).",
            "type": "integer"
          },
          "privateMessage": {
            "description": "Participant set's private message - all participants in the set will receive the same message.",
            "type": "string"
          },
          "role": {
            "description": "Role assumed by all participants in the set (signer, approver etc.).",
            "enum": [
              "SIGNER",
              "SENDER",
              "APPROVER",
              "ACCEPTOR",
              "CERTIFIED_RECIPIENT",
              "FORM_FILLER",
              "DELEGATE_TO_SIGNER",
              "DELEGATE_TO_APPROVER",
              "DELEGATE_TO_ACCEPTOR",
              "DELEGATE_TO_CERTIFIED_RECIPIENT",
              "DELEGATE_TO_FORM_FILLER",
              "SHARE",
              "NOTARY_SIGNER"
            ],
            "type": "string"
          },
          "status": {
            "description": "The bulk send status with respect to the participant set.",
            "enum": [
              "CANCELLED",
              "COMPLETED",
              "EXPIRED",
              "NOT_YET_VISIBLE",
              "WAITING_FOR_NOTARIZATION",
              "WAITING_FOR_OTHERS",
              "WAITING_FOR_MY_APPROVAL",
              "WAITING_FOR_AUTHORING",
              "WAITING_FOR_MY_ACKNOWLEDGEMENT",
              "WAITING_FOR_MY_ACCEPTANCE",
              "WAITING_FOR_MY_FORM_FILLING",
              "WAITING_FOR_MY_DELEGATION",
              "WAITING_FOR_MY_SIGNATURE",
              "WAITING_FOR_MY_VERIFICATION",
              "WAITING_FOR_PREFILL"
            ],
            "type": "string"
          }
        },
        "required": [
          "memberInfos",
          "order",
          "role"
        ],
        "type": "object"
      },
      "DeviceLocation": {
        "properties": {
          "latitude": {
            "description": "Latitude coordinate",
            "format": "float",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude coordinate",
            "format": "float",
            "type": "number"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object"
      },
      "DigAuthInfo": {
        "properties": {
          "providerDesc": {
            "description": "Digital Identity Gateway Provider Description. This will be ignored as part of POST or PUT calls.",
            "type": "string"
          },
          "providerId": {
            "description": "Digital Identity Gateway Provider Id. When replacing a participant that has DIG_ID authentication specified, you must supply a provider id for the new participant.",
            "type": "string"
          },
          "providerName": {
            "description": "Digital Identity Gateway Provider Name. This will be ignored as part of POST or PUT calls.",
            "type": "string"
          }
        },
        "required": [
          "providerId"
        ],
        "type": "object"
      },
      "DigitalSignatureInfo": {
        "properties": {
          "certificateIssuer": {
            "description": "Certificate Issuer for digital signing",
            "type": "string"
          },
          "cloudProviderIp": {
            "description": "Cloud Provider IP for digital signing",
            "type": "string"
          },
          "cloudProviderUrl": {
            "description": "Cloud Provider URL for digital signing",
            "type": "string"
          },
          "company": {
            "description": "Company name captured during digital signing",
            "type": "string"
          },
          "email": {
            "description": "Email captured during digital signing",
            "type": "string"
          },
          "name": {
            "description": "Name captured during digital signing",
            "type": "string"
          }
        },
        "required": [
          "company",
          "email",
          "name"
        ],
        "type": "object"
      },
      "Document": {
        "properties": {
          "createdDate": {
            "description": "The date the document was created",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "ID of the document. In case of PUT call, this is the only field that is accepted in Document structure. Name and mimeType are ignored in case of PUT call",
            "type": "string"
          },
          "label": {
            "description": "Label of the document",
            "type": "string"
          },
          "mimeType": {
            "description": "mimeType of the original file. This is returned in GET but not accepted back in PUT",
            "type": "string"
          },
          "name": {
            "description": "Name of the original document uploaded. This is returned in GET but not accepted back in PUT",
            "type": "string"
          },
          "numPages": {
            "description": "Number of pages in the document",
            "type": "integer"
          }
        },
        "required": [
          "createdDate",
          "id",
          "label",
          "numPages"
        ],
        "type": "object"
      },
      "DocumentImageUrls": {
        "properties": {
          "imageSize": {
            "description": "ImageSize corresponding to the imageUrl returned ",
            "enum": [
              "FIXED_WIDTH_50px",
              "FIXED_WIDTH_250px",
              "FIXED_WIDTH_675px",
              "ZOOM_50_PERCENT",
              "ZOOM_75_PERCENT",
              "ZOOM_100_PERCENT",
              "ZOOM_125_PERCENT",
              "ZOOM_150_PERCENT",
              "ZOOM_200_PERCENT"
            ],
            "type": "string"
          },
          "imageURLs": {
            "description": "A list of image url (one per page).",
            "items": {
              "$ref": "#/components/schemas/PageImageUrl"
            },
            "type": "array"
          },
          "imagesAvailable": {
            "description": "true if images for the associated image size is available, else false.",
            "type": "boolean"
          }
        },
        "required": [
          "imageURLs"
        ],
        "type": "object"
      },
      "DocumentImageUrlsInfo": {
        "properties": {
          "documentId": {
            "description": "Id of the document",
            "type": "string"
          },
          "documentImageUrlsList": {
            "description": "A list of documents image URLs.",
            "items": {
              "$ref": "#/components/schemas/DocumentImageUrls"
            },
            "type": "array"
          }
        },
        "required": [
          "documentId",
          "documentImageUrlsList"
        ],
        "type": "object"
      },
      "DocumentUrl": {
        "properties": {
          "url": {
            "description": "Secure URL of the document",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "ExternalId": {
        "properties": {
          "id": {
            "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Note: the externalId value is visible to all participants through the API, so should not be used to contain a sensitive token.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FetchedMegaSignInfo": {
        "properties": {
          "ccs": {
            "description": "A list of one or more CCs that will be copied in the bulk send transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file ",
            "items": {
              "$ref": "#/components/schemas/MegaSignCcInfo"
            },
            "type": "array"
          },
          "childAgreementsInfo": {
            "$ref": "#/components/schemas/ChildAgreementsInfo",
            "description": "Info corresponding to each child agreement of the bulk send ",
            "items": {
              "$ref": "#/components/schemas/ChildAgreementsInfo"
            }
          },
          "createdDate": {
            "description": "Date when bulk send was created. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "expirationTime": {
            "description": "Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.",
            "format": "date",
            "type": "string"
          },
          "externalId": {
            "$ref": "#/components/schemas/ExternalId",
            "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Note: the externalId value is visible to all participants through the API, so should not be used to contain a sensitive token.",
            "items": {
              "$ref": "#/components/schemas/ExternalId"
            }
          },
          "fileInfos": {
            "description": "A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "type": "array"
          },
          "firstReminderDelay": {
            "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Cannot be updated in a PUT",
            "type": "integer"
          },
          "groupId": {
            "description": "The unique identifier of the group to which the bulk send will belong to when it is created. If it is not provided during agreement creation the primary group of the creator will be used",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of bulk send ",
            "type": "string"
          },
          "isDocumentRetentionApplied": {
            "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "lastEventDate": {
            "description": "The date of the last event that occurred for this bulk send.  Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "locale": {
            "description": "The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender",
            "type": "string"
          },
          "message": {
            "description": "An optional message to the participants, describing what is being sent or why their signature is required",
            "type": "string"
          },
          "name": {
            "description": "The name of the agreement that will be used to identify it, in emails, website and other places",
            "type": "string"
          },
          "numChildren": {
            "description": "The total number of bulk send children associated with the bulk send parent. If provided in POST, it will be ignored. If modified in PUT, it will throw error MODIFYING_IMMUTABLE_FIELDS",
            "type": "integer"
          },
          "participantSetsInfo": {
            "description": "Information about the bulk send participants set.",
            "items": {
              "$ref": "#/components/schemas/BulkParticipantSetInfo"
            },
            "type": "array"
          },
          "postSignOption": {
            "$ref": "#/components/schemas/PostSignOption",
            "description": "URL and associated properties for the success page the user will be taken to after completing the signing process",
            "items": {
              "$ref": "#/components/schemas/PostSignOption"
            }
          },
          "reminderFrequency": {
            "description": "Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used",
            "enum": [
              "DAILY_UNTIL_SIGNED",
              "WEEKDAILY_UNTIL_SIGNED",
              "EVERY_OTHER_DAY_UNTIL_SIGNED",
              "EVERY_THIRD_DAY_UNTIL_SIGNED",
              "EVERY_FIFTH_DAY_UNTIL_SIGNED",
              "WEEKLY_UNTIL_SIGNED"
            ],
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/MegaSignSecurityOption",
            "description": "Optional security parameters for the bulk send",
            "items": {
              "$ref": "#/components/schemas/MegaSignSecurityOption"
            }
          },
          "senderEmail": {
            "description": "Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored",
            "type": "string"
          },
          "signatureType": {
            "description": "Specifies the type of signature you would like to request - written or e-signature. The possible values are <br> ESIGN : Agreement needs to be signed electronically <br>,\nWRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system",
            "enum": [
              "ESIGN",
              "WRITTEN"
            ],
            "type": "string"
          },
          "state": {
            "description": "State of the bulk send",
            "enum": [
              "AUTHORING",
              "IN_PROCESS"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status of the bulk send",
            "enum": [
              "AUTHORING",
              "IN_PROCESS",
              "CANCELLED",
              "COMPLETED",
              "EXPIRED",
              "PREFILL"
            ],
            "type": "string"
          },
          "vaultingInfo": {
            "$ref": "#/components/schemas/VaultingInfo",
            "description": "Vaulting properties that allows Acrobat Sign to securely store documents with a vault provider",
            "items": {
              "$ref": "#/components/schemas/VaultingInfo"
            }
          }
        },
        "required": [
          "childAgreementsInfo",
          "name",
          "signatureType",
          "state"
        ],
        "type": "object"
      },
      "FileInfo": {
        "properties": {
          "libraryDocumentId": {
            "description": "ID for an existing Library document that will be added to the agreement",
            "type": "string"
          },
          "notarize": {
            "description": "Indicates that this document needs to be notarized",
            "type": "boolean"
          },
          "transientDocumentId": {
            "description": "ID for a transient document that will be added to the agreement",
            "type": "string"
          },
          "urlFileInfo": {
            "$ref": "#/components/schemas/URLFileInfo",
            "description": "URL for an external document to add to the agreement",
            "items": {
              "$ref": "#/components/schemas/URLFileInfo"
            }
          }
        },
        "type": "object"
      },
      "FormField": {
        "description": "A form field for an agreement.",
        "properties": {
          "alignment": {
            "description": "Alignment of the text.",
            "enum": [
              "LEFT",
              "RIGHT",
              "CENTER"
            ],
            "type": "string"
          },
          "assignee": {
            "description": "Who the field is assigned to. Valid values are a participant set id, null, \"SIGNER\", \"SENDER\", \"NOBODY\", \"PREFILL\" or \"EVERYONE\". If \"SENDER\" is specified, Sender Signs First/Last must also be defined (Sender is also a Signer of the bulk send). If set to a participant set id, then any member of that participant set may fill out the field. \"NOBODY\" indicates that the field may not be filled by anybody (e.g. autopopulated fields like transaction number). \"PREFILL\" indicates that the field will be filled by the sender before the agreement is sent out for signing. \"EVERYONE\" exists only in hyperlink fields currently and indicates that it is assigned to all participants. null indicates that anybody may fill out the field. If the property isn't specified, it is treated as null.",
            "type": "string"
          },
          "backgroundColor": {
            "description": "Background color of the form field in RGB or HEX format",
            "type": "string"
          },
          "borderColor": {
            "description": "Color of the border of the field in RGB or HEX format",
            "type": "string"
          },
          "borderStyle": {
            "description": "Style of the border of the field.",
            "enum": [
              "SOLID",
              "DASHED",
              "BEVELED",
              "INSET",
              "UNDERLINE"
            ],
            "type": "string"
          },
          "borderWidth": {
            "description": "Width of the border of the field in default user space units",
            "format": "double",
            "type": "number"
          },
          "calculated": {
            "description": "true if this field's value is calculated from an expression, else false",
            "type": "boolean"
          },
          "conditionalAction": {
            "$ref": "#/components/schemas/FormFieldConditionalAction",
            "description": "A predicate (or set of predicates) that determines whether this field is visible and enabled.",
            "items": {
              "$ref": "#/components/schemas/FormFieldConditionalAction"
            }
          },
          "contentType": {
            "description": "Content Type of the form field.",
            "enum": [
              "DATA",
              "SIGNATURE_BLOCK",
              "SIGNATURE",
              "SIGNER_NAME",
              "SIGNER_FIRST_NAME",
              "SIGNER_LAST_NAME",
              "SIGNER_INITIALS",
              "SIGNER_EMAIL",
              "SIGNER_TITLE",
              "SIGNER_COMPANY",
              "SIGNATURE_DATE",
              "AGREEMENT_NAME",
              "AGREEMENT_MESSAGE",
              "TRANSACTION_ID",
              "SIGNATURE_STAMP",
              "PAYMENT",
              "DIGITAL_SIGNATURE",
              "CALC"
            ],
            "type": "string"
          },
          "currency": {
            "description": "A currency ISO code. Only applicable for payment form fields. Should be one of the currencies supported in the payment integration merchant accounts.",
            "type": "string"
          },
          "defaultValue": {
            "description": "Default value of the form field",
            "type": "string"
          },
          "displayFormat": {
            "description": "Format of the value of the field to be displayed based on the displayFormatType property.",
            "type": "string"
          },
          "displayFormatType": {
            "description": "Format type of the text field.",
            "enum": [
              "DEFAULT",
              "DATE",
              "NUMBER"
            ],
            "type": "string"
          },
          "displayLabel": {
            "description": "Display label attached to the field",
            "type": "string"
          },
          "fontColor": {
            "description": "Font color of the form field in RGB or HEX format",
            "type": "string"
          },
          "fontName": {
            "description": "Font name of the form field",
            "type": "string"
          },
          "fontSize": {
            "description": "Font size of the form field in points",
            "format": "double",
            "type": "number"
          },
          "hiddenOptions": {
            "description": "Text values which are hidden in a drop down form field",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hyperlink": {
            "$ref": "#/components/schemas/FormFieldHyperlink",
            "description": "Hyperlink-specific data (e.g. as url, link type)",
            "items": {
              "$ref": "#/components/schemas/FormFieldHyperlink"
            }
          },
          "inputType": {
            "description": "Input type of the form field",
            "enum": [
              "TEXT_FIELD",
              "MULTILINE",
              "PASSWORD",
              "RADIO",
              "CHECKBOX",
              "DROP_DOWN",
              "LISTBOX",
              "SIGNATURE",
              "PDF_SIGNATURE",
              "BUTTON",
              "BLOCK",
              "FILE_CHOOSER",
              "COMB",
              "INLINE_IMAGE",
              "UNSUPPORTED"
            ],
            "type": "string"
          },
          "locations": {
            "description": "All locations in a document where the form field is placed",
            "items": {
              "$ref": "#/components/schemas/FormFieldLocation"
            },
            "type": "array"
          },
          "masked": {
            "description": "true if the input entered by the signer has to be masked (like password), false if it shouldn't be",
            "type": "boolean"
          },
          "maskingText": {
            "description": "Text to mask the masked form field",
            "type": "string"
          },
          "maxLength": {
            "description": "Maximum length of the input text field in terms of no. of characters",
            "type": "integer"
          },
          "maxValue": {
            "description": "Upper bound of the number that can be entered by the signer",
            "format": "double",
            "type": "number"
          },
          "minLength": {
            "description": "Minimum length of the input text field in terms of no. of characters",
            "type": "integer"
          },
          "minValue": {
            "description": "Lower bound of the number that can be entered by the signer",
            "format": "double",
            "type": "number"
          },
          "name": {
            "description": "The name of the form field",
            "type": "string"
          },
          "origin": {
            "description": "Origin of Form Field",
            "enum": [
              "AUTHORED",
              "GENERATED",
              "IMPORTED"
            ],
            "type": "string"
          },
          "radioCheckType": {
            "description": "The type of radio button (if field is radio button, identified by inputType).",
            "enum": [
              "CIRCLE",
              "CHECK",
              "CROSS",
              "DIAMOND",
              "SQUARE",
              "STAR"
            ],
            "type": "string"
          },
          "readOnly": {
            "description": "true if it is a read-only field, else false",
            "type": "boolean"
          },
          "required": {
            "description": "true if it is a mandatory field to be filled by the signer, else false",
            "type": "boolean"
          },
          "tooltip": {
            "description": "Tooltip text for the form field",
            "type": "string"
          },
          "urlOverridable": {
            "description": "For web form text fields only - true if the default value may come from the URL, else false",
            "type": "boolean"
          },
          "validation": {
            "description": "Rule for validating the field value.",
            "enum": [
              "NONE",
              "STRING",
              "NUMBER",
              "DATE",
              "DATE_CUSTOM",
              "TIME",
              "ZIP",
              "PHONE",
              "SOCIAL_SEC",
              "EMAIL",
              "CURRENCY",
              "PERCENT",
              "FORMULA",
              "CUSTOM",
              "XFA_PICTURE"
            ],
            "type": "string"
          },
          "validationData": {
            "description": "Further data for validating input with regards to the field's specified format. The contents and interpretation of formatData depends on the value of validation.",
            "type": "string"
          },
          "validationErrMsg": {
            "description": "Error message to be shown to the signer if filled value doesn't match the validations of the form field",
            "type": "string"
          },
          "valueExpression": {
            "description": "Expression to calculate value of the form field",
            "type": "string"
          },
          "visible": {
            "description": "If set to false, then the form field is hidden.  Otherwise, it is visible.",
            "type": "boolean"
          },
          "visibleOptions": {
            "description": "Text values which are visible in a drop down form field",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "locations",
          "name"
        ],
        "type": "object"
      },
      "FormFieldConditionPredicate": {
        "description": "A predicate used to determine whether the condtion succeeds",
        "properties": {
          "fieldLocationIndex": {
            "description": "Index of the location of the form field used in the predicate",
            "type": "integer"
          },
          "fieldName": {
            "description": "Name of the field whose value is the basis of predicate",
            "type": "string"
          },
          "operator": {
            "description": "Operator to be applied on the value of the predicate field.",
            "enum": [
              "EQUALS",
              "NOT_EQUALS",
              "LESS_THAN",
              "LESS_THAN_EQUALS",
              "GREATER_THAN",
              "GREATER_THAN_EQUALS",
              "IN",
              "NOT_IN",
              "CONTAINS",
              "NOT_CONTAINS"
            ],
            "type": "string"
          },
          "value": {
            "description": "Value to compare against the value of the predicate's form field, using the specified operator",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormFieldConditionalAction": {
        "description": "Conditional actions to perfom on this form field.",
        "properties": {
          "action": {
            "description": "Action to show/hide the form field is to be taken on the basis of evaluation of conditions.",
            "enum": [
              "SHOW",
              "HIDE",
              "DISABLE",
              "ENABLE"
            ],
            "type": "string"
          },
          "anyOrAll": {
            "description": "It indicates if any one of the conditions or all of them have to be true.",
            "enum": [
              "ALL",
              "ANY"
            ],
            "type": "string"
          },
          "predicates": {
            "description": "The predicates to be evaluated in order to determine whether this condition is true",
            "items": {
              "$ref": "#/components/schemas/FormFieldConditionPredicate"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FormFieldHyperlink": {
        "description": "Hyperlink-specific data for hyperlink form fields",
        "properties": {
          "documentLocation": {
            "$ref": "#/components/schemas/FormFieldLocation",
            "description": "Location on the document pointed by the link in case of INTERNAL type link",
            "items": {
              "$ref": "#/components/schemas/FormFieldLocation"
            }
          },
          "linkType": {
            "description": "Type of link in an agreement.",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "FROM_TEXT"
            ],
            "type": "string"
          },
          "url": {
            "description": "URL, in case of EXTERNAL type link",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormFieldLocation": {
        "description": "Location information for form fields",
        "properties": {
          "height": {
            "description": "Height of the form field in default user space units",
            "format": "double",
            "type": "number"
          },
          "left": {
            "description": "No. of default user space units from left of the page for form field placement",
            "format": "double",
            "type": "number"
          },
          "pageNumber": {
            "description": "Number of the page where form field has to be placed, starting from 1.",
            "type": "integer"
          },
          "top": {
            "description": "No. of default user space units from bottom of the page for form field placement",
            "format": "double",
            "type": "number"
          },
          "width": {
            "description": "Width of the form field in default user space units",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "height",
          "left",
          "pageNumber",
          "top",
          "width"
        ],
        "type": "object"
      },
      "FormFieldPutInfo": {
        "description": "Information required to add or replace agreement form fields",
        "properties": {
          "fields": {
            "description": "The list of fields to update or replace.",
            "items": {
              "$ref": "#/components/schemas/FormField"
            },
            "type": "array"
          }
        },
        "required": [
          "fields"
        ],
        "type": "object"
      },
      "MegaSign": {
        "properties": {
          "displayDate": {
            "description": "The display date for the bulk send parent agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "esign": {
            "description": "True, if the signature type of the bulk send parent agreement is ESIGN. False, if the signature type of the bulk send parent agreement is WRITTEN",
            "type": "boolean"
          },
          "groupId": {
            "description": "Unique identifier of the group",
            "type": "string"
          },
          "hidden": {
            "description": "True, if bulk send is hidden for the user",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the bulk send parent agreement",
            "type": "string"
          },
          "name": {
            "description": "Name of the bulk send parent agreement",
            "type": "string"
          },
          "status": {
            "description": "Current status of the bulk send parent agreement from the perspective of the user",
            "enum": [
              "WAITING_FOR_MY_SIGNATURE",
              "IN_PROCESS",
              "CANCELLED",
              "ARCHIVED",
              "COMPLETED",
              "WAITING_FOR_AUTHORING",
              "WAITING_FOR_PREFILL"
            ],
            "type": "string"
          }
        },
        "required": [
          "displayDate",
          "esign",
          "groupId",
          "hidden",
          "id",
          "name",
          "status"
        ],
        "type": "object"
      },
      "MegaSignCcInfo": {
        "properties": {
          "email": {
            "description": "Email of the CC participant of the bulk send.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MegaSignChildAgreement": {
        "properties": {
          "displayDate": {
            "description": "The display date for the agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "esign": {
            "description": "True if this is an e-sign document",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the agreement.If provided in POST, it will simply be ignored",
            "type": "string"
          },
          "name": {
            "description": "Name of the Agreement",
            "type": "string"
          },
          "parentId": {
            "description": "The parent id of a bulk send child *OR* the originating id of a web form agreement instance",
            "type": "string"
          },
          "status": {
            "description": "This is a server generated attribute which provides the detailed status of an agreement with respect to the apiCaller",
            "enum": [
              "WAITING_FOR_MY_SIGNATURE",
              "WAITING_FOR_MY_APPROVAL",
              "WAITING_FOR_MY_DELEGATION",
              "WAITING_FOR_MY_ACKNOWLEDGEMENT",
              "WAITING_FOR_MY_ACCEPTANCE",
              "WAITING_FOR_MY_FORM_FILLING",
              "WAITING_FOR_NOTARIZATION",
              "OUT_FOR_SIGNATURE",
              "OUT_FOR_APPROVAL",
              "OUT_FOR_DELIVERY",
              "OUT_FOR_ACCEPTANCE",
              "OUT_FOR_FORM_FILLING",
              "SIGNED",
              "APPROVED",
              "FORM_FILLED",
              "DELIVERED",
              "ACCEPTED",
              "ARCHIVED",
              "CANCELLED",
              "EXPIRED",
              "WAITING_FOR_AUTHORING",
              "WAITING_FOR_PREFILL",
              "DRAFT",
              "DOCUMENTS_NOT_YET_PROCESSED",
              "WAITING_FOR_MY_VERIFICATION",
              "WAITING_FOR_VERIFICATION"
            ],
            "type": "string"
          },
          "type": {
            "description": "The kind of agreement",
            "enum": [
              "AGREEMENT",
              "MEGASIGN_CHILD",
              "WIDGET_INSTANCE"
            ],
            "type": "string"
          }
        },
        "required": [
          "displayDate",
          "esign",
          "name"
        ],
        "type": "object"
      },
      "MegaSignChildAgreements": {
        "properties": {
          "megaSignChildAgreementList": {
            "description": "A array of bulk send child agreements",
            "items": {
              "$ref": "#/components/schemas/MegaSignChildAgreement"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/PageInfo",
            "description": "Pagination information for navigating through the response",
            "items": {
              "$ref": "#/components/schemas/PageInfo"
            }
          }
        },
        "required": [
          "megaSignChildAgreementList",
          "page"
        ],
        "type": "object"
      },
      "MegaSignChildAgreementsFileInfo": {
        "properties": {
          "childAgreementsInfoFileId": {
            "description": "id of the file containg information about the existing childAgreementsInfo associated with the bulk send. Will be ignored in POST and PUT calls and in the case of GET call, this is the only thing that will be returned. The content of the file can be fetched through GET /megaSigns/{megaSignId}/childAgreementsInfo/{childAgreementsInfoFileId} endpoint.",
            "type": "string"
          },
          "fileType": {
            "description": "Input type through which participantSetsInfos will be provided. Whichever input type is provided, the values should be provided in its corresponding value object. Currently we are supporting CSV file format for providing Send in Bulk child recipients.",
            "enum": [
              "CSV"
            ],
            "type": "string"
          },
          "transientDocumentId": {
            "description": "Transient id of the input file which contains participantSetsInfos. Currently only csv format is suppported. More details about CSV format <a href='https://www.adobe.com/go/documentcloud_megasigncsv'>here</a>  ",
            "type": "string"
          }
        },
        "required": [
          "fileType",
          "transientDocumentId"
        ],
        "type": "object"
      },
      "MegaSignCreationInfo": {
        "properties": {
          "ccs": {
            "description": "A list of one or more CCs that will be copied in the bulk send transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file ",
            "items": {
              "$ref": "#/components/schemas/MegaSignCcInfo"
            },
            "type": "array"
          },
          "childAgreementsInfo": {
            "$ref": "#/components/schemas/ChildAgreementsInfo",
            "description": "Info corresponding to each child agreement of the bulk send ",
            "items": {
              "$ref": "#/components/schemas/ChildAgreementsInfo"
            }
          },
          "createdDate": {
            "description": "Date when bulk send was created. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "expirationTime": {
            "description": "Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.",
            "format": "date",
            "type": "string"
          },
          "externalId": {
            "$ref": "#/components/schemas/ExternalId",
            "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Note: the externalId value is visible to all participants through the API, so should not be used to contain a sensitive token.",
            "items": {
              "$ref": "#/components/schemas/ExternalId"
            }
          },
          "fileInfos": {
            "description": "A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "type": "array"
          },
          "firstReminderDelay": {
            "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Cannot be updated in a PUT",
            "type": "integer"
          },
          "groupId": {
            "description": "The unique identifier of the group to which the bulk send will belong to when it is created. If it is not provided during agreement creation the primary group of the creator will be used",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of bulk send ",
            "type": "string"
          },
          "isDocumentRetentionApplied": {
            "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "lastEventDate": {
            "description": "The date of the last event that occurred for this bulk send.  Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "locale": {
            "description": "The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender",
            "type": "string"
          },
          "message": {
            "description": "An optional message to the participants, describing what is being sent or why their signature is required",
            "type": "string"
          },
          "name": {
            "description": "The name of the agreement that will be used to identify it, in emails, website and other places",
            "type": "string"
          },
          "numChildren": {
            "description": "The total number of bulk send children associated with the bulk send parent. If provided in POST, it will be ignored. If modified in PUT, it will throw error MODIFYING_IMMUTABLE_FIELDS",
            "type": "integer"
          },
          "participantSetsInfo": {
            "description": "Information about the bulk send participants set.",
            "items": {
              "$ref": "#/components/schemas/BulkParticipantSetInfo"
            },
            "type": "array"
          },
          "postSignOption": {
            "$ref": "#/components/schemas/PostSignOption",
            "description": "URL and associated properties for the success page the user will be taken to after completing the signing process",
            "items": {
              "$ref": "#/components/schemas/PostSignOption"
            }
          },
          "reminderFrequency": {
            "description": "Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used",
            "enum": [
              "DAILY_UNTIL_SIGNED",
              "WEEKDAILY_UNTIL_SIGNED",
              "EVERY_OTHER_DAY_UNTIL_SIGNED",
              "EVERY_THIRD_DAY_UNTIL_SIGNED",
              "EVERY_FIFTH_DAY_UNTIL_SIGNED",
              "WEEKLY_UNTIL_SIGNED"
            ],
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/MegaSignSecurityOption",
            "description": "Optional security parameters for the bulk send",
            "items": {
              "$ref": "#/components/schemas/MegaSignSecurityOption"
            }
          },
          "senderEmail": {
            "description": "Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored",
            "type": "string"
          },
          "signatureType": {
            "description": "Specifies the type of signature you would like to request - written or e-signature. The possible values are <br> ESIGN : Agreement needs to be signed electronically <br>,\nWRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system",
            "enum": [
              "ESIGN",
              "WRITTEN"
            ],
            "type": "string"
          },
          "state": {
            "description": "State of the bulk send",
            "enum": [
              "AUTHORING",
              "IN_PROCESS"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status of the bulk send",
            "enum": [
              "AUTHORING",
              "IN_PROCESS",
              "CANCELLED",
              "COMPLETED",
              "EXPIRED",
              "PREFILL"
            ],
            "type": "string"
          },
          "vaultingInfo": {
            "$ref": "#/components/schemas/VaultingInfo",
            "description": "Vaulting properties that allows Acrobat Sign to securely store documents with a vault provider",
            "items": {
              "$ref": "#/components/schemas/VaultingInfo"
            }
          }
        },
        "required": [
          "childAgreementsInfo",
          "fileInfos",
          "name",
          "signatureType",
          "state"
        ],
        "type": "object"
      },
      "MegaSignCreationResponse": {
        "description": "A JSON that contains the id of the newly created bulk send",
        "properties": {
          "id": {
            "description": "Unique identifier of the bulk send parent agreement",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "MegaSignFormFields": {
        "description": "A JSON list of all of the fields for a bulk send parent agreement.",
        "properties": {
          "fields": {
            "description": "List of the form fields in an agreement",
            "items": {
              "$ref": "#/components/schemas/FormField"
            },
            "type": "array"
          }
        },
        "required": [
          "fields"
        ],
        "type": "object"
      },
      "MegaSignInfo": {
        "properties": {
          "ccs": {
            "description": "A list of one or more CCs that will be copied in the bulk send transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file ",
            "items": {
              "$ref": "#/components/schemas/MegaSignCcInfo"
            },
            "type": "array"
          },
          "childAgreementsInfo": {
            "$ref": "#/components/schemas/ChildAgreementsInfo",
            "description": "Info corresponding to each child agreement of the bulk send ",
            "items": {
              "$ref": "#/components/schemas/ChildAgreementsInfo"
            }
          },
          "createdDate": {
            "description": "Date when bulk send was created. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "expirationTime": {
            "description": "Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.",
            "format": "date",
            "type": "string"
          },
          "externalId": {
            "$ref": "#/components/schemas/ExternalId",
            "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Note: the externalId value is visible to all participants through the API, so should not be used to contain a sensitive token.",
            "items": {
              "$ref": "#/components/schemas/ExternalId"
            }
          },
          "fileInfos": {
            "description": "A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "type": "array"
          },
          "firstReminderDelay": {
            "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Cannot be updated in a PUT",
            "type": "integer"
          },
          "groupId": {
            "description": "The unique identifier of the group to which the bulk send will belong to when it is created. If it is not provided during agreement creation the primary group of the creator will be used",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of bulk send ",
            "type": "string"
          },
          "isDocumentRetentionApplied": {
            "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "lastEventDate": {
            "description": "The date of the last event that occurred for this bulk send.  Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "locale": {
            "description": "The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender",
            "type": "string"
          },
          "message": {
            "description": "An optional message to the participants, describing what is being sent or why their signature is required",
            "type": "string"
          },
          "name": {
            "description": "The name of the agreement that will be used to identify it, in emails, website and other places",
            "type": "string"
          },
          "numChildren": {
            "description": "The total number of bulk send children associated with the bulk send parent. If provided in POST, it will be ignored. If modified in PUT, it will throw error MODIFYING_IMMUTABLE_FIELDS",
            "type": "integer"
          },
          "participantSetsInfo": {
            "description": "Information about the bulk send participants set.",
            "items": {
              "$ref": "#/components/schemas/BulkParticipantSetInfo"
            },
            "type": "array"
          },
          "postSignOption": {
            "$ref": "#/components/schemas/PostSignOption",
            "description": "URL and associated properties for the success page the user will be taken to after completing the signing process",
            "items": {
              "$ref": "#/components/schemas/PostSignOption"
            }
          },
          "reminderFrequency": {
            "description": "Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used",
            "enum": [
              "DAILY_UNTIL_SIGNED",
              "WEEKDAILY_UNTIL_SIGNED",
              "EVERY_OTHER_DAY_UNTIL_SIGNED",
              "EVERY_THIRD_DAY_UNTIL_SIGNED",
              "EVERY_FIFTH_DAY_UNTIL_SIGNED",
              "WEEKLY_UNTIL_SIGNED"
            ],
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/MegaSignSecurityOption",
            "description": "Optional security parameters for the bulk send",
            "items": {
              "$ref": "#/components/schemas/MegaSignSecurityOption"
            }
          },
          "senderEmail": {
            "description": "Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored",
            "type": "string"
          },
          "signatureType": {
            "description": "Specifies the type of signature you would like to request - written or e-signature. The possible values are <br> ESIGN : Agreement needs to be signed electronically <br>,\nWRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system",
            "enum": [
              "ESIGN",
              "WRITTEN"
            ],
            "type": "string"
          },
          "state": {
            "description": "State of the bulk send",
            "enum": [
              "AUTHORING",
              "IN_PROCESS"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status of the bulk send",
            "enum": [
              "AUTHORING",
              "IN_PROCESS",
              "CANCELLED",
              "COMPLETED",
              "EXPIRED",
              "PREFILL"
            ],
            "type": "string"
          },
          "vaultingInfo": {
            "$ref": "#/components/schemas/VaultingInfo",
            "description": "Vaulting properties that allows Acrobat Sign to securely store documents with a vault provider",
            "items": {
              "$ref": "#/components/schemas/VaultingInfo"
            }
          }
        },
        "required": [
          "childAgreementsInfo",
          "fileInfos",
          "name",
          "signatureType",
          "state"
        ],
        "type": "object"
      },
      "MegaSignMembersInfo": {
        "properties": {
          "ccsInfo": {
            "description": "Information of CC participants of the bulk send.",
            "items": {
              "$ref": "#/components/schemas/CCParticipantInfo"
            },
            "type": "array"
          },
          "participantSets": {
            "description": "Information about the participant Sets.",
            "items": {
              "$ref": "#/components/schemas/DetailedParticipantSetInfo"
            },
            "type": "array"
          },
          "senderInfo": {
            "$ref": "#/components/schemas/SenderInfo",
            "description": "Information of the sender of the bulk send.",
            "items": {
              "$ref": "#/components/schemas/SenderInfo"
            }
          },
          "sharesInfo": {
            "description": "Information of the participants with whom the bulk send has been shared.",
            "items": {
              "$ref": "#/components/schemas/ShareParticipantInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "ccsInfo",
          "participantSets",
          "senderInfo",
          "sharesInfo"
        ],
        "type": "object"
      },
      "MegaSignRemindersResponse": {
        "properties": {
          "reminderInfoList": {
            "description": "A list of one or more reminders created on the bulk send parent specified by the unique identifier megasignId by the user invoking the API.",
            "items": {
              "$ref": "#/components/schemas/ReminderInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "reminderInfoList"
        ],
        "type": "object"
      },
      "MegaSignSecurityOption": {
        "properties": {
          "externalAuthenticationMethod": {
            "description": "The authentication method for the participants to have access to view and sign the document.",
            "enum": [
              "NONE",
              "WEB_IDENTITY",
              "KBA",
              "PASSWORD"
            ],
            "type": "string"
          },
          "externalPassword": {
            "description": "The secondary password that will be used to protect signing the document for internal signers. Note that Acrobat Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers",
            "type": "string"
          },
          "internalAuthenticationMethod": {
            "description": "The authentication method for the participants to have access to view and sign the document.",
            "enum": [
              "NONE",
              "WEB_IDENTITY",
              "KBA",
              "PASSWORD"
            ],
            "type": "string"
          },
          "internalPassword": {
            "description": "The secondary password that will be used to protect signing the document for external signers. Note that Acrobat Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers",
            "type": "string"
          },
          "openPassword": {
            "description": "The secondary password that will be used to secure the PDF document. Note that Acrobat Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties",
            "type": "string"
          }
        },
        "required": [
          "externalAuthenticationMethod",
          "internalAuthenticationMethod"
        ],
        "type": "object"
      },
      "MegaSignStateInfo": {
        "properties": {
          "megaSignCancellationInfo": {
            "$ref": "#/components/schemas/AgreementCancellationInfo",
            "description": "Cancellation information for the agreement. Mandatory while cancelling a bulk send",
            "items": {
              "$ref": "#/components/schemas/AgreementCancellationInfo"
            }
          },
          "state": {
            "description": "The state to which the bulk send is to be updated",
            "enum": [
              "IN_PROCESS",
              "CANCELLED"
            ],
            "type": "string"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "MegaSignView": {
        "properties": {
          "embeddedCode": {
            "description": "Embedded code of url of resource ",
            "type": "string"
          },
          "expiration": {
            "description": "Expiration of user url ",
            "format": "date",
            "type": "string"
          },
          "isCurrent": {
            "description": "True if this view is the current view",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the requested bulk send view",
            "enum": [
              "ACTIVITY_REPORT",
              "AUTHORING",
              "DOCUMENT",
              "MANAGE",
              "POST_CREATE",
              "PREFILL",
              "SIGNING",
              "ALL"
            ],
            "type": "string"
          },
          "url": {
            "description": "Url of resource location",
            "type": "string"
          }
        },
        "required": [
          "isCurrent",
          "name"
        ],
        "type": "object"
      },
      "MegaSignViewInfo": {
        "properties": {
          "commonViewConfiguration": {
            "$ref": "#/components/schemas/CommonViewConfiguration",
            "description": "Common view configuration for all the available views",
            "items": {
              "$ref": "#/components/schemas/CommonViewConfiguration"
            }
          },
          "name": {
            "description": "Name of the requested bulk send view",
            "enum": [
              "ACTIVITY_REPORT",
              "AUTHORING",
              "DOCUMENT",
              "MANAGE",
              "POST_CREATE",
              "PREFILL",
              "SIGNING",
              "ALL"
            ],
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "MegaSignViewResponse": {
        "properties": {
          "megaSignViewList": {
            "description": "List of bulk send views",
            "items": {
              "$ref": "#/components/schemas/MegaSignView"
            },
            "type": "array"
          }
        },
        "required": [
          "megaSignViewList"
        ],
        "type": "object"
      },
      "MegaSigns": {
        "properties": {
          "megaSignList": {
            "description": "An array of Send in Bulk parent agreements",
            "items": {
              "$ref": "#/components/schemas/MegaSign"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/PageInfo",
            "description": "Pagination information for navigating through the response",
            "items": {
              "$ref": "#/components/schemas/PageInfo"
            }
          }
        },
        "required": [
          "megaSignList",
          "page"
        ],
        "type": "object"
      },
      "MegasignEvent": {
        "properties": {
          "actingUserEmail": {
            "description": "Email address of the user that created the event",
            "type": "string"
          },
          "actingUserIpAddress": {
            "description": "The IP address of the user that created the event",
            "type": "string"
          },
          "actingUserName": {
            "description": "The name of the acting user",
            "type": "string"
          },
          "comment": {
            "description": "The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant",
            "type": "string"
          },
          "date": {
            "description": "The date of the audit event. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "description": {
            "description": "A description of the audit event",
            "type": "string"
          },
          "device": {
            "description": "The device used for the event.",
            "type": "string"
          },
          "deviceLocation": {
            "$ref": "#/components/schemas/DeviceLocation",
            "description": "Location of the device that generated the event (This value may be null due to limited privileges)",
            "items": {
              "$ref": "#/components/schemas/DeviceLocation"
            }
          },
          "devicePhoneNumber": {
            "description": "Phone number from the device used when the participation is completed on a mobile phone",
            "type": "string"
          },
          "digitalSignatureInfo": {
            "$ref": "#/components/schemas/DigitalSignatureInfo",
            "description": "This is present for ESIGNED events when the participation is signed digitally",
            "items": {
              "$ref": "#/components/schemas/DigitalSignatureInfo"
            }
          },
          "id": {
            "description": "The identifier for the event.",
            "type": "string"
          },
          "initiatingUserEmail": {
            "description": "Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
            "type": "string"
          },
          "initiatingUserName": {
            "description": "Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
            "type": "string"
          },
          "participantEmail": {
            "description": "Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
            "type": "string"
          },
          "participantId": {
            "description": "The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
            "type": "string"
          },
          "participantRole": {
            "description": "Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).",
            "enum": [
              "SIGNER",
              "DELEGATE_TO_SIGNER",
              "APPROVER",
              "DELEGATE_TO_APPROVER",
              "ACCEPTOR",
              "DELEGATE_TO_ACCEPTOR",
              "FORM_FILLER",
              "DELEGATE_TO_FORM_FILLER",
              "CERTIFIED_RECIPIENT",
              "DELEGATE_TO_CERTIFIED_RECIPIENT",
              "SHARE",
              "RESOURCE_SHARE",
              "SENDER",
              "NOTARY_SIGNER"
            ],
            "type": "string"
          },
          "reminderParticipants": {
            "description": "A list of one or more participants who received the reminders",
            "items": {
              "$ref": "#/components/schemas/ReminderParticipant"
            },
            "type": "array"
          },
          "replacedParticipantEmail": {
            "description": "Email of the user that was replaced by the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
            "type": "string"
          },
          "replacedParticipantName": {
            "description": "Full name of the user that was replaced by the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
            "type": "string"
          },
          "signerNewName": {
            "description": "Signer changed name at signing : new name used to sign.",
            "type": "string"
          },
          "signerOldName": {
            "description": "Signer changed name at signing : name used previous to signing.",
            "type": "string"
          },
          "signingReason": {
            "description": "Signing reason captured during ESIGN or DIGSIGN",
            "type": "string"
          },
          "synchronizationId": {
            "description": "A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)",
            "type": "string"
          },
          "type": {
            "description": "Type of bulk send event",
            "enum": [
              "AUTO_CANCELLED_CONVERSION_PROBLEM",
              "CREATED",
              "EXPIRED",
              "EMAIL_BOUNCED",
              "RECALLED",
              "SHARED",
              "READY_TO_VAULT",
              "VAULTED"
            ],
            "type": "string"
          },
          "vaultEventId": {
            "description": "The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)",
            "type": "string"
          },
          "vaultProviderName": {
            "description": "Name of the vault provider for the vault event (if vaulted, otherwise null)",
            "type": "string"
          },
          "versionId": {
            "description": "An ID which uniquely identifies the version of the document associated with this audit event",
            "type": "string"
          }
        },
        "required": [
          "actingUserEmail",
          "actingUserIpAddress",
          "actingUserName",
          "date",
          "description",
          "device",
          "deviceLocation",
          "devicePhoneNumber",
          "digitalSignatureInfo",
          "initiatingUserEmail",
          "initiatingUserName",
          "participantEmail",
          "participantId",
          "participantRole",
          "synchronizationId",
          "type",
          "vaultEventId",
          "vaultProviderName",
          "versionId"
        ],
        "type": "object"
      },
      "MegasignEventList": {
        "properties": {
          "events": {
            "description": "An array of event objects.",
            "items": {
              "$ref": "#/components/schemas/MegasignEvent"
            },
            "type": "array"
          }
        },
        "required": [
          "events"
        ],
        "type": "object"
      },
      "MyAgreementInfo": {
        "properties": {
          "accountSharers": {
            "description": "A list of account sharer in relation to the api caller and this resource.",
            "items": {
              "$ref": "#/components/schemas/AccountSharerInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "accountSharers"
        ],
        "type": "object"
      },
      "NameInfo": {
        "properties": {
          "firstName": {
            "description": "Recipient's first name",
            "type": "string"
          },
          "lastName": {
            "description": "Recipient's last name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Note": {
        "properties": {
          "note": {
            "description": "Content of Note field",
            "type": "string"
          }
        },
        "required": [
          "note"
        ],
        "type": "object"
      },
      "PageImageUrl": {
        "properties": {
          "pageNumber": {
            "description": "Page number within the document.",
            "type": "integer"
          },
          "url": {
            "description": "An image url.",
            "type": "string"
          }
        },
        "required": [
          "pageNumber",
          "url"
        ],
        "type": "object"
      },
      "PageInfo": {
        "properties": {
          "nextCursor": {
            "description": "Used to navigate to the next page. If not returned, there are no further pages.",
            "type": "string"
          }
        },
        "required": [
          "nextCursor"
        ],
        "type": "object"
      },
      "ParticipantSecurityOption": {
        "properties": {
          "authenticationMethod": {
            "description": "The authentication method for the participants to have access to view and sign the document. When replacing a participant that has PASSWORD or PHONE authentication specified, you must supply a password or phone number for the new participant, and you cannot change the authentication method",
            "enum": [
              "NONE",
              "PASSWORD",
              "PHONE",
              "KBA",
              "WEB_IDENTITY",
              "ADOBE_SIGN",
              "GOV_ID",
              "DIG_ID"
            ],
            "type": "string"
          },
          "digAuthInfo": {
            "$ref": "#/components/schemas/DigAuthInfo",
            "description": "Digital Identity Gateway Provider information.",
            "items": {
              "$ref": "#/components/schemas/DigAuthInfo"
            }
          },
          "nameInfo": {
            "$ref": "#/components/schemas/NameInfo",
            "description": "Recipient's full name",
            "items": {
              "$ref": "#/components/schemas/NameInfo"
            }
          },
          "notaryAuthentication": {
            "description": "The authentication method of the notary participant to the notary",
            "enum": [
              "MULTI_FACTOR_AUTHENTICATION",
              "NONE"
            ],
            "type": "string"
          },
          "password": {
            "description": "The password required for the participant to view and sign the document. Note that Acrobat Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. The password will not be returned in GET call. When replacing a participant that has PASSWORD authentication specified, you must supply a password for the new participant.",
            "type": "string"
          },
          "phoneInfo": {
            "$ref": "#/components/schemas/PhoneInfo",
            "description": "The phoneInfo required for the participant to view and sign the document",
            "items": {
              "$ref": "#/components/schemas/PhoneInfo"
            }
          }
        },
        "required": [
          "authenticationMethod"
        ],
        "type": "object"
      },
      "PhoneInfo": {
        "properties": {
          "countryCode": {
            "description": "The numeric country calling code (ISD code) required for the participant to view and sign the document if authentication type is PHONE",
            "type": "string"
          },
          "countryIsoCode": {
            "description": "The country ISO Alpha-2 code required for the participant to view and sign the document if authentication method is PHONE",
            "type": "string"
          },
          "phone": {
            "description": "The phone number required for the participant to view and sign the document if authentication method is PHONE. When replacing a participant that has PHONE authentication specified, you must supply a phone number for the new participant.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostSignOption": {
        "properties": {
          "redirectDelay": {
            "description": "The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Acrobat Sign success message, and then after a delay will be redirected to your success page",
            "type": "integer"
          },
          "redirectUrl": {
            "description": "A publicly accessible url to which the user will be sent after successfully completing the signing process",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReminderCreationResult": {
        "properties": {
          "id": {
            "description": "An identifier of the reminder resource created on the server. If provided in POST or PUT, it will be ignored",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReminderInfo": {
        "properties": {
          "allUnsigned": {
            "description": "If true, set a reminder on all participants (non-CCs and non-sharees) that still need to sign the bulk send agreement",
            "type": "boolean"
          },
          "firstReminderDelay": {
            "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Cannot be updated in a PUT",
            "type": "integer"
          },
          "frequency": {
            "description": "The frequency at which reminder will be sent until the agreement is completed.<br>If frequency is not provided, the reminder will be sent once (if the agreement is available at the specified time) with the delay based on the firstReminderDelay field and will never repeat again. If the agreement is not available at that time, reminder will not be sent. Cannot be updated in a PUT",
            "enum": [
              "DAILY_UNTIL_SIGNED",
              "WEEKDAILY_UNTIL_SIGNED",
              "EVERY_OTHER_DAY_UNTIL_SIGNED",
              "EVERY_THIRD_DAY_UNTIL_SIGNED",
              "EVERY_FIFTH_DAY_UNTIL_SIGNED",
              "WEEKLY_UNTIL_SIGNED",
              "ONCE"
            ],
            "type": "string"
          },
          "lastSentDate": {
            "description": "The date when the reminder was last sent. Only provided in GET. Cannot be provided in POST request. If provided in POST, it will be ignored. Cannot be updated in a PUT. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "nextSentDate": {
            "description": "The date when the reminder is scheduled to be sent next. When provided in POST request, frequency needs to be ONCE (or not specified), startReminderCounterFrom needs to be REMINDER_CREATION (or not specified) and firstReminderDelay needs to be 0 (or not specified). Cannot be updated in a PUT. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "note": {
            "description": "An optional message sent to the recipients, describing why their participation is required",
            "type": "string"
          },
          "recipientParticipantIds": {
            "description": "A list of one or more participant IDs that the reminder should be sent to. These must be sharees or cc's on the bulk send. In order to remind any other participant who has not signed, use the allUnsigned boolean parameter.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "reminderId": {
            "description": "An identifier of the reminder resource created on the server. If provided in POST or PUT, it will be ignored",
            "type": "string"
          },
          "startReminderCounterFrom": {
            "description": "Reminder can be sent based on when the agreement becomes available or when the reminder is created<br>AGREEMENT_AVAILABILITY: If the agreement is not available to the participant at the time of reminder creation, the reminder will be sent for the first time, only when the agreement becomes available to the participant taking the firstReminderDelay into account. Subsequent reminders will be sent based on the frequency specified.  If the agreement is already available to the participant at the time of reminder creation, the first reminder will be sent after the delay specified by firstReminderDelay from the reminder creation time.<br>REMINDER_CREATION: The first reminder will be sent after the delay specified by firstReminderDelay from the reminder creation time only if the agreement is available at that time. Subsequent reminders will be triggered based on the frequency specified and will be sent only if the agreement is available at that time.  For agreements in authoring state, creating reminder with startReminderCounterFrom as REMINDER_CREATION is not allowed.<br>Note : If firstReminderDelay, frequency and startReminderCounterFrom fields are not specified in POST, reminder will be sent right now if the agreement is available. If agreement is not available, an error will be thrown.  Cannot be updated in a PUT",
            "enum": [
              "AGREEMENT_AVAILABILITY",
              "REMINDER_CREATION"
            ],
            "type": "string"
          },
          "status": {
            "description": "Current status of the reminder.  The only valid update in a PUT is from ACTIVE to CANCELED.  Must be provided as ACTIVE in a POST.",
            "enum": [
              "ACTIVE",
              "CANCELED",
              "COMPLETE"
            ],
            "type": "string"
          }
        },
        "required": [
          "recipientParticipantIds",
          "status"
        ],
        "type": "object"
      },
      "ReminderParticipant": {
        "properties": {
          "email": {
            "description": "The email address of the participant",
            "type": "string"
          },
          "name": {
            "description": "The full name of the participant",
            "type": "string"
          },
          "participantId": {
            "description": "The unique identifier of the participant",
            "type": "string"
          }
        },
        "required": [
          "email",
          "participantId"
        ],
        "type": "object"
      },
      "SenderInfo": {
        "properties": {
          "company": {
            "description": "Company of the sender of the bulk send, if available.",
            "type": "string"
          },
          "createdDate": {
            "description": "The date when the sender was added. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
            "format": "date",
            "type": "string"
          },
          "email": {
            "description": "Email of the sender of the bulk send.",
            "type": "string"
          },
          "hidden": {
            "description": "True if the bulk send is hidden for the user that is calling the API. Only returned if self is true.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the sender of the bulk send, if available.",
            "type": "string"
          },
          "participantId": {
            "description": " The unique identifier of the sender of the bulk send.",
            "type": "string"
          },
          "self": {
            "description": "True if the sender of the bulk send is the same user that is calling the API.",
            "type": "boolean"
          },
          "status": {
            "description": "The bulk send status with respect to the participant set.",
            "enum": [
              "CANCELLED",
              "COMPLETED",
              "EXPIRED",
              "NOT_YET_VISIBLE",
              "WAITING_FOR_AUTHORING",
              "WAITING_FOR_MY_DELEGATION",
              "WAITING_FOR_MY_ACCEPTANCE",
              "WAITING_FOR_MY_ACKNOWLEDGEMENT",
              "WAITING_FOR_MY_APPROVAL",
              "WAITING_FOR_MY_FORM_FILLING",
              "WAITING_FOR_MY_SIGNATURE",
              "WAITING_FOR_OTHERS"
            ],
            "type": "string"
          },
          "userId": {
            "description": "The user ID of the sender. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
            "type": "string"
          }
        },
        "required": [
          "company",
          "email",
          "hidden",
          "name",
          "participantId",
          "self",
          "status"
        ],
        "type": "object"
      },
      "ShareCreationInfo": {
        "properties": {
          "email": {
            "description": "The email address of the member with whom the agreement will be shared",
            "type": "string"
          },
          "message": {
            "description": "Optional message to the sharee",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "ShareCreationInfoList": {
        "properties": {
          "shareCreationInfo": {
            "description": "List of ShareCreationInfo",
            "items": {
              "$ref": "#/components/schemas/ShareCreationInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "shareCreationInfo"
        ],
        "type": "object"
      },
      "ShareCreationResponse": {
        "properties": {
          "email": {
            "description": "The email address that was requested",
            "type": "string"
          },
          "participantId": {
            "description": "The unique identifier of the participant",
            "type": "string"
          }
        },
        "required": [
          "email",
          "participantId"
        ],
        "type": "object"
      },
      "ShareCreationResponseList": {
        "properties": {
          "shareCreationResponseList": {
            "description": "List of ShareCreationResponse",
            "items": {
              "$ref": "#/components/schemas/ShareCreationResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "shareCreationResponseList"
        ],
        "type": "object"
      },
      "ShareParticipantInfo": {
        "properties": {
          "company": {
            "description": "Company of the sharee participant of the bulk send, if available.",
            "type": "string"
          },
          "email": {
            "description": "Email of the sharee participant of the bulk send.",
            "type": "string"
          },
          "hidden": {
            "description": "True if the bulk send parent is hidden for the user that is calling the API. Only returned if self is true.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the sharee participant of the bulk send, if available.",
            "type": "string"
          },
          "participantId": {
            "description": "The unique identifier of the sharee participant of the bulk send.",
            "type": "string"
          },
          "self": {
            "description": "True if the Share participant of the bulk send is the same user that is calling the API.",
            "type": "boolean"
          },
          "sharerParticipantId": {
            "description": "The unique identifier of the participant who shared the bulk send.",
            "type": "string"
          }
        },
        "required": [
          "company",
          "email",
          "hidden",
          "name",
          "participantId",
          "self",
          "sharerParticipantId"
        ],
        "type": "object"
      },
      "URLFileInfo": {
        "properties": {
          "mimeType": {
            "description": "The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed",
            "type": "string"
          },
          "name": {
            "description": "The original system file name of the document being sent",
            "type": "string"
          },
          "url": {
            "description": "A publicly accessible URL for retrieving the raw file content",
            "type": "string"
          }
        },
        "required": [
          "mimeType",
          "name",
          "url"
        ],
        "type": "object"
      },
      "VaultingInfo": {
        "properties": {
          "enabled": {
            "description": "For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "VisibilityInfo": {
        "properties": {
          "visibility": {
            "description": "Specifies the visibility. The possible values are HIDE or SHOW",
            "enum": [
              "SHOW",
              "HIDE"
            ],
            "type": "string"
          }
        },
        "required": [
          "visibility"
        ],
        "type": "object"
      }
    }
  }
}
