{
  "openapi": "3.0.0",
  "info": {
    "title": "secure.na3.adobesign.com",
    "version": "6.0.0"
  },
  "servers": [
    {
      "url": "https://secure.na3.adobesign.com/api/rest/v6"
    }
  ],
  "paths": {
    "/widgets": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The group identifier, as returned by the group creation API or retrieved from the API to fetch groups.",
            "in": "query",
            "name": "groupId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query parameter to fetch all the hidden web forms along with the visible web forms. Default value is false.",
            "in": "query",
            "name": "showHiddenWidgets",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Used to navigate through the pages. If not provided, returns the first page.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "An optional field to provide the comma-separated list of parent domain urls where the returned URLs may be iframed. If provided with non-empty and valid list of parent domain urls, it will be used to allow framing for the same. By default the value is null and the Acrobat Sign pages will not be viewable in an iframe.",
            "in": "query",
            "name": "frameParent",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWidgets"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgets",
        "summary": "Retrieves web forms for a user."
      },
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_write\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetCreationResponse"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_write"
            ]
          }
        ],
        "description": "This is a primary endpoint which is used to create a new web form. You can create a web form in one of the 3 mentioned states: a) <b>DRAFT</b> - to incrementally build the web form, b) <b>AUTHORING</b> - to add/edit form fields in the web form, c) <b>ACTIVE</b> - to immediately host the web form. You can use the PUT /widgets/{widgetId}/state endpoint to transition a web form between the above mentioned states. An allowed transition would follow the any of the following sequences: DRAFT->AUTHORING->ACTIVE, ACTIVE<->INACTIVE, DRAFT->CANCELLED.",
        "operationId": "createWidget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WidgetCreationInfoV6"
              }
            }
          },
          "description": "Information about the web form that you want to create.",
          "required": true
        },
        "summary": "Creates a web form and and returns the widgetId in the response to the client."
      }
    },
    "/widgets/{widgetId}": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchedWidgetInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgetInfo",
        "summary": "Retrieves the details of a web form."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_write\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_write"
            ]
          }
        ],
        "operationId": "updateWidget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WidgetInfo"
              }
            }
          },
          "description": "Web Form update information object.",
          "required": true
        },
        "summary": "Updates a web form."
      }
    },
    "/widgets/{widgetId}/agreements": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query parameter to fetch all the hidden agreements along with the visible agreements. Default value is false.",
            "in": "query",
            "name": "showHiddenAgreements",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Used to navigate through the pages. If not provided, returns the first page.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetAgreements"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgetAgreements",
        "summary": "Retrieves agreements for the web form."
      }
    },
    "/widgets/{widgetId}/auditTrail": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              },
              "application/pdf;encoding=base64": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgetAuditTrail",
        "summary": "Retrieves the audit trail of a web form identified by widgetId."
      }
    },
    "/widgets/{widgetId}/combinedDocument": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version identifier of web form as provided by the API which retrieves information of a specific web form. If not provided then latest version will be used.",
            "in": "query",
            "name": "versionId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the participant to be used to retrieve documents. If not mentioned, the participation of api caller is used.",
            "in": "query",
            "name": "participantId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to YES, attach an audit report to the signed Web Form PDF. Default value is false",
            "in": "query",
            "name": "attachAuditReport",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              },
              "application/pdf;encoding=base64": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgetCombinedDocument",
        "summary": "Retrieves a single combined PDF document for the documents associated with a web form."
      }
    },
    "/widgets/{widgetId}/combinedDocument/url": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to true, attach an audit report to the web form PDF. The default value is false.",
            "in": "query",
            "name": "attachAuditReport",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentUrl"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgetCombinedDocumentUrl",
        "summary": "Retrieves url of all visible pages of all the documents associated with a web form."
      }
    },
    "/widgets/{widgetId}/documents": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version identifier of web form as provided by the API which retrieves information of a specific web form. If not provided then latest version will be used.",
            "in": "query",
            "name": "versionId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the participant to be used to retrieve documents. If not mentioned, the participation of api caller is used.",
            "in": "query",
            "name": "participantId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDocuments"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgetDocuments",
        "summary": "Retrieves the IDs of the documents associated with web form."
      }
    },
    "/widgets/{widgetId}/documents/imageUrls": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A comma separated list of image sizes i.e. {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}. Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT}. ",
            "in": "query",
            "name": "imageSizes",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to true, returns only image availability. Else, returns both image urls and its availability.",
            "in": "query",
            "name": "showImageAvailabilityOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicDocumentsImageUrlsInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgetAllDocumentsImageUrls",
        "summary": "Retrieves image urls of all visible pages of a document associated with a web form."
      }
    },
    "/widgets/{widgetId}/documents/{documentId}": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The document identifier, as retrieved from the API which fetches the documents of a specified web form",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              },
              "application/pdf;encoding=base64": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgetDocumentInfo",
        "summary": "Retrieves the file stream of a document of a web form."
      }
    },
    "/widgets/{widgetId}/events": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetEventList"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getEvents",
        "summary": "Retrieves the events information for a web form."
      }
    },
    "/widgets/{widgetId}/formData": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used to navigate through the pages. If not provided, returns the first page.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              },
              "text/csv": {
                "schema": {
                  "format": "byte",
                  "type": "string"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "description": "CSV/JSON file stream containing form data information",
        "operationId": "getWidgetFormData",
        "summary": "Retrieves data entered by the user into interactive form fields at the time they signed the web form"
      }
    },
    "/widgets/{widgetId}/formFields": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetFormFields"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgetFormFields",
        "summary": "Retrieves form fields for a web form."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_write\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetFormFields"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_write"
            ]
          }
        ],
        "operationId": "updateFormFields",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormFieldPutInfo"
              }
            }
          },
          "description": "List of form fields to set for web form",
          "required": true
        },
        "summary": "Updates details of form fields of a web form."
      }
    },
    "/widgets/{widgetId}/me": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyAgreementInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgetInfoForUser",
        "summary": "Retrieves the web form information related to the api caller"
      }
    },
    "/widgets/{widgetId}/me/note": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgetNoteForApiUser",
        "summary": "Retrieves the latest note of a web form for the API user."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_write\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_write"
            ]
          }
        ],
        "operationId": "updateWidgetNoteForApiUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          },
          "description": "The note to be associated with the web form.",
          "required": true
        },
        "summary": "Updates the latest note of a web form for the API user."
      }
    },
    "/widgets/{widgetId}/me/visibility": {
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_write\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_write"
            ]
          }
        ],
        "operationId": "updateWidgetVisibility",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisibilityInfo"
              }
            }
          },
          "description": "Information to update visibility of web form",
          "required": true
        },
        "summary": "Updates the visibility of web form."
      }
    },
    "/widgets/{widgetId}/members": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetMembersInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getAllWidgetMembers",
        "summary": "Retrieves detailed member info along with IDs for different types of participants."
      }
    },
    "/widgets/{widgetId}/members/ccParticipants": {
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_write\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_write"
            ]
          }
        ],
        "operationId": "updateWidgetCCParticipantEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CcInfos"
              }
            }
          },
          "description": "List of new CC emails",
          "required": true
        },
        "summary": "Updates the Email of CC participant of a Web Form identified by WidgetId in the path."
      }
    },
    "/widgets/{widgetId}/members/participantSets/{participantSetId}": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant set identifier",
            "in": "path",
            "name": "participantSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedWidgetParticipantSetInfo"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getParticipantSet",
        "summary": "Retrieves the participant set of a web form identified by widgetId in the path."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_write\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant set identifier",
            "in": "path",
            "name": "participantSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_write"
            ]
          }
        ],
        "operationId": "updateWidgetParticipantSetEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetailedWidgetParticipantSetInfo"
              }
            }
          },
          "description": "Information about the Participant that is to be Updated.",
          "required": true
        },
        "summary": "Updates the Email of participant set of a Web Form identified by WidgetId in the path."
      }
    },
    "/widgets/{widgetId}/members/participantSets/{participantSetId}/participants/{participantId}/securityOptions": {
      "get": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
            "in": "header",
            "name": "If-None-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant set identifier",
            "in": "path",
            "name": "participantSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant identifier",
            "in": "path",
            "name": "participantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipantSecurityOption"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read"
            ]
          }
        ],
        "operationId": "getWidgetSecurityOptionsForParticipation",
        "summary": "Retrieves the security options for a particular participant."
      },
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_write\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant set identifier",
            "in": "path",
            "name": "participantSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The participant identifier",
            "in": "path",
            "name": "participantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_write"
            ]
          }
        ],
        "operationId": "updateWidgetSecurityOptionsForParticipation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantSecurityOption"
              }
            }
          },
          "description": "Security options that apply to the participant",
          "required": true
        },
        "summary": "Updates the security options for a particular participant."
      }
    },
    "/widgets/{widgetId}/members/share": {
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_write\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareCreationResponseList"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_write"
            ]
          }
        ],
        "operationId": "createShareOnWidget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareCreationInfoList"
              }
            }
          },
          "description": "List of agreement share creation information objects.",
          "required": true
        },
        "summary": "Share a web form with someone."
      }
    },
    "/widgets/{widgetId}/state": {
      "put": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_write\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
            "in": "header",
            "name": "If-Match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_write"
            ]
          }
        ],
        "description": "This endpoint can be used by creator of the web form to transition between the states of web form. An allowed transition would follow any of the following sequence :  DRAFT->AUTHORING->ACTIVE, ACTIVE<->INACTIVE, DRAFT->CANCELLED.",
        "operationId": "updateWidgetState",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WidgetStateInfo"
              }
            }
          },
          "required": true
        },
        "summary": "Updates the state of a web form identified by widgetId in the path."
      }
    },
    "/widgets/{widgetId}/views": {
      "post": {
        "parameters": [
          {
            "description": "An <a href=\"#\" class=\"link-oauth\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-widget_read\">widget_read</a> - web form read is always required</li><li style='list-style-type: square'><a href=\"#\" class=\"link-oauth\" data-link-scope=\"scope-user_login\">user_login</a> - Required additionally if the autoLoginUser parameter is set to true</li></ul>in the format <b>'Bearer {accessToken}'.",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
            "in": "header",
            "name": "x-api-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
            "in": "header",
            "name": "x-on-behalf-of-user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
            "in": "path",
            "name": "widgetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetViews"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "security": [
          {
            "oauth2": [
              "widget_read",
              "user_login"
            ]
          }
        ],
        "operationId": "getWidgetView",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WidgetViewInfo"
              }
            }
          },
          "description": "Name of the required view and its desired configuration.",
          "required": true
        },
        "summary": "Retrieves the requested views for a web form."
      }
    }
  },
  "components": {
    "schemas": {
      "AccountSharerInfo": {
        "properties": {
          "email": {
            "description": "The email address of the user",
            "type": "string"
          },
          "fullName": {
            "description": "Full name of this account sharer.",
            "type": "string"
          },
          "permissions": {
            "description": "A list of permissions given for this account sharing.",
            "items": {
              "enum": [
                "VIEW",
                "SEND",
                "MODIFY"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "userId": {
            "description": "A unique identifier of the user resource for REST APIs as issued by Acrobat Sign.",
            "type": "string"
          }
        },
        "required": [
          "email",
          "fullName",
          "permissions",
          "userId"
        ],
        "type": "object"
      },
      "BasicDocumentsImageUrlsInfo": {
        "properties": {
          "documentsImageUrlsInfo": {
            "description": "A list of original document image URLs info.",
            "items": {
              "$ref": "#/components/schemas/DocumentImageUrlsInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "documentsImageUrlsInfo"
        ],
        "type": "object"
      },
      "CCParticipantInfo": {
        "properties": {
          "company": {
            "description": "Company of the CC participant, if available.",
            "type": "string"
          },
          "email": {
            "description": "Email of the CC participant of the web form",
            "type": "string"
          },
          "hidden": {
            "description": "True if the web form is hidden for the user that is calling the API. Only returned if self is true.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the CC participant, if available.",
            "type": "string"
          },
          "participantId": {
            "description": " The unique identifier of the CC participant of the web form.",
            "type": "string"
          },
          "self": {
            "description": "True if the CC participant of the web form is the same user that is calling the API.",
            "type": "boolean"
          }
        },
        "required": [
          "company",
          "email",
          "hidden",
          "name",
          "participantId",
          "self"
        ],
        "type": "object"
      },
      "CcInfos": {
        "properties": {
          "ccInfoList": {
            "description": "List of emails of all the CC participant of the web form",
            "items": {
              "$ref": "#/components/schemas/WidgetCcInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "ccInfoList"
        ],
        "type": "object"
      },
      "CommonViewConfiguration": {
        "properties": {
          "autoLoginUser": {
            "description": "Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false",
            "type": "boolean"
          },
          "frameParent": {
            "description": "An optional field to provide the comma-separated list of parent domain urls where the returned URLs may be iframed. If provided with non-empty and valid list of parent domain urls, it will be used to allow framing for the same. By default the value is null and the Acrobat Sign pages will not be viewable in an iframe. frameParent will be ignored for SIGNING view",
            "type": "string"
          },
          "locale": {
            "description": "Message template locale",
            "type": "string"
          },
          "noChrome": {
            "description": "No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DetailedParticipantInfo": {
        "properties": {
          "company": {
            "description": "The company of the participant, if available. This cannot be changed as part of the PUT call.",
            "type": "string"
          },
          "createdDate": {
            "description": "The date when the participant was added. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
            "format": "date",
            "type": "string"
          },
          "email": {
            "description": "Email of the participant. In case of modifying a participant set (PUT) this is a required field. In case of GET, this is the required field and will always be returned unless it is a fax workflow (legacy agreements) that were created using fax as input",
            "type": "string"
          },
          "hidden": {
            "description": "True if the agreement is hidden for the user that is calling the API. Only returned if self is true. Ignored (not required) if modifying a participant (PUT).",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the participant. This will be returned as part of Get call.",
            "type": "string"
          },
          "name": {
            "description": "The name of the participant, if available. This cannot be changed as part of the PUT call.",
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/ParticipantSecurityOption",
            "description": "Security options that apply to the participant.",
            "items": {
              "$ref": "#/components/schemas/ParticipantSecurityOption"
            }
          },
          "self": {
            "description": "True if this participant is the same user that is calling the API. Returned as part of Get. Ignored (not required) if modifying a participant set (PUT).",
            "type": "boolean"
          },
          "userId": {
            "description": "The user ID of the participant. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
            "type": "string"
          }
        },
        "required": [
          "email",
          "id",
          "securityOption"
        ],
        "type": "object"
      },
      "DetailedWidgetParticipantSetInfo": {
        "properties": {
          "id": {
            "description": "The unique identifier of the participant set. This cannot be changed as part of the PUT call.",
            "type": "string"
          },
          "memberInfos": {
            "description": "Array of ParticipantInfo objects, containing participant-specific data (e.g. email). All participants in the array belong to the same set",
            "items": {
              "$ref": "#/components/schemas/DetailedParticipantInfo"
            },
            "type": "array"
          },
          "order": {
            "description": "Index indicating sequential signing group (specified for hybrid routing). This cannot be changed as part of the PUT call.",
            "type": "integer"
          },
          "providerParticipantSetInfo": {
            "$ref": "#/components/schemas/ProviderParticipantSetInfo",
            "description": "Represents the attributes related to a unknown participant's provider.",
            "items": {
              "$ref": "#/components/schemas/ProviderParticipantSetInfo"
            }
          },
          "role": {
            "description": "Role assumed by all participants in the set (signer, approver etc.). This cannot be changed as part of the PUT call.",
            "enum": [
              "SIGNER",
              "SENDER",
              "APPROVER",
              "ACCEPTOR",
              "CERTIFIED_RECIPIENT",
              "FORM_FILLER",
              "DELEGATE_TO_SIGNER",
              "DELEGATE_TO_APPROVER",
              "DELEGATE_TO_ACCEPTOR",
              "DELEGATE_TO_CERTIFIED_RECIPIENT",
              "DELEGATE_TO_FORM_FILLER",
              "SHARE",
              "NOTARY_SIGNER",
              "ELECTRONIC_SEALER"
            ],
            "type": "string"
          }
        },
        "required": [
          "memberInfos",
          "order",
          "role"
        ],
        "type": "object"
      },
      "DigAuthInfo": {
        "properties": {
          "providerDesc": {
            "description": "Digital Identity Gateway Provider Description. This will be ignored as part of POST or PUT calls.",
            "type": "string"
          },
          "providerId": {
            "description": "Digital Identity Gateway Provider Id. When replacing a participant that has DIG_ID authentication specified, you must supply a provider id for the new participant.",
            "type": "string"
          },
          "providerName": {
            "description": "Digital Identity Gateway Provider Name. This will be ignored as part of POST or PUT calls.",
            "type": "string"
          }
        },
        "required": [
          "providerId"
        ],
        "type": "object"
      },
      "DigitalSignatureInfo": {
        "properties": {
          "certificateIssuer": {
            "description": "Certificate Issuer for digital signing",
            "type": "string"
          },
          "cloudProviderIp": {
            "description": "Cloud Provider IP for digital signing",
            "type": "string"
          },
          "cloudProviderUrl": {
            "description": "Cloud Provider URL for digital signing",
            "type": "string"
          },
          "company": {
            "description": "Company name captured during digital signing",
            "type": "string"
          },
          "email": {
            "description": "Email captured during digital signing",
            "type": "string"
          },
          "name": {
            "description": "Name captured during digital signing",
            "type": "string"
          }
        },
        "required": [
          "company",
          "email",
          "name"
        ],
        "type": "object"
      },
      "DisplayParticipantInfo": {
        "properties": {
          "company": {
            "description": "Displays the name of the company of the user, if available",
            "type": "string"
          },
          "email": {
            "description": "Displays the email of the user",
            "type": "string"
          },
          "fullName": {
            "description": "Displays the full name of the user, if available. ",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "DisplayWidgetParticipantSetInfo": {
        "properties": {
          "displayUserSetMemberInfos": {
            "description": "Displays the info about user set",
            "items": {
              "$ref": "#/components/schemas/DisplayParticipantInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "displayUserSetMemberInfos"
        ],
        "type": "object"
      },
      "Document": {
        "properties": {
          "createdDate": {
            "description": "The date the document was created",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "ID of the document. In case of PUT call, this is the only field that is accepted in Document structure. Name and mimeType are ignored in case of PUT call",
            "type": "string"
          },
          "label": {
            "description": "Label of the document",
            "type": "string"
          },
          "mimeType": {
            "description": "mimeType of the original file. This is returned in GET but not accepted back in PUT",
            "type": "string"
          },
          "name": {
            "description": "Name of the original document uploaded. This is returned in GET but not accepted back in PUT",
            "type": "string"
          },
          "numPages": {
            "description": "Number of pages in the document",
            "type": "integer"
          }
        },
        "required": [
          "createdDate",
          "id",
          "label",
          "numPages"
        ],
        "type": "object"
      },
      "DocumentImageUrls": {
        "properties": {
          "imageSize": {
            "description": "ImageSize corresponding to the imageUrl returned ",
            "enum": [
              "FIXED_WIDTH_50px",
              "FIXED_WIDTH_250px",
              "FIXED_WIDTH_675px",
              "ZOOM_50_PERCENT",
              "ZOOM_75_PERCENT",
              "ZOOM_100_PERCENT",
              "ZOOM_125_PERCENT",
              "ZOOM_150_PERCENT",
              "ZOOM_200_PERCENT"
            ],
            "type": "string"
          },
          "imageURLs": {
            "description": "A list of image url (one per page).",
            "items": {
              "$ref": "#/components/schemas/PageImageUrl"
            },
            "type": "array"
          },
          "imagesAvailable": {
            "description": "true if images for the associated image size is available, else false.",
            "type": "boolean"
          }
        },
        "required": [
          "imageURLs"
        ],
        "type": "object"
      },
      "DocumentImageUrlsInfo": {
        "properties": {
          "documentId": {
            "description": "Id of the document",
            "type": "string"
          },
          "documentImageUrlsList": {
            "description": "A list of documents image URLs.",
            "items": {
              "$ref": "#/components/schemas/DocumentImageUrls"
            },
            "type": "array"
          }
        },
        "required": [
          "documentId",
          "documentImageUrlsList"
        ],
        "type": "object"
      },
      "DocumentUrl": {
        "properties": {
          "url": {
            "description": "Secure URL of the document",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "FetchedWidgetInfo": {
        "properties": {
          "additionalParticipantSetsInfo": {
            "description": "List of all the participants in the web form except web form signer",
            "items": {
              "$ref": "#/components/schemas/WidgetAdditionalParticipationSetInfo"
            },
            "type": "array"
          },
          "authFailureInfo": {
            "$ref": "#/components/schemas/WidgetRedirectionInfo",
            "description": "URL and associated properties for the error page the web form signer will be taken after failing to authenticate",
            "items": {
              "$ref": "#/components/schemas/WidgetRedirectionInfo"
            }
          },
          "ccs": {
            "description": "A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email when the final agreement created through web form is signed. The email addresses will also receive a copy of the document, attached as a PDF file",
            "items": {
              "$ref": "#/components/schemas/WidgetCcInfo"
            },
            "type": "array"
          },
          "completionInfo": {
            "$ref": "#/components/schemas/WidgetRedirectionInfo",
            "description": "URL and associated properties for the success page the web form signer will be taken to after performing desired action on the web form",
            "items": {
              "$ref": "#/components/schemas/WidgetRedirectionInfo"
            }
          },
          "createdDate": {
            "description": "Date when web form was created. If provided in POST, it will simply be ignored. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "creatorEmail": {
            "description": "Email of web form creator. Only returned in GET response. Cannot be provided in POST/PUT request. If provided in POST, it will simply be ignored",
            "type": "string"
          },
          "creatorName": {
            "description": "Name of web form creator. It will be ignored in POST/PUT requests",
            "type": "string"
          },
          "fileInfos": {
            "description": "A list of one or more files (or references to files) that will be used to create the web form. If more than one file is provided, they will be combined before the web form is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "type": "array"
          },
          "groupId": {
            "description": "The ID of the group to which the web form belongs to. If not provided during creation, primary group of the creator will be used",
            "type": "string"
          },
          "id": {
            "description": "A resource identifier that can be used to uniquely identify the web form in other apis. If provided in POST, it will simply be ignored",
            "type": "string"
          },
          "isDocumentRetentionApplied": {
            "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "lastEventDate": {
            "description": "The date of the last event that occurred for this web form.  Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "locale": {
            "description": "The locale associated with this web form - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the web form creator",
            "type": "string"
          },
          "name": {
            "description": "The name of the web form that will be used to identify it, in emails, website and other places",
            "type": "string"
          },
          "ownerEmail": {
            "description": "Email of web form owner. It will be ignored in POST/PUT requests",
            "type": "string"
          },
          "ownerId": {
            "description": "The unique identifier of the web form owner. It will be ignored in POST requests",
            "type": "string"
          },
          "ownerName": {
            "description": "Name of web form owner. It will be ignored in POST/PUT requests",
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/SecurityOption",
            "description": "Secondary security parameters for the web form",
            "items": {
              "$ref": "#/components/schemas/SecurityOption"
            }
          },
          "state": {
            "description": "The state in which the web form should land. For example in order to create a web form in DRAFT state, field should be DRAFT. The state field will never get returned in GET /widgets/{ID} and will be ignored if provided in PUT /widgets/{ID} call. The eventual status of the web form can be obtained from GET /widgets/ID",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "AUTHORING"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status of the Web Form. If provided in POST, it will simply be ignored",
            "enum": [
              "DRAFT",
              "AUTHORING",
              "ACTIVE",
              "DOCUMENTS_NOT_YET_PROCESSED",
              "DISABLED",
              "DISCARDED"
            ],
            "type": "string"
          },
          "vaultingInfo": {
            "$ref": "#/components/schemas/VaultingInfo",
            "description": "Vaulting properties that allows Acrobat Sign to securely store documents with a vault provider",
            "items": {
              "$ref": "#/components/schemas/VaultingInfo"
            }
          },
          "widgetInActiveInfo": {
            "$ref": "#/components/schemas/WidgetInActiveInfo",
            "description": "The custom message which will be displayed to the user or the URL to which user will be redirected when the web form is accessed in a disabled state. This can only be specified in PUT request",
            "items": {
              "$ref": "#/components/schemas/WidgetInActiveInfo"
            }
          },
          "widgetParticipantSetInfo": {
            "$ref": "#/components/schemas/WidgetParticipantSetInfo",
            "description": "Represents web form participant for whom email should not be provided",
            "items": {
              "$ref": "#/components/schemas/WidgetParticipantSetInfo"
            }
          }
        },
        "required": [
          "name",
          "widgetParticipantSetInfo"
        ],
        "type": "object"
      },
      "FileInfo": {
        "properties": {
          "document": {
            "$ref": "#/components/schemas/Document",
            "description": "A document that is associated with the web form. This field cannot be provided in POST call. In case of GET call, this is the only field returned in the response",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "notarize": {
            "description": "Indicates that this document needs to be notarized",
            "type": "boolean"
          },
          "transientDocumentId": {
            "description": "ID for a transient document that will be added to the web form",
            "type": "string"
          },
          "urlFileInfo": {
            "$ref": "#/components/schemas/URLFileInfo",
            "description": "URL for an external document to add to the agreement",
            "items": {
              "$ref": "#/components/schemas/URLFileInfo"
            }
          }
        },
        "type": "object"
      },
      "FormField": {
        "description": "A form field for an agreement.",
        "properties": {
          "alignment": {
            "description": "Alignment of the text.",
            "enum": [
              "LEFT",
              "RIGHT",
              "CENTER"
            ],
            "type": "string"
          },
          "assignee": {
            "description": "Who the field is assigned to. Valid values are a participant set id, null, \"NOBODY\", \"PREFILL\" or \"EVERYONE\". If set to a participant set id, then any member of that participant set may fill out the field. \"NOBODY\" indicates that the field may not be filled by anybody (e.g. autopopulated fields like transaction number). \"PREFILL\" indicates that the field will be filled by the sender before the agreement is sent out for signing. \"EVERYONE\" exists only in hyperlink fields currently and indicates that it is assigned to all participants. null indicates that anybody may fill out the field. If the propeerty isn't specified, it is treated as null.",
            "type": "string"
          },
          "backgroundColor": {
            "description": "Background color of the form field in RGB or HEX format",
            "type": "string"
          },
          "borderColor": {
            "description": "Color of the border of the field in RGB or HEX format",
            "type": "string"
          },
          "borderStyle": {
            "description": "Style of the border of the field.",
            "enum": [
              "SOLID",
              "DASHED",
              "BEVELED",
              "INSET",
              "UNDERLINE"
            ],
            "type": "string"
          },
          "borderWidth": {
            "description": "Width of the border of the field in default user space units",
            "format": "double",
            "type": "number"
          },
          "calculated": {
            "description": "true if this field's value is calculated from an expression, else false",
            "type": "boolean"
          },
          "conditionalAction": {
            "$ref": "#/components/schemas/FormFieldConditionalAction",
            "description": "A predicate (or set of predicates) that determines whether this field is visible and enabled.",
            "items": {
              "$ref": "#/components/schemas/FormFieldConditionalAction"
            }
          },
          "contentType": {
            "description": "Content Type of the form field.",
            "enum": [
              "DATA",
              "SIGNATURE_BLOCK",
              "SIGNATURE",
              "SIGNER_NAME",
              "SIGNER_FIRST_NAME",
              "SIGNER_LAST_NAME",
              "SIGNER_INITIALS",
              "SIGNER_EMAIL",
              "SIGNER_TITLE",
              "SIGNER_COMPANY",
              "SIGNATURE_DATE",
              "AGREEMENT_NAME",
              "AGREEMENT_MESSAGE",
              "TRANSACTION_ID",
              "SIGNATURE_STAMP",
              "PAYMENT",
              "DIGITAL_SIGNATURE",
              "CALC"
            ],
            "type": "string"
          },
          "currency": {
            "description": "A currency ISO code. Only applicable for payment form fields. Should be one of the currencies supported in the payment integration merchant accounts.",
            "type": "string"
          },
          "defaultValue": {
            "description": "Default value of the form field",
            "type": "string"
          },
          "displayFormat": {
            "description": "Format of the value of the field to be displayed based on the displayFormatType property.",
            "type": "string"
          },
          "displayFormatType": {
            "description": "Format type of the text field.",
            "enum": [
              "DEFAULT",
              "DATE",
              "NUMBER"
            ],
            "type": "string"
          },
          "displayLabel": {
            "description": "Display label attached to the field",
            "type": "string"
          },
          "fontColor": {
            "description": "Font color of the form field in RGB or HEX format",
            "type": "string"
          },
          "fontName": {
            "description": "Font name of the form field",
            "type": "string"
          },
          "fontSize": {
            "description": "Font size of the form field in points",
            "format": "double",
            "type": "number"
          },
          "hiddenOptions": {
            "description": "Text values which are hidden in a drop down form field",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hyperlink": {
            "$ref": "#/components/schemas/FormFieldHyperlink",
            "description": "Hyperlink-specific data (e.g. as url, link type)",
            "items": {
              "$ref": "#/components/schemas/FormFieldHyperlink"
            }
          },
          "inputType": {
            "description": "Input type of the form field",
            "enum": [
              "TEXT_FIELD",
              "MULTILINE",
              "PASSWORD",
              "RADIO",
              "CHECKBOX",
              "DROP_DOWN",
              "LISTBOX",
              "SIGNATURE",
              "PDF_SIGNATURE",
              "BUTTON",
              "BLOCK",
              "FILE_CHOOSER",
              "COMB",
              "INLINE_IMAGE",
              "UNSUPPORTED"
            ],
            "type": "string"
          },
          "locations": {
            "description": "All locations in a document where the form field is placed",
            "items": {
              "$ref": "#/components/schemas/FormFieldLocation"
            },
            "type": "array"
          },
          "masked": {
            "description": "true if the input entered by the signer has to be masked (like password), false if it shouldn't be",
            "type": "boolean"
          },
          "maskingText": {
            "description": "Text to mask the masked form field",
            "type": "string"
          },
          "maxLength": {
            "description": "Maximum length of the input text field in terms of no. of characters",
            "type": "integer"
          },
          "maxValue": {
            "description": "Upper bound of the number that can be entered by the signer",
            "format": "double",
            "type": "number"
          },
          "minLength": {
            "description": "Minimum length of the input text field in terms of no. of characters",
            "type": "integer"
          },
          "minValue": {
            "description": "Lower bound of the number that can be entered by the signer",
            "format": "double",
            "type": "number"
          },
          "name": {
            "description": "The name of the form field",
            "type": "string"
          },
          "origin": {
            "description": "Origin of Form Field",
            "enum": [
              "AUTHORED",
              "GENERATED",
              "IMPORTED"
            ],
            "type": "string"
          },
          "radioCheckType": {
            "description": "The type of radio button (if field is radio button, identified by inputType).",
            "enum": [
              "CIRCLE",
              "CHECK",
              "CROSS",
              "DIAMOND",
              "SQUARE",
              "STAR"
            ],
            "type": "string"
          },
          "readOnly": {
            "description": "true if it is a read-only field, else false",
            "type": "boolean"
          },
          "required": {
            "description": "true if it is a mandatory field to be filled by the signer, else false",
            "type": "boolean"
          },
          "tooltip": {
            "description": "Tooltip text for the form field",
            "type": "string"
          },
          "urlOverridable": {
            "description": "For web form text fields only - true if the default value may come from the URL, else false",
            "type": "boolean"
          },
          "validation": {
            "description": "Rule for validating the field value.",
            "enum": [
              "NONE",
              "STRING",
              "NUMBER",
              "DATE",
              "DATE_CUSTOM",
              "TIME",
              "ZIP",
              "PHONE",
              "SOCIAL_SEC",
              "EMAIL",
              "CURRENCY",
              "PERCENT",
              "FORMULA",
              "CUSTOM",
              "XFA_PICTURE"
            ],
            "type": "string"
          },
          "validationData": {
            "description": "Further data for validating input with regards to the field's specified format. The contents and interpretation of formatData depends on the value of validation.",
            "type": "string"
          },
          "validationErrMsg": {
            "description": "Error message to be shown to the signer if filled value doesn't match the validations of the form field",
            "type": "string"
          },
          "valueExpression": {
            "description": "Expression to calculate value of the form field",
            "type": "string"
          },
          "visible": {
            "description": "If set to false, then the form field is hidden.  Otherwise, it is visible.",
            "type": "boolean"
          },
          "visibleOptions": {
            "description": "Text values which are visible in a drop down form field",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "locations",
          "name"
        ],
        "type": "object"
      },
      "FormFieldConditionPredicate": {
        "description": "A predicate used to determine whether the condtion succeeds",
        "properties": {
          "fieldLocationIndex": {
            "description": "Index of the location of the form field used in the predicate",
            "type": "integer"
          },
          "fieldName": {
            "description": "Name of the field whose value is the basis of predicate",
            "type": "string"
          },
          "operator": {
            "description": "Operator to be applied on the value of the predicate field.",
            "enum": [
              "EQUALS",
              "NOT_EQUALS",
              "LESS_THAN",
              "LESS_THAN_EQUALS",
              "GREATER_THAN",
              "GREATER_THAN_EQUALS",
              "IN",
              "NOT_IN",
              "CONTAINS",
              "NOT_CONTAINS"
            ],
            "type": "string"
          },
          "value": {
            "description": "Value to compare against the value of the predicate's form field, using the specified operator",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormFieldConditionalAction": {
        "description": "Conditional actions to perfom on this form field.",
        "properties": {
          "action": {
            "description": "Action to show/hide the form field is to be taken on the basis of evaluation of conditions.",
            "enum": [
              "SHOW",
              "HIDE",
              "DISABLE",
              "ENABLE"
            ],
            "type": "string"
          },
          "anyOrAll": {
            "description": "It indicates if any one of the conditions or all of them have to be true.",
            "enum": [
              "ALL",
              "ANY"
            ],
            "type": "string"
          },
          "predicates": {
            "description": "The predicates to be evaluated in order to determine whether this condition is true",
            "items": {
              "$ref": "#/components/schemas/FormFieldConditionPredicate"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FormFieldHyperlink": {
        "description": "Hyperlink-specific data for hyperlink form fields",
        "properties": {
          "documentLocation": {
            "$ref": "#/components/schemas/FormFieldLocation",
            "description": "Location on the document pointed by the link in case of INTERNAL type link",
            "items": {
              "$ref": "#/components/schemas/FormFieldLocation"
            }
          },
          "linkType": {
            "description": "Type of link in an agreement.",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "FROM_TEXT"
            ],
            "type": "string"
          },
          "url": {
            "description": "URL, in case of EXTERNAL type link",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormFieldLocation": {
        "description": "Location information for form fields",
        "properties": {
          "height": {
            "description": "Height of the form field in default user space units",
            "format": "double",
            "type": "number"
          },
          "left": {
            "description": "No. of default user space units from left of the page for form field placement",
            "format": "double",
            "type": "number"
          },
          "pageNumber": {
            "description": "Number of the page where form field has to be placed, starting from 1.",
            "type": "integer"
          },
          "top": {
            "description": "No. of default user space units from bottom of the page for form field placement",
            "format": "double",
            "type": "number"
          },
          "width": {
            "description": "Width of the form field in default user space units",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "height",
          "left",
          "pageNumber",
          "top",
          "width"
        ],
        "type": "object"
      },
      "FormFieldPutInfo": {
        "description": "Information required to add or replace agreement form fields",
        "properties": {
          "fields": {
            "description": "The list of fields to update or replace.",
            "items": {
              "$ref": "#/components/schemas/FormField"
            },
            "type": "array"
          }
        },
        "required": [
          "fields"
        ],
        "type": "object"
      },
      "MyAgreementInfo": {
        "properties": {
          "accountSharers": {
            "description": "A list of account sharer in relation to the api caller and this resource.",
            "items": {
              "$ref": "#/components/schemas/AccountSharerInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "accountSharers"
        ],
        "type": "object"
      },
      "NameInfo": {
        "properties": {
          "firstName": {
            "description": "Recipient's first name",
            "type": "string"
          },
          "lastName": {
            "description": "Recipient's last name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Note": {
        "properties": {
          "note": {
            "description": "Content of Note field",
            "type": "string"
          }
        },
        "required": [
          "note"
        ],
        "type": "object"
      },
      "PageImageUrl": {
        "properties": {
          "pageNumber": {
            "description": "Page number within the document.",
            "type": "integer"
          },
          "url": {
            "description": "An image url.",
            "type": "string"
          }
        },
        "required": [
          "pageNumber",
          "url"
        ],
        "type": "object"
      },
      "PageInfo": {
        "properties": {
          "nextCursor": {
            "description": "Used to navigate to the next page. If not returned, there are no further pages.",
            "type": "string"
          }
        },
        "required": [
          "nextCursor"
        ],
        "type": "object"
      },
      "ParticipantSecurityOption": {
        "properties": {
          "authenticationMethod": {
            "description": "The authentication method for the participants to have access to view and sign the document. When replacing a participant that has PASSWORD or PHONE authentication specified, you must supply a password or phone number for the new participant, and you cannot change the authentication method. \nFor unknown participants, only email based authentication is allowed. Hence, only ‘NONE’ authenticaiton method is permitted",
            "enum": [
              "NONE",
              "PASSWORD",
              "PHONE",
              "KBA",
              "WEB_IDENTITY",
              "ADOBE_SIGN"
            ],
            "type": "string"
          },
          "digAuthInfo": {
            "$ref": "#/components/schemas/DigAuthInfo",
            "description": "Digital Identity Gateway Provider information.",
            "items": {
              "$ref": "#/components/schemas/DigAuthInfo"
            }
          },
          "nameInfo": {
            "$ref": "#/components/schemas/NameInfo",
            "description": "Recipient's full name",
            "items": {
              "$ref": "#/components/schemas/NameInfo"
            }
          },
          "notaryAuthentication": {
            "description": "The authentication method of the notary participant to the notary",
            "enum": [
              "MULTI_FACTOR_AUTHENTICATION",
              "NONE"
            ],
            "type": "string"
          },
          "password": {
            "description": "The password required for the participant to view and sign the document. Note that Acrobat Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. The password will not be returned in GET call. When replacing a participant that has PASSWORD authentication specified, you must supply a password for the new participant.",
            "type": "string"
          },
          "phoneInfo": {
            "$ref": "#/components/schemas/PhoneInfo",
            "description": "The phoneInfo required for the participant to view and sign the document",
            "items": {
              "$ref": "#/components/schemas/PhoneInfo"
            }
          }
        },
        "required": [
          "authenticationMethod"
        ],
        "type": "object"
      },
      "ParticipantSetMemberInfo": {
        "properties": {
          "email": {
            "description": "Email of the participant. It should be blank for the unknown participants.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the participant. This will be ignored as part of POST or PUT calls. The Id might be null in draft state",
            "type": "string"
          },
          "name": {
            "description": "Recipient's full name",
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/ParticipantSecurityOption",
            "description": "Security options that apply to the participant",
            "items": {
              "$ref": "#/components/schemas/ParticipantSecurityOption"
            }
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "PersonalizedSigningViewConfiguration": {
        "properties": {
          "comment": {
            "description": "Comment describing how the API caller established the signer's identity - will appear in the audit trail",
            "type": "string"
          },
          "email": {
            "description": "The email address of the person who will be receiving this web form",
            "type": "string"
          },
          "expiration": {
            "description": "Expiration date for the personalization of this web form. After this date, the identity of the signer will not be assumed by Acrobat Sign. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2022-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "reusable": {
            "description": "Should the intended signer be allowed to sign this web form more than once",
            "type": "boolean"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "PhoneInfo": {
        "properties": {
          "countryCode": {
            "description": "The numeric country calling code (ISD code) required for the participant to view and sign the document if authentication type is PHONE",
            "type": "string"
          },
          "countryIsoCode": {
            "description": "The country ISO Alpha-2 code required for the participant to view and sign the document if authentication method is PHONE",
            "type": "string"
          },
          "phone": {
            "description": "The phone number required for the participant to view and sign the document if authentication method is PHONE. When replacing a participant that has PHONE authentication specified, you must supply a phone number for the new participant.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProviderParticipantSetInfo": {
        "properties": {
          "actionDescription": {
            "description": "The description for the provider participant who is responsible to provide details like name, email for the unknown participant.",
            "type": "string"
          },
          "actionRequired": {
            "description": "It indicates whether it is mandatory or not for the provider participant to provide the details for the unknown participant",
            "type": "boolean"
          }
        },
        "required": [
          "actionRequired"
        ],
        "type": "object"
      },
      "ReminderParticipant": {
        "properties": {
          "email": {
            "description": "The email address of the participant",
            "type": "string"
          },
          "name": {
            "description": "The full name of the participant",
            "type": "string"
          },
          "participantId": {
            "description": "The unique identifier of the participant",
            "type": "string"
          }
        },
        "required": [
          "email",
          "participantId"
        ],
        "type": "object"
      },
      "SecurityOption": {
        "properties": {
          "openPassword": {
            "description": "The secondary password that will be used to secure the PDF document. Note that Acrobat Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SenderInfo": {
        "properties": {
          "company": {
            "description": "Company of the creator, if available.",
            "type": "string"
          },
          "createdDate": {
            "description": "The date when the sender was added. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
            "format": "date",
            "type": "string"
          },
          "email": {
            "description": "Email of the creator of the web form.",
            "type": "string"
          },
          "hidden": {
            "description": "True if the web form is hidden for the user that is calling the API. Only returned if self is true.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the creator, if available.",
            "type": "string"
          },
          "participantId": {
            "description": " The unique identifier of the creator of the web form.",
            "type": "string"
          },
          "self": {
            "description": "True if the creator of the web form is the same user that is calling the API.",
            "type": "boolean"
          },
          "userId": {
            "description": "The user ID of the sender. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
            "type": "string"
          }
        },
        "required": [
          "company",
          "email",
          "hidden",
          "name",
          "participantId",
          "self"
        ],
        "type": "object"
      },
      "ShareCreationInfo": {
        "properties": {
          "email": {
            "description": "The email address of the member with whom the agreement will be shared",
            "type": "string"
          },
          "message": {
            "description": "Optional message to the sharee",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "ShareCreationInfoList": {
        "properties": {
          "shareCreationInfo": {
            "description": "List of ShareCreationInfo",
            "items": {
              "$ref": "#/components/schemas/ShareCreationInfo"
            },
            "type": "array"
          }
        },
        "required": [
          "shareCreationInfo"
        ],
        "type": "object"
      },
      "ShareCreationResponse": {
        "properties": {
          "email": {
            "description": "The email address that was requested",
            "type": "string"
          },
          "participantId": {
            "description": "The unique identifier of the participant",
            "type": "string"
          }
        },
        "required": [
          "email",
          "participantId"
        ],
        "type": "object"
      },
      "ShareCreationResponseList": {
        "properties": {
          "shareCreationResponseList": {
            "description": "List of ShareCreationResponse",
            "items": {
              "$ref": "#/components/schemas/ShareCreationResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "shareCreationResponseList"
        ],
        "type": "object"
      },
      "ShareParticipantInfo": {
        "properties": {
          "company": {
            "description": "Company of the sharee participant of the web form, if available.",
            "type": "string"
          },
          "email": {
            "description": "Email of the sharee participant of the web form.",
            "type": "string"
          },
          "hidden": {
            "description": "True if the web form is hidden for the user that is calling the API. Only returned if self is true.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the sharee participant of the web form, if available.",
            "type": "string"
          },
          "participantId": {
            "description": "The unique identifier of the sharee participant of the web form.",
            "type": "string"
          },
          "self": {
            "description": "True if the Share participant of the web form is the same user that is calling the API.",
            "type": "boolean"
          },
          "sharerParticipantId": {
            "description": "The unique identifier of the participant who shared the web form.",
            "type": "string"
          }
        },
        "required": [
          "company",
          "email",
          "hidden",
          "name",
          "participantId",
          "self",
          "sharerParticipantId"
        ],
        "type": "object"
      },
      "URLFileInfo": {
        "properties": {
          "mimeType": {
            "description": "The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed",
            "type": "string"
          },
          "name": {
            "description": "The original system file name of the document being sent",
            "type": "string"
          },
          "url": {
            "description": "A publicly accessible URL for retrieving the raw file content",
            "type": "string"
          }
        },
        "required": [
          "mimeType",
          "name",
          "url"
        ],
        "type": "object"
      },
      "UserWidget": {
        "properties": {
          "groupId": {
            "description": "Unique identifier of the group",
            "type": "string"
          },
          "hidden": {
            "description": "True if agreement is hidden for the user",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of a web form",
            "type": "string"
          },
          "javascript": {
            "description": "The embedded javascript code of the web form",
            "type": "string"
          },
          "modifiedDate": {
            "description": "The date on which the web form was last modified. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "name": {
            "description": "The name of the web form.",
            "type": "string"
          },
          "status": {
            "description": "The web form status (AUTHORING, ACTIVE, DRAFT, DISABLED)",
            "enum": [
              "AUTHORING",
              "ACTIVE",
              "DRAFT",
              "DISABLED"
            ],
            "type": "string"
          },
          "url": {
            "description": "The hosted url of the web form",
            "type": "string"
          }
        },
        "required": [
          "groupId",
          "hidden",
          "id",
          "javascript",
          "modifiedDate",
          "name",
          "status",
          "url"
        ],
        "type": "object"
      },
      "UserWidgets": {
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo",
            "description": "Pagination information for navigating through the response",
            "items": {
              "$ref": "#/components/schemas/PageInfo"
            }
          },
          "userWidgetList": {
            "description": "An array of web form items",
            "items": {
              "$ref": "#/components/schemas/UserWidget"
            },
            "type": "array"
          }
        },
        "required": [
          "page",
          "userWidgetList"
        ],
        "type": "object"
      },
      "VaultingInfo": {
        "properties": {
          "enabled": {
            "description": "For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "VisibilityInfo": {
        "properties": {
          "visibility": {
            "description": "Specifies the visibility. The possible values are HIDE or SHOW",
            "enum": [
              "SHOW",
              "HIDE"
            ],
            "type": "string"
          }
        },
        "required": [
          "visibility"
        ],
        "type": "object"
      },
      "WidgetAdditionalParticipationSetInfo": {
        "properties": {
          "electronicSealId": {
            "description": "ID of the sealing credential, which can be obtained through <b>GET /autoseals</b> call.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the Web form participant. This will be ignored as part of POST or PUT calls.The Id might be null in draft state,",
            "type": "string"
          },
          "memberInfos": {
            "description": "Array of ParticipantInfo objects, containing participant-specific data (email, e.g.) for all the additional participants in the web form. If the email of the participant is unknown at the time of web form creation, the email should be left empty. Required, unless ParticipantSet has the ELECTRONIC_SEALER role, ",
            "items": {
              "$ref": "#/components/schemas/ParticipantSetMemberInfo"
            },
            "type": "array"
          },
          "order": {
            "description": "Index indicating position at which signing group needs to sign. Additional participant to sign at first place is assigned a index of 1. Web Form participant should not have any order specified. Web Form participant should not have any email address and and can not have phone authentication applied. Different signingOrder specified in input should form a valid consecutive increasing sequence of integers. Otherwise signingOrder will be considered invalid,",
            "type": "integer"
          },
          "providerParticipantSetInfo": {
            "$ref": "#/components/schemas/ProviderParticipantSetInfo",
            "description": "Represents all the attributes related to the unknown participant and its provider. If it is defined then the participant will be treated as an unknown participant.",
            "items": {
              "$ref": "#/components/schemas/ProviderParticipantSetInfo"
            }
          },
          "role": {
            "description": "Role assumed by all participants in the set (signer, approver, etc.) Web Form First Participant will only have roles - Signer, Approver, Acceptor and Form Filler",
            "enum": [
              "SIGNER",
              "DELEGATE_TO_SIGNER",
              "APPROVER",
              "DELEGATE_TO_APPROVER",
              "ACCEPTOR",
              "DELEGATE_TO_ACCEPTOR",
              "FORM_FILLER",
              "DELEGATE_TO_FORM_FILLER",
              "CERTIFIED_RECIPIENT",
              "DELEGATE_TO_CERTIFIED_RECIPIENT",
              "ELECTRONIC_SEALER"
            ],
            "type": "string"
          }
        },
        "required": [
          "memberInfos",
          "role"
        ],
        "type": "object"
      },
      "WidgetAgreement": {
        "properties": {
          "displayDate": {
            "description": "The display date for the agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "displayParticipantSetInfos": {
            "description": "The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user",
            "items": {
              "$ref": "#/components/schemas/DisplayWidgetParticipantSetInfo"
            },
            "type": "array"
          },
          "esign": {
            "description": "True if this is an e-sign document",
            "type": "boolean"
          },
          "groupId": {
            "description": "Unique identifier of the group",
            "type": "string"
          },
          "hidden": {
            "description": "True if agreement is hidden for the user",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the agreement.If provided in POST, it will simply be ignored",
            "type": "string"
          },
          "latestVersionId": {
            "description": "A version ID which uniquely identifies the current version of the agreement",
            "type": "string"
          },
          "name": {
            "description": "Name of the Agreement",
            "type": "string"
          },
          "parentId": {
            "description": "The parent id of a bulk send child *OR* the originating id of a web form agreement instance",
            "type": "string"
          },
          "status": {
            "description": "The current status of the document from the perspective of the originator",
            "enum": [
              "WAITING_FOR_MY_SIGNATURE",
              "WAITING_FOR_MY_APPROVAL",
              "WAITING_FOR_MY_DELEGATION",
              "WAITING_FOR_MY_ACKNOWLEDGEMENT",
              "WAITING_FOR_MY_ACCEPTANCE",
              "WAITING_FOR_MY_FORM_FILLING",
              "WAITING_FOR_NOTARIZATION",
              "OUT_FOR_SIGNATURE",
              "OUT_FOR_APPROVAL",
              "OUT_FOR_DELIVERY",
              "OUT_FOR_ACCEPTANCE",
              "OUT_FOR_FORM_FILLING",
              "SIGNED",
              "APPROVED",
              "FORM_FILLED",
              "DELIVERED",
              "ACCEPTED",
              "ARCHIVED",
              "CANCELLED",
              "EXPIRED",
              "WAITING_FOR_PREFILL",
              "DOCUMENTS_NOT_YET_PROCESSED",
              "WAITING_FOR_MY_VERIFICATION",
              "WAITING_FOR_VERIFICATION"
            ],
            "type": "string"
          },
          "type": {
            "description": "The kind of agreement",
            "enum": [
              "AGREEMENT",
              "MEGASIGN_CHILD",
              "WIDGET_INSTANCE"
            ],
            "type": "string"
          }
        },
        "required": [
          "displayDate",
          "displayParticipantSetInfos",
          "esign",
          "groupId",
          "hidden",
          "latestVersionId",
          "name",
          "status"
        ],
        "type": "object"
      },
      "WidgetAgreements": {
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageInfo",
            "description": "Pagination information for navigating through the response",
            "items": {
              "$ref": "#/components/schemas/PageInfo"
            }
          },
          "userAgreementList": {
            "description": "An array of UserAgreement items",
            "items": {
              "$ref": "#/components/schemas/WidgetAgreement"
            },
            "type": "array"
          }
        },
        "required": [
          "page",
          "userAgreementList"
        ],
        "type": "object"
      },
      "WidgetCcInfo": {
        "properties": {
          "email": {
            "description": "Email of the CC participant of the web form",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "WidgetCreationInfoV6": {
        "properties": {
          "additionalParticipantSetsInfo": {
            "description": "List of all the participants in the web form except web form signer",
            "items": {
              "$ref": "#/components/schemas/WidgetAdditionalParticipationSetInfo"
            },
            "type": "array"
          },
          "authFailureInfo": {
            "$ref": "#/components/schemas/WidgetRedirectionInfo",
            "description": "URL and associated properties for the error page the web form signer will be taken after failing to authenticate",
            "items": {
              "$ref": "#/components/schemas/WidgetRedirectionInfo"
            }
          },
          "ccs": {
            "description": "A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email when the final agreement created through web form is signed. The email addresses will also receive a copy of the document, attached as a PDF file",
            "items": {
              "$ref": "#/components/schemas/WidgetCcInfo"
            },
            "type": "array"
          },
          "completionInfo": {
            "$ref": "#/components/schemas/WidgetRedirectionInfo",
            "description": "URL and associated properties for the success page the web form signer will be taken to after performing desired action on the web form",
            "items": {
              "$ref": "#/components/schemas/WidgetRedirectionInfo"
            }
          },
          "createdDate": {
            "description": "Date when web form was created. If provided in POST, it will simply be ignored. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "creatorEmail": {
            "description": "Email of web form creator. Only returned in GET response. Cannot be provided in POST/PUT request. If provided in POST, it will simply be ignored",
            "type": "string"
          },
          "creatorName": {
            "description": "Name of web form creator. It will be ignored in POST/PUT requests",
            "type": "string"
          },
          "fileInfos": {
            "description": "A list of one or more files (or references to files) that will be used to create the web form. If more than one file is provided, they will be combined before the web form is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "type": "array"
          },
          "groupId": {
            "description": "The ID of the group to which the web form belongs to. If not provided during creation, primary group of the creator will be used",
            "type": "string"
          },
          "id": {
            "description": "A resource identifier that can be used to uniquely identify the web form in other apis. If provided in POST, it will simply be ignored",
            "type": "string"
          },
          "isDocumentRetentionApplied": {
            "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "lastEventDate": {
            "description": "The date of the last event that occurred for this web form.  Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "locale": {
            "description": "The locale associated with this web form - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the web form creator",
            "type": "string"
          },
          "name": {
            "description": "The name of the web form that will be used to identify it, in emails, website and other places",
            "type": "string"
          },
          "ownerEmail": {
            "description": "Email of web form owner. It will be ignored in POST/PUT requests",
            "type": "string"
          },
          "ownerId": {
            "description": "The unique identifier of the web form owner. It will be ignored in POST requests",
            "type": "string"
          },
          "ownerName": {
            "description": "Name of web form owner. It will be ignored in POST/PUT requests",
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/SecurityOption",
            "description": "Secondary security parameters for the web form",
            "items": {
              "$ref": "#/components/schemas/SecurityOption"
            }
          },
          "state": {
            "description": "The state in which the web form should land. For example in order to create a web form in DRAFT state, field should be DRAFT. The state field will never get returned in GET /widgets/{ID} and will be ignored if provided in PUT /widgets/{ID} call. The eventual status of the web form can be obtained from GET /widgets/ID",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "AUTHORING"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status of the Web Form. If provided in POST, it will simply be ignored",
            "enum": [
              "DRAFT",
              "AUTHORING",
              "ACTIVE",
              "DOCUMENTS_NOT_YET_PROCESSED",
              "DISABLED",
              "DISCARDED"
            ],
            "type": "string"
          },
          "vaultingInfo": {
            "$ref": "#/components/schemas/VaultingInfo",
            "description": "Vaulting properties that allows Acrobat Sign to securely store documents with a vault provider",
            "items": {
              "$ref": "#/components/schemas/VaultingInfo"
            }
          },
          "widgetInActiveInfo": {
            "$ref": "#/components/schemas/WidgetInActiveInfo",
            "description": "The custom message which will be displayed to the user or the URL to which user will be redirected when the web form is accessed in a disabled state. This can only be specified in PUT request",
            "items": {
              "$ref": "#/components/schemas/WidgetInActiveInfo"
            }
          },
          "widgetParticipantSetInfo": {
            "$ref": "#/components/schemas/WidgetParticipantSetInfo",
            "description": "Represents web form participant for whom email should not be provided",
            "items": {
              "$ref": "#/components/schemas/WidgetParticipantSetInfo"
            }
          }
        },
        "required": [
          "fileInfos",
          "name",
          "state",
          "widgetParticipantSetInfo"
        ],
        "type": "object"
      },
      "WidgetCreationResponse": {
        "description": "A JSON object describing the web form",
        "properties": {
          "id": {
            "description": "The unique identifier of web form which can be used to retrieve the data entered by the signers.",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "WidgetDocuments": {
        "properties": {
          "documents": {
            "description": "A list of documents",
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "type": "array"
          }
        },
        "required": [
          "documents"
        ],
        "type": "object"
      },
      "WidgetEvent": {
        "properties": {
          "actingUserEmail": {
            "description": "Email address of the user that created the event",
            "type": "string"
          },
          "actingUserIpAddress": {
            "description": "The IP address of the user that created the event",
            "type": "string"
          },
          "actingUserName": {
            "description": "The name of the acting user",
            "type": "string"
          },
          "comment": {
            "description": "The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant",
            "type": "string"
          },
          "date": {
            "description": "The date of the audit event. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "description": {
            "description": "A description of the audit event",
            "type": "string"
          },
          "device": {
            "description": "The device used for the event.",
            "type": "string"
          },
          "deviceLocation": {
            "$ref": "#/components/schemas/WidgetEventDeviceLocation",
            "description": "Location of the device that generated the event (This value may be null due to limited privileges)",
            "items": {
              "$ref": "#/components/schemas/WidgetEventDeviceLocation"
            }
          },
          "devicePhoneNumber": {
            "description": "Phone number from the device used when the participation is completed on a mobile phone",
            "type": "string"
          },
          "digitalSignatureInfo": {
            "$ref": "#/components/schemas/DigitalSignatureInfo",
            "description": "This is present for ESIGNED events when the participation is signed digitally",
            "items": {
              "$ref": "#/components/schemas/DigitalSignatureInfo"
            }
          },
          "id": {
            "description": "The identifier for the event.",
            "type": "string"
          },
          "initiatingUserEmail": {
            "description": "Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
            "type": "string"
          },
          "initiatingUserName": {
            "description": "Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
            "type": "string"
          },
          "participantEmail": {
            "description": "Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
            "type": "string"
          },
          "participantId": {
            "description": "The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
            "type": "string"
          },
          "participantRole": {
            "description": "Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).",
            "enum": [
              "SIGNER",
              "DELEGATE_TO_SIGNER",
              "APPROVER",
              "DELEGATE_TO_APPROVER",
              "ACCEPTOR",
              "DELEGATE_TO_ACCEPTOR",
              "FORM_FILLER",
              "DELEGATE_TO_FORM_FILLER",
              "CERTIFIED_RECIPIENT",
              "DELEGATE_TO_CERTIFIED_RECIPIENT",
              "SHARE",
              "RESOURCE_SHARE",
              "SENDER",
              "NOTARY_SIGNER"
            ],
            "type": "string"
          },
          "reminderParticipants": {
            "description": "A list of one or more participants who received the reminders",
            "items": {
              "$ref": "#/components/schemas/ReminderParticipant"
            },
            "type": "array"
          },
          "replacedParticipantEmail": {
            "description": "Email of the user that was replaced by the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
            "type": "string"
          },
          "replacedParticipantName": {
            "description": "Full name of the user that was replaced by the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
            "type": "string"
          },
          "signerNewName": {
            "description": "Signer changed name at signing : new name used to sign.",
            "type": "string"
          },
          "signerOldName": {
            "description": "Signer changed name at signing : name used previous to signing.",
            "type": "string"
          },
          "signingReason": {
            "description": "Signing reason captured during ESIGN or DIGSIGN",
            "type": "string"
          },
          "synchronizationId": {
            "description": "A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)",
            "type": "string"
          },
          "type": {
            "description": "Type of web form event",
            "enum": [
              "AUTO_CANCELLED_CONVERSION_PROBLEM",
              "ACTIVATED",
              "CREATED",
              "DEACTIVATED",
              "MODIFIED",
              "OWNER_CHANGED"
            ],
            "type": "string"
          },
          "vaultEventId": {
            "description": "The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)",
            "type": "string"
          },
          "vaultProviderName": {
            "description": "Name of the vault provider for the vault event (if vaulted, otherwise null)",
            "type": "string"
          },
          "versionId": {
            "description": "An ID which uniquely identifies the version of the document associated with this audit event",
            "type": "string"
          }
        },
        "required": [
          "actingUserEmail",
          "actingUserIpAddress",
          "actingUserName",
          "date",
          "description",
          "device",
          "deviceLocation",
          "devicePhoneNumber",
          "digitalSignatureInfo",
          "initiatingUserEmail",
          "initiatingUserName",
          "participantEmail",
          "participantId",
          "participantRole",
          "synchronizationId",
          "type",
          "vaultEventId",
          "vaultProviderName",
          "versionId"
        ],
        "type": "object"
      },
      "WidgetEventDeviceLocation": {
        "properties": {
          "latitude": {
            "description": "Latitude coordinate",
            "format": "float",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude coordinate",
            "format": "float",
            "type": "number"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object"
      },
      "WidgetEventList": {
        "properties": {
          "events": {
            "description": "An array of event objects.",
            "items": {
              "$ref": "#/components/schemas/WidgetEvent"
            },
            "type": "array"
          }
        },
        "required": [
          "events"
        ],
        "type": "object"
      },
      "WidgetFormFields": {
        "description": "A JSON list of all of the fields for a form",
        "properties": {
          "fields": {
            "description": "List of the form fields in an agreement",
            "items": {
              "$ref": "#/components/schemas/FormField"
            },
            "type": "array"
          }
        },
        "required": [
          "fields"
        ],
        "type": "object"
      },
      "WidgetInActiveInfo": {
        "properties": {
          "message": {
            "description": "Display this custom message to the user when the web form is accessed. Note that this can contain wiki markup to include clickable links in the message. This is required if redirectUrl is not provided. Both message and redirectUrl cannot be specified.",
            "type": "string"
          },
          "redirectUrl": {
            "description": "Redirect the user to this URL when the web form is accessed. This is required if message is not provided. Both message and redirectUrl cannot be specified.",
            "type": "string"
          }
        },
        "required": [
          "message",
          "redirectUrl"
        ],
        "type": "object"
      },
      "WidgetInfo": {
        "properties": {
          "additionalParticipantSetsInfo": {
            "description": "List of all the participants in the web form except web form signer",
            "items": {
              "$ref": "#/components/schemas/WidgetAdditionalParticipationSetInfo"
            },
            "type": "array"
          },
          "authFailureInfo": {
            "$ref": "#/components/schemas/WidgetRedirectionInfo",
            "description": "URL and associated properties for the error page the web form signer will be taken after failing to authenticate",
            "items": {
              "$ref": "#/components/schemas/WidgetRedirectionInfo"
            }
          },
          "ccs": {
            "description": "A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email when the final agreement created through web form is signed. The email addresses will also receive a copy of the document, attached as a PDF file",
            "items": {
              "$ref": "#/components/schemas/WidgetCcInfo"
            },
            "type": "array"
          },
          "completionInfo": {
            "$ref": "#/components/schemas/WidgetRedirectionInfo",
            "description": "URL and associated properties for the success page the web form signer will be taken to after performing desired action on the web form",
            "items": {
              "$ref": "#/components/schemas/WidgetRedirectionInfo"
            }
          },
          "createdDate": {
            "description": "Date when web form was created. If provided in POST, it will simply be ignored. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "creatorEmail": {
            "description": "Email of web form creator. Only returned in GET response. Cannot be provided in POST/PUT request. If provided in POST, it will simply be ignored",
            "type": "string"
          },
          "creatorName": {
            "description": "Name of web form creator. It will be ignored in POST/PUT requests",
            "type": "string"
          },
          "fileInfos": {
            "description": "A list of one or more files (or references to files) that will be used to create the web form. If more than one file is provided, they will be combined before the web form is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "type": "array"
          },
          "groupId": {
            "description": "The ID of the group to which the web form belongs to. If not provided during creation, primary group of the creator will be used",
            "type": "string"
          },
          "id": {
            "description": "A resource identifier that can be used to uniquely identify the web form in other apis. If provided in POST, it will simply be ignored",
            "type": "string"
          },
          "isDocumentRetentionApplied": {
            "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
            "type": "boolean"
          },
          "lastEventDate": {
            "description": "The date of the last event that occurred for this web form.  Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
            "format": "date",
            "type": "string"
          },
          "locale": {
            "description": "The locale associated with this web form - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the web form creator",
            "type": "string"
          },
          "name": {
            "description": "The name of the web form that will be used to identify it, in emails, website and other places",
            "type": "string"
          },
          "ownerEmail": {
            "description": "Email of web form owner. It will be ignored in POST/PUT requests",
            "type": "string"
          },
          "ownerId": {
            "description": "The unique identifier of the web form owner. It will be ignored in POST requests",
            "type": "string"
          },
          "ownerName": {
            "description": "Name of web form owner. It will be ignored in POST/PUT requests",
            "type": "string"
          },
          "securityOption": {
            "$ref": "#/components/schemas/SecurityOption",
            "description": "Secondary security parameters for the web form",
            "items": {
              "$ref": "#/components/schemas/SecurityOption"
            }
          },
          "state": {
            "description": "The state in which the web form should land. For example in order to create a web form in DRAFT state, field should be DRAFT. The state field will never get returned in GET /widgets/{ID} and will be ignored if provided in PUT /widgets/{ID} call. The eventual status of the web form can be obtained from GET /widgets/ID",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "AUTHORING"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status of the Web Form. If provided in POST, it will simply be ignored",
            "enum": [
              "DRAFT",
              "AUTHORING",
              "ACTIVE",
              "DOCUMENTS_NOT_YET_PROCESSED",
              "DISABLED",
              "DISCARDED"
            ],
            "type": "string"
          },
          "vaultingInfo": {
            "$ref": "#/components/schemas/VaultingInfo",
            "description": "Vaulting properties that allows Acrobat Sign to securely store documents with a vault provider",
            "items": {
              "$ref": "#/components/schemas/VaultingInfo"
            }
          },
          "widgetInActiveInfo": {
            "$ref": "#/components/schemas/WidgetInActiveInfo",
            "description": "The custom message which will be displayed to the user or the URL to which user will be redirected when the web form is accessed in a disabled state. This can only be specified in PUT request",
            "items": {
              "$ref": "#/components/schemas/WidgetInActiveInfo"
            }
          },
          "widgetParticipantSetInfo": {
            "$ref": "#/components/schemas/WidgetParticipantSetInfo",
            "description": "Represents web form participant for whom email should not be provided",
            "items": {
              "$ref": "#/components/schemas/WidgetParticipantSetInfo"
            }
          }
        },
        "required": [
          "fileInfos",
          "name",
          "status",
          "widgetParticipantSetInfo"
        ],
        "type": "object"
      },
      "WidgetMembersInfo": {
        "properties": {
          "additionalParticipantSets": {
            "description": "Information about the web form additional participant Sets",
            "items": {
              "$ref": "#/components/schemas/DetailedWidgetParticipantSetInfo"
            },
            "type": "array"
          },
          "ccsInfo": {
            "description": "Information of CC participants of the web form.",
            "items": {
              "$ref": "#/components/schemas/CCParticipantInfo"
            },
            "type": "array"
          },
          "creatorInfo": {
            "$ref": "#/components/schemas/SenderInfo",
            "description": "Information of the creator of the web form.",
            "items": {
              "$ref": "#/components/schemas/SenderInfo"
            }
          },
          "sharesInfo": {
            "description": "Information of the participants with whom the web form has been shared.",
            "items": {
              "$ref": "#/components/schemas/ShareParticipantInfo"
            },
            "type": "array"
          },
          "widgetParticipantSet": {
            "$ref": "#/components/schemas/DetailedWidgetParticipantSetInfo",
            "description": "Information about the web form participant Set",
            "items": {
              "$ref": "#/components/schemas/DetailedWidgetParticipantSetInfo"
            }
          }
        },
        "required": [
          "ccsInfo",
          "creatorInfo",
          "sharesInfo"
        ],
        "type": "object"
      },
      "WidgetParticipantSetInfo": {
        "properties": {
          "memberInfos": {
            "description": "Array of ParticipantInfo objects, containing participant - specific data (email, e.g.). All participants in the array belong to the same set. Currently we are supporting only one member in the set. Since the email of the web form signer is unknown at the time of web form creation, the email should be left empty and its optional security options should be provided. ",
            "items": {
              "$ref": "#/components/schemas/ParticipantSetMemberInfo"
            },
            "type": "array"
          },
          "role": {
            "description": "Role assumed by all participants in the set (signer, approver, etc.) Web Form First Participant will only have roles - Signer, Approver, Acceptor and Form Filler",
            "enum": [
              "SIGNER",
              "DELEGATE_TO_SIGNER",
              "APPROVER",
              "DELEGATE_TO_APPROVER",
              "ACCEPTOR",
              "DELEGATE_TO_ACCEPTOR",
              "FORM_FILLER",
              "DELEGATE_TO_FORM_FILLER",
              "CERTIFIED_RECIPIENT",
              "DELEGATE_TO_CERTIFIED_RECIPIENT",
              "ELECTRONIC_SEALER"
            ],
            "type": "string"
          }
        },
        "required": [
          "memberInfos",
          "role"
        ],
        "type": "object"
      },
      "WidgetRedirectionInfo": {
        "properties": {
          "deframe": {
            "description": "If deframe is false, the resultant page will be shown inside the web form frame. If deframe is true, the resultant page will be shown in the full browser window. \n Note that in the case of embedded web forms, browser security restrictions do not permit automatic redirection in the full browser window, so if deframe is true the user will instead just see a link to the success page. We recommend this scenario be avoided - in other words, setting deframe to false is recommended for embedded web forms",
            "type": "boolean"
          },
          "delay": {
            "description": "The delay (in seconds) before the user is taken to the resultant page. If this value is greater than 0, the user will first see the standard Acrobat Sign result message, and then after a delay will be redirected to your resultant page. \n Note that this parameter has no effect for embedded web forms when deframe is true",
            "type": "integer"
          },
          "url": {
            "description": "A publicly accessible url to which the user will be sent after successfully completing the web form. \nIf the URL you provide includes information that allows you to identify the specific transaction, such as your own unique identifier, you can use the browser request to this URL as a callback to notify you that this transaction is completed. \nIn addition, Acrobat Sign will append a documentKey parameter to the URL which will contain the Acrobat Sign DocumentKey for this signed web form, but only if the sender is the same as the API key user. Your application can use this value to get the form data for this web form",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "WidgetStateInfo": {
        "properties": {
          "state": {
            "description": "State of the Web Form",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "AUTHORING",
              "CANCELLED"
            ],
            "type": "string"
          },
          "widgetInActiveInfo": {
            "$ref": "#/components/schemas/WidgetInActiveInfo",
            "description": "The custom message which will be displayed to the user or the URL to which user will be redirected when the web form is accessed in a disabled state. This can only be specified in PUT request",
            "items": {
              "$ref": "#/components/schemas/WidgetInActiveInfo"
            }
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "WidgetView": {
        "properties": {
          "embeddedCode": {
            "description": "Embedded code of url of resource ",
            "type": "string"
          },
          "expiration": {
            "description": "Expiration of user url ",
            "format": "date",
            "type": "string"
          },
          "isCurrent": {
            "description": "True if this view is the current view",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the requested web form view",
            "enum": [
              "MODIFY",
              "AUTHORING",
              "DOCUMENT",
              "MANAGE",
              "POST_CREATE",
              "SIGNING",
              "ALL"
            ],
            "type": "string"
          },
          "url": {
            "description": "Url of resource location",
            "type": "string"
          }
        },
        "required": [
          "isCurrent",
          "name"
        ],
        "type": "object"
      },
      "WidgetViewInfo": {
        "properties": {
          "commonViewConfiguration": {
            "$ref": "#/components/schemas/CommonViewConfiguration",
            "description": "Common view configuration for all the available views",
            "items": {
              "$ref": "#/components/schemas/CommonViewConfiguration"
            }
          },
          "name": {
            "description": "Name of the requested web form view",
            "enum": [
              "MODIFY",
              "AUTHORING",
              "DOCUMENT",
              "MANAGE",
              "POST_CREATE",
              "SIGNING",
              "ALL"
            ],
            "type": "string"
          },
          "personalizedSigningViewConfiguration": {
            "$ref": "#/components/schemas/PersonalizedSigningViewConfiguration",
            "description": "Personalized SIGNING view configuration",
            "items": {
              "$ref": "#/components/schemas/PersonalizedSigningViewConfiguration"
            }
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "WidgetViews": {
        "properties": {
          "widgetViewList": {
            "description": "List of web form views",
            "items": {
              "$ref": "#/components/schemas/WidgetView"
            },
            "type": "array"
          }
        },
        "required": [
          "widgetViewList"
        ],
        "type": "object"
      }
    }
  }
}
